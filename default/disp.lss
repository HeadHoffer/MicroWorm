
disp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00800100  000025a8  0000263c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000806  00800266  00800266  000027a2  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  000027a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000068d  00000000  00000000  00002922  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c19  00000000  00000000  00002faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011d2  00000000  00000000  00005bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019ab  00000000  00000000  00006d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00008748  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000739  00000000  00000000  00008a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  000091a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000996f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ea       	ldi	r30, 0xA8	; 168
      a0:	f5 e2       	ldi	r31, 0x25	; 37
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 36       	cpi	r26, 0x66	; 102
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	1a e0       	ldi	r17, 0x0A	; 10
      b4:	a6 e6       	ldi	r26, 0x66	; 102
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 36       	cpi	r26, 0x6C	; 108
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

int main(void)

{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
      d6:	c8 50       	subi	r28, 0x08	; 8
      d8:	d0 41       	sbci	r29, 0x10	; 16
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	f8 94       	cli
      de:	de bf       	out	0x3e, r29	; 62
      e0:	0f be       	out	0x3f, r0	; 63
      e2:	cd bf       	out	0x3d, r28	; 61
	DDRD &= ~((1<<SW1)|(1<<SW2)|(1<<SW3)|(1<<SW4)|(1<<SW5));
      e4:	a1 e3       	ldi	r26, 0x31	; 49
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e1 e3       	ldi	r30, 0x31	; 49
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	80 7e       	andi	r24, 0xE0	; 224
      f0:	8c 93       	st	X, r24

	// IO-port INIT
	DDRA = 0xE0;
      f2:	ea e3       	ldi	r30, 0x3A	; 58
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 ee       	ldi	r24, 0xE0	; 224
      f8:	80 83       	st	Z, r24
 
	LCD_Init_With_Flags(FLAG_LANDSCAPE | FLAG_IGNORE_WHITESPACE);
      fa:	85 e0       	ldi	r24, 0x05	; 5
      fc:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_Init_With_Flags>

	int num_snake_cells = 5;
     100:	85 e0       	ldi	r24, 0x05	; 5
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	9e 83       	std	Y+6, r25	; 0x06
     106:	8d 83       	std	Y+5, r24	; 0x05
		{ 20, 20 },
		{ 19, 20 },
		{ 18, 20 },
		{ 17, 20 },
		{ 16, 20 },
	};
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	90 e1       	ldi	r25, 0x10	; 16
     10c:	fe 01       	movw	r30, r28
     10e:	37 96       	adiw	r30, 0x07	; 7
     110:	df 01       	movw	r26, r30
     112:	9c 01       	movw	r18, r24
     114:	1d 92       	st	X+, r1
     116:	21 50       	subi	r18, 0x01	; 1
     118:	30 40       	sbci	r19, 0x00	; 0
     11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x46>
     11c:	84 e1       	ldi	r24, 0x14	; 20
     11e:	8f 83       	std	Y+7, r24	; 0x07
     120:	84 e1       	ldi	r24, 0x14	; 20
     122:	88 87       	std	Y+8, r24	; 0x08
     124:	83 e1       	ldi	r24, 0x13	; 19
     126:	89 87       	std	Y+9, r24	; 0x09
     128:	84 e1       	ldi	r24, 0x14	; 20
     12a:	8a 87       	std	Y+10, r24	; 0x0a
     12c:	82 e1       	ldi	r24, 0x12	; 18
     12e:	8b 87       	std	Y+11, r24	; 0x0b
     130:	84 e1       	ldi	r24, 0x14	; 20
     132:	8c 87       	std	Y+12, r24	; 0x0c
     134:	81 e1       	ldi	r24, 0x11	; 17
     136:	8d 87       	std	Y+13, r24	; 0x0d
     138:	84 e1       	ldi	r24, 0x14	; 20
     13a:	8e 87       	std	Y+14, r24	; 0x0e
     13c:	80 e1       	ldi	r24, 0x10	; 16
     13e:	8f 87       	std	Y+15, r24	; 0x0f
     140:	84 e1       	ldi	r24, 0x14	; 20
     142:	88 8b       	std	Y+16, r24	; 0x10
	char food[2];

	bool up,down,left,right = false;
     144:	19 82       	std	Y+1, r1	; 0x01

	DrawBox();
     146:	0e 94 49 02 	call	0x492	; 0x492 <DrawBox>

	while(true)
	{
		if(~Switch & (1<<SW4))
     14a:	e0 e3       	ldi	r30, 0x30	; 48
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	80 81       	ld	r24, Z
     150:	88 2f       	mov	r24, r24
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	88 70       	andi	r24, 0x08	; 8
     156:	90 70       	andi	r25, 0x00	; 0
     158:	00 97       	sbiw	r24, 0x00	; 0
     15a:	39 f4       	brne	.+14     	; 0x16a <main+0x9c>
		{
			up = true;
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	8c 83       	std	Y+4, r24	; 0x04
			down = left = right = false;
     160:	19 82       	std	Y+1, r1	; 0x01
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	8a 83       	std	Y+2, r24	; 0x02
     166:	8a 81       	ldd	r24, Y+2	; 0x02
     168:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(~Switch & (1<<SW1))
     16a:	e0 e3       	ldi	r30, 0x30	; 48
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	80 81       	ld	r24, Z
     170:	88 2f       	mov	r24, r24
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	81 70       	andi	r24, 0x01	; 1
     176:	90 70       	andi	r25, 0x00	; 0
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	39 f4       	brne	.+14     	; 0x18a <main+0xbc>
		{
			left = true;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	8a 83       	std	Y+2, r24	; 0x02
			down = up = right = false;
     180:	19 82       	std	Y+1, r1	; 0x01
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	8c 83       	std	Y+4, r24	; 0x04
     186:	8c 81       	ldd	r24, Y+4	; 0x04
     188:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(~Switch & (1<<SW3))
     18a:	e0 e3       	ldi	r30, 0x30	; 48
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	88 2f       	mov	r24, r24
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	84 70       	andi	r24, 0x04	; 4
     196:	90 70       	andi	r25, 0x00	; 0
     198:	00 97       	sbiw	r24, 0x00	; 0
     19a:	39 f4       	brne	.+14     	; 0x1aa <main+0xdc>
		{
			right = true;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	89 83       	std	Y+1, r24	; 0x01
			down = left = up = false;
     1a0:	1c 82       	std	Y+4, r1	; 0x04
     1a2:	8c 81       	ldd	r24, Y+4	; 0x04
     1a4:	8a 83       	std	Y+2, r24	; 0x02
     1a6:	8a 81       	ldd	r24, Y+2	; 0x02
     1a8:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(~Switch & (1<<SW2))
     1aa:	e0 e3       	ldi	r30, 0x30	; 48
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	88 2f       	mov	r24, r24
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	82 70       	andi	r24, 0x02	; 2
     1b6:	90 70       	andi	r25, 0x00	; 0
     1b8:	00 97       	sbiw	r24, 0x00	; 0
     1ba:	39 f4       	brne	.+14     	; 0x1ca <main+0xfc>
		{
			down = true;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	8b 83       	std	Y+3, r24	; 0x03
			up = left = right = false;
     1c0:	19 82       	std	Y+1, r1	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	8a 83       	std	Y+2, r24	; 0x02
     1c6:	8a 81       	ldd	r24, Y+2	; 0x02
     1c8:	8c 83       	std	Y+4, r24	; 0x04
		}

		if(up)
     1ca:	8c 81       	ldd	r24, Y+4	; 0x04
     1cc:	88 23       	and	r24, r24
     1ce:	51 f0       	breq	.+20     	; 0x1e4 <main+0x116>
		{
			Move(snake, &num_snake_cells, 0);
     1d0:	ce 01       	movw	r24, r28
     1d2:	07 96       	adiw	r24, 0x07	; 7
     1d4:	9e 01       	movw	r18, r28
     1d6:	2b 5f       	subi	r18, 0xFB	; 251
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
     1da:	b9 01       	movw	r22, r18
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	50 e0       	ldi	r21, 0x00	; 0
     1e0:	0e 94 23 01 	call	0x246	; 0x246 <Move>
		}
		if(down)
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	88 23       	and	r24, r24
     1e8:	51 f0       	breq	.+20     	; 0x1fe <main+0x130>
		{
			Move(snake, &num_snake_cells, 1);
     1ea:	ce 01       	movw	r24, r28
     1ec:	07 96       	adiw	r24, 0x07	; 7
     1ee:	9e 01       	movw	r18, r28
     1f0:	2b 5f       	subi	r18, 0xFB	; 251
     1f2:	3f 4f       	sbci	r19, 0xFF	; 255
     1f4:	b9 01       	movw	r22, r18
     1f6:	41 e0       	ldi	r20, 0x01	; 1
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	0e 94 23 01 	call	0x246	; 0x246 <Move>
		}
		if(left)
     1fe:	8a 81       	ldd	r24, Y+2	; 0x02
     200:	88 23       	and	r24, r24
     202:	51 f0       	breq	.+20     	; 0x218 <main+0x14a>
		{
			Move(snake, &num_snake_cells, 2);
     204:	ce 01       	movw	r24, r28
     206:	07 96       	adiw	r24, 0x07	; 7
     208:	9e 01       	movw	r18, r28
     20a:	2b 5f       	subi	r18, 0xFB	; 251
     20c:	3f 4f       	sbci	r19, 0xFF	; 255
     20e:	b9 01       	movw	r22, r18
     210:	42 e0       	ldi	r20, 0x02	; 2
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	0e 94 23 01 	call	0x246	; 0x246 <Move>
		}
		if(right)
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	88 23       	and	r24, r24
     21c:	51 f0       	breq	.+20     	; 0x232 <main+0x164>
		{
			Move(snake, &num_snake_cells, 3);
     21e:	ce 01       	movw	r24, r28
     220:	07 96       	adiw	r24, 0x07	; 7
     222:	9e 01       	movw	r18, r28
     224:	2b 5f       	subi	r18, 0xFB	; 251
     226:	3f 4f       	sbci	r19, 0xFF	; 255
     228:	b9 01       	movw	r22, r18
     22a:	43 e0       	ldi	r20, 0x03	; 3
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	0e 94 23 01 	call	0x246	; 0x246 <Move>
		}
		
		DrawSnake(snake, num_snake_cells);
     232:	2d 81       	ldd	r18, Y+5	; 0x05
     234:	3e 81       	ldd	r19, Y+6	; 0x06
     236:	ce 01       	movw	r24, r28
     238:	07 96       	adiw	r24, 0x07	; 7
     23a:	b9 01       	movw	r22, r18
     23c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DrawSnake>
		LCD_Display();
     240:	0e 94 4b 09 	call	0x1296	; 0x1296 <LCD_Display>
     244:	82 cf       	rjmp	.-252    	; 0x14a <main+0x7c>

00000246 <Move>:
	}
}

void Move(char **snake, int *num_snake_cells, char direction)
{
     246:	df 93       	push	r29
     248:	cf 93       	push	r28
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	2b 97       	sbiw	r28, 0x0b	; 11
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	9e 83       	std	Y+6, r25	; 0x06
     25c:	8d 83       	std	Y+5, r24	; 0x05
     25e:	78 87       	std	Y+8, r23	; 0x08
     260:	6f 83       	std	Y+7, r22	; 0x07
     262:	49 87       	std	Y+9, r20	; 0x09
	char new_pos[2];
	new_pos[0] = snake[0][0];
     264:	ed 81       	ldd	r30, Y+5	; 0x05
     266:	fe 81       	ldd	r31, Y+6	; 0x06
     268:	01 90       	ld	r0, Z+
     26a:	f0 81       	ld	r31, Z
     26c:	e0 2d       	mov	r30, r0
     26e:	80 81       	ld	r24, Z
     270:	8b 83       	std	Y+3, r24	; 0x03
	new_pos[1] = snake[0][1];
     272:	ed 81       	ldd	r30, Y+5	; 0x05
     274:	fe 81       	ldd	r31, Y+6	; 0x06
     276:	80 81       	ld	r24, Z
     278:	91 81       	ldd	r25, Z+1	; 0x01
     27a:	fc 01       	movw	r30, r24
     27c:	31 96       	adiw	r30, 0x01	; 1
     27e:	80 81       	ld	r24, Z
     280:	8c 83       	std	Y+4, r24	; 0x04

	switch(direction) {
     282:	89 85       	ldd	r24, Y+9	; 0x09
     284:	28 2f       	mov	r18, r24
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	3b 87       	std	Y+11, r19	; 0x0b
     28a:	2a 87       	std	Y+10, r18	; 0x0a
     28c:	8a 85       	ldd	r24, Y+10	; 0x0a
     28e:	9b 85       	ldd	r25, Y+11	; 0x0b
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	91 05       	cpc	r25, r1
     294:	c9 f0       	breq	.+50     	; 0x2c8 <Move+0x82>
     296:	2a 85       	ldd	r18, Y+10	; 0x0a
     298:	3b 85       	ldd	r19, Y+11	; 0x0b
     29a:	22 30       	cpi	r18, 0x02	; 2
     29c:	31 05       	cpc	r19, r1
     29e:	2c f4       	brge	.+10     	; 0x2aa <Move+0x64>
     2a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     2a2:	9b 85       	ldd	r25, Y+11	; 0x0b
     2a4:	00 97       	sbiw	r24, 0x00	; 0
     2a6:	61 f0       	breq	.+24     	; 0x2c0 <Move+0x7a>
     2a8:	1a c0       	rjmp	.+52     	; 0x2de <Move+0x98>
     2aa:	2a 85       	ldd	r18, Y+10	; 0x0a
     2ac:	3b 85       	ldd	r19, Y+11	; 0x0b
     2ae:	22 30       	cpi	r18, 0x02	; 2
     2b0:	31 05       	cpc	r19, r1
     2b2:	71 f0       	breq	.+28     	; 0x2d0 <Move+0x8a>
     2b4:	8a 85       	ldd	r24, Y+10	; 0x0a
     2b6:	9b 85       	ldd	r25, Y+11	; 0x0b
     2b8:	83 30       	cpi	r24, 0x03	; 3
     2ba:	91 05       	cpc	r25, r1
     2bc:	69 f0       	breq	.+26     	; 0x2d8 <Move+0x92>
     2be:	0f c0       	rjmp	.+30     	; 0x2de <Move+0x98>
		case 0: // up
			new_pos[1]++;
     2c0:	8c 81       	ldd	r24, Y+4	; 0x04
     2c2:	8f 5f       	subi	r24, 0xFF	; 255
     2c4:	8c 83       	std	Y+4, r24	; 0x04
     2c6:	0b c0       	rjmp	.+22     	; 0x2de <Move+0x98>
			break;
		case 1: // down
			new_pos[1]--;
     2c8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ca:	81 50       	subi	r24, 0x01	; 1
     2cc:	8c 83       	std	Y+4, r24	; 0x04
     2ce:	07 c0       	rjmp	.+14     	; 0x2de <Move+0x98>
			break;
		case 2: // left
			new_pos[0]--;
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	81 50       	subi	r24, 0x01	; 1
     2d4:	8b 83       	std	Y+3, r24	; 0x03
     2d6:	03 c0       	rjmp	.+6      	; 0x2de <Move+0x98>
			break;
		case 3: // right
			new_pos[0]++;
     2d8:	8b 81       	ldd	r24, Y+3	; 0x03
     2da:	8f 5f       	subi	r24, 0xFF	; 255
     2dc:	8b 83       	std	Y+3, r24	; 0x03
			break;	
	}

	int i;
	for(i = 1; i < *num_snake_cells; i++) {
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	9a 83       	std	Y+2, r25	; 0x02
     2e4:	89 83       	std	Y+1, r24	; 0x01
     2e6:	4c c0       	rjmp	.+152    	; 0x380 <Move+0x13a>
		snake[i][0] = snake[i - 1][0];
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	9a 81       	ldd	r25, Y+2	; 0x02
     2ec:	9c 01       	movw	r18, r24
     2ee:	22 0f       	add	r18, r18
     2f0:	33 1f       	adc	r19, r19
     2f2:	8d 81       	ldd	r24, Y+5	; 0x05
     2f4:	9e 81       	ldd	r25, Y+6	; 0x06
     2f6:	fc 01       	movw	r30, r24
     2f8:	e2 0f       	add	r30, r18
     2fa:	f3 1f       	adc	r31, r19
     2fc:	a0 81       	ld	r26, Z
     2fe:	b1 81       	ldd	r27, Z+1	; 0x01
     300:	29 81       	ldd	r18, Y+1	; 0x01
     302:	3a 81       	ldd	r19, Y+2	; 0x02
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	82 1b       	sub	r24, r18
     30a:	93 0b       	sbc	r25, r19
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	22 27       	eor	r18, r18
     312:	33 27       	eor	r19, r19
     314:	28 1b       	sub	r18, r24
     316:	39 0b       	sbc	r19, r25
     318:	8d 81       	ldd	r24, Y+5	; 0x05
     31a:	9e 81       	ldd	r25, Y+6	; 0x06
     31c:	fc 01       	movw	r30, r24
     31e:	e2 0f       	add	r30, r18
     320:	f3 1f       	adc	r31, r19
     322:	01 90       	ld	r0, Z+
     324:	f0 81       	ld	r31, Z
     326:	e0 2d       	mov	r30, r0
     328:	80 81       	ld	r24, Z
     32a:	8c 93       	st	X, r24
		snake[i][1] = snake[i - 1][1];
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
     330:	9c 01       	movw	r18, r24
     332:	22 0f       	add	r18, r18
     334:	33 1f       	adc	r19, r19
     336:	8d 81       	ldd	r24, Y+5	; 0x05
     338:	9e 81       	ldd	r25, Y+6	; 0x06
     33a:	fc 01       	movw	r30, r24
     33c:	e2 0f       	add	r30, r18
     33e:	f3 1f       	adc	r31, r19
     340:	80 81       	ld	r24, Z
     342:	91 81       	ldd	r25, Z+1	; 0x01
     344:	dc 01       	movw	r26, r24
     346:	11 96       	adiw	r26, 0x01	; 1
     348:	29 81       	ldd	r18, Y+1	; 0x01
     34a:	3a 81       	ldd	r19, Y+2	; 0x02
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	82 1b       	sub	r24, r18
     352:	93 0b       	sbc	r25, r19
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	22 27       	eor	r18, r18
     35a:	33 27       	eor	r19, r19
     35c:	28 1b       	sub	r18, r24
     35e:	39 0b       	sbc	r19, r25
     360:	8d 81       	ldd	r24, Y+5	; 0x05
     362:	9e 81       	ldd	r25, Y+6	; 0x06
     364:	fc 01       	movw	r30, r24
     366:	e2 0f       	add	r30, r18
     368:	f3 1f       	adc	r31, r19
     36a:	80 81       	ld	r24, Z
     36c:	91 81       	ldd	r25, Z+1	; 0x01
     36e:	fc 01       	movw	r30, r24
     370:	31 96       	adiw	r30, 0x01	; 1
     372:	80 81       	ld	r24, Z
     374:	8c 93       	st	X, r24
			new_pos[0]++;
			break;	
	}

	int i;
	for(i = 1; i < *num_snake_cells; i++) {
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	9a 83       	std	Y+2, r25	; 0x02
     37e:	89 83       	std	Y+1, r24	; 0x01
     380:	ef 81       	ldd	r30, Y+7	; 0x07
     382:	f8 85       	ldd	r31, Y+8	; 0x08
     384:	20 81       	ld	r18, Z
     386:	31 81       	ldd	r19, Z+1	; 0x01
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	82 17       	cp	r24, r18
     38e:	93 07       	cpc	r25, r19
     390:	0c f4       	brge	.+2      	; 0x394 <Move+0x14e>
     392:	aa cf       	rjmp	.-172    	; 0x2e8 <Move+0xa2>
		snake[i][0] = snake[i - 1][0];
		snake[i][1] = snake[i - 1][1];
	}

	snake[0][0] = new_pos[0];
     394:	ed 81       	ldd	r30, Y+5	; 0x05
     396:	fe 81       	ldd	r31, Y+6	; 0x06
     398:	01 90       	ld	r0, Z+
     39a:	f0 81       	ld	r31, Z
     39c:	e0 2d       	mov	r30, r0
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	80 83       	st	Z, r24
	snake[0][1] = new_pos[1];
     3a2:	ed 81       	ldd	r30, Y+5	; 0x05
     3a4:	fe 81       	ldd	r31, Y+6	; 0x06
     3a6:	80 81       	ld	r24, Z
     3a8:	91 81       	ldd	r25, Z+1	; 0x01
     3aa:	fc 01       	movw	r30, r24
     3ac:	31 96       	adiw	r30, 0x01	; 1
     3ae:	8c 81       	ldd	r24, Y+4	; 0x04
     3b0:	80 83       	st	Z, r24
}
     3b2:	2b 96       	adiw	r28, 0x0b	; 11
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	cf 91       	pop	r28
     3c0:	df 91       	pop	r29
     3c2:	08 95       	ret

000003c4 <DrawSnake>:

void DrawSnake(char **snake, int num_snake_cells)
{
     3c4:	df 93       	push	r29
     3c6:	cf 93       	push	r28
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	2e 97       	sbiw	r28, 0x0e	; 14
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
     3d8:	9c 87       	std	Y+12, r25	; 0x0c
     3da:	8b 87       	std	Y+11, r24	; 0x0b
     3dc:	7e 87       	std	Y+14, r23	; 0x0e
     3de:	6d 87       	std	Y+13, r22	; 0x0d
	LCD_ClearArea(1,1,126,62);
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	4e e7       	ldi	r20, 0x7E	; 126
     3e6:	2e e3       	ldi	r18, 0x3E	; 62
     3e8:	0e 94 36 06 	call	0xc6c	; 0xc6c <LCD_ClearArea>

	int i;
	for(i = 0; i < num_snake_cells; i++) {
     3ec:	1a 86       	std	Y+10, r1	; 0x0a
     3ee:	19 86       	std	Y+9, r1	; 0x09
     3f0:	3f c0       	rjmp	.+126    	; 0x470 <DrawSnake+0xac>
		int x = snake[i][0];
     3f2:	89 85       	ldd	r24, Y+9	; 0x09
     3f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f6:	9c 01       	movw	r18, r24
     3f8:	22 0f       	add	r18, r18
     3fa:	33 1f       	adc	r19, r19
     3fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     3fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     400:	fc 01       	movw	r30, r24
     402:	e2 0f       	add	r30, r18
     404:	f3 1f       	adc	r31, r19
     406:	01 90       	ld	r0, Z+
     408:	f0 81       	ld	r31, Z
     40a:	e0 2d       	mov	r30, r0
     40c:	80 81       	ld	r24, Z
     40e:	88 2f       	mov	r24, r24
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	98 87       	std	Y+8, r25	; 0x08
     414:	8f 83       	std	Y+7, r24	; 0x07
		int y = snake[i][1];
     416:	89 85       	ldd	r24, Y+9	; 0x09
     418:	9a 85       	ldd	r25, Y+10	; 0x0a
     41a:	9c 01       	movw	r18, r24
     41c:	22 0f       	add	r18, r18
     41e:	33 1f       	adc	r19, r19
     420:	8b 85       	ldd	r24, Y+11	; 0x0b
     422:	9c 85       	ldd	r25, Y+12	; 0x0c
     424:	fc 01       	movw	r30, r24
     426:	e2 0f       	add	r30, r18
     428:	f3 1f       	adc	r31, r19
     42a:	80 81       	ld	r24, Z
     42c:	91 81       	ldd	r25, Z+1	; 0x01
     42e:	fc 01       	movw	r30, r24
     430:	31 96       	adiw	r30, 0x01	; 1
     432:	80 81       	ld	r24, Z
     434:	88 2f       	mov	r24, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	9e 83       	std	Y+6, r25	; 0x06
     43a:	8d 83       	std	Y+5, r24	; 0x05
		int screen_x = x/* * (SCREEN_WIDTH / GRID_WIDTH)*/;
     43c:	8f 81       	ldd	r24, Y+7	; 0x07
     43e:	98 85       	ldd	r25, Y+8	; 0x08
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	8b 83       	std	Y+3, r24	; 0x03
		int screen_y = y/* * (SCREEN_HEIGHT / GRID_HEIGHT)*/;
     444:	8d 81       	ldd	r24, Y+5	; 0x05
     446:	9e 81       	ldd	r25, Y+6	; 0x06
     448:	9a 83       	std	Y+2, r25	; 0x02
     44a:	89 83       	std	Y+1, r24	; 0x01
		LCD_FillRect(screen_x, screen_y, screen_x + (SCREEN_WIDTH / GRID_WIDTH), screen_y + (SCREEN_HEIGHT / GRID_HEIGHT));
     44c:	3b 81       	ldd	r19, Y+3	; 0x03
     44e:	49 81       	ldd	r20, Y+1	; 0x01
     450:	8b 81       	ldd	r24, Y+3	; 0x03
     452:	98 2f       	mov	r25, r24
     454:	9e 5f       	subi	r25, 0xFE	; 254
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	28 2f       	mov	r18, r24
     45a:	2e 5f       	subi	r18, 0xFE	; 254
     45c:	83 2f       	mov	r24, r19
     45e:	64 2f       	mov	r22, r20
     460:	49 2f       	mov	r20, r25
     462:	0e 94 9a 06 	call	0xd34	; 0xd34 <LCD_FillRect>
void DrawSnake(char **snake, int num_snake_cells)
{
	LCD_ClearArea(1,1,126,62);

	int i;
	for(i = 0; i < num_snake_cells; i++) {
     466:	89 85       	ldd	r24, Y+9	; 0x09
     468:	9a 85       	ldd	r25, Y+10	; 0x0a
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	9a 87       	std	Y+10, r25	; 0x0a
     46e:	89 87       	std	Y+9, r24	; 0x09
     470:	29 85       	ldd	r18, Y+9	; 0x09
     472:	3a 85       	ldd	r19, Y+10	; 0x0a
     474:	8d 85       	ldd	r24, Y+13	; 0x0d
     476:	9e 85       	ldd	r25, Y+14	; 0x0e
     478:	28 17       	cp	r18, r24
     47a:	39 07       	cpc	r19, r25
     47c:	0c f4       	brge	.+2      	; 0x480 <DrawSnake+0xbc>
     47e:	b9 cf       	rjmp	.-142    	; 0x3f2 <DrawSnake+0x2e>
		int y = snake[i][1];
		int screen_x = x/* * (SCREEN_WIDTH / GRID_WIDTH)*/;
		int screen_y = y/* * (SCREEN_HEIGHT / GRID_HEIGHT)*/;
		LCD_FillRect(screen_x, screen_y, screen_x + (SCREEN_WIDTH / GRID_WIDTH), screen_y + (SCREEN_HEIGHT / GRID_HEIGHT));
	}
}
     480:	2e 96       	adiw	r28, 0x0e	; 14
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	cf 91       	pop	r28
     48e:	df 91       	pop	r29
     490:	08 95       	ret

00000492 <DrawBox>:

void DrawBox()
{
     492:	df 93       	push	r29
     494:	cf 93       	push	r28
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
	LCD_DrawLine(0,0,128,0); //bottom
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	40 e8       	ldi	r20, 0x80	; 128
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	0e 94 de 06 	call	0xdbc	; 0xdbc <LCD_DrawLine>
	LCD_DrawLine(127,1,127,63); //left
     4a6:	8f e7       	ldi	r24, 0x7F	; 127
     4a8:	61 e0       	ldi	r22, 0x01	; 1
     4aa:	4f e7       	ldi	r20, 0x7F	; 127
     4ac:	2f e3       	ldi	r18, 0x3F	; 63
     4ae:	0e 94 de 06 	call	0xdbc	; 0xdbc <LCD_DrawLine>
	LCD_DrawLine(0,1,0,63); //right
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	2f e3       	ldi	r18, 0x3F	; 63
     4ba:	0e 94 de 06 	call	0xdbc	; 0xdbc <LCD_DrawLine>
	LCD_DrawLine(0,63,128,63); //top
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	6f e3       	ldi	r22, 0x3F	; 63
     4c2:	40 e8       	ldi	r20, 0x80	; 128
     4c4:	2f e3       	ldi	r18, 0x3F	; 63
     4c6:	0e 94 de 06 	call	0xdbc	; 0xdbc <LCD_DrawLine>
}
     4ca:	cf 91       	pop	r28
     4cc:	df 91       	pop	r29
     4ce:	08 95       	ret

000004d0 <LCD_SetFlags>:
	Flips the values of the two arguments
*/
void flip(unsigned char* c1, unsigned char* c2);

void LCD_SetFlags(char flags)
{
     4d0:	df 93       	push	r29
     4d2:	cf 93       	push	r28
     4d4:	0f 92       	push	r0
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	89 83       	std	Y+1, r24	; 0x01
	FLAGS = flags;
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	80 93 66 02 	sts	0x0266, r24
}
     4e2:	0f 90       	pop	r0
     4e4:	cf 91       	pop	r28
     4e6:	df 91       	pop	r29
     4e8:	08 95       	ret

000004ea <LCD_Init>:

void LCD_Init()
{
     4ea:	df 93       	push	r29
     4ec:	cf 93       	push	r28
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	aa 97       	sbiw	r28, 0x2a	; 42
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
	LCD_DDR |= LCD_RESET_PIN | LCD_DATA_PIN | LCD_CD_PIN | LCD_CLK_PIN | LCD_SCE_PIN;
     4fe:	a4 e3       	ldi	r26, 0x34	; 52
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	e4 e3       	ldi	r30, 0x34	; 52
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	80 81       	ld	r24, Z
     508:	8f 61       	ori	r24, 0x1F	; 31
     50a:	8c 93       	st	X, r24
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 ef       	ldi	r26, 0xF0	; 240
     512:	b1 e4       	ldi	r27, 0x41	; 65
     514:	8f a3       	std	Y+39, r24	; 0x27
     516:	98 a7       	std	Y+40, r25	; 0x28
     518:	a9 a7       	std	Y+41, r26	; 0x29
     51a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     51c:	6f a1       	ldd	r22, Y+39	; 0x27
     51e:	78 a5       	ldd	r23, Y+40	; 0x28
     520:	89 a5       	ldd	r24, Y+41	; 0x29
     522:	9a a5       	ldd	r25, Y+42	; 0x2a
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	4a ef       	ldi	r20, 0xFA	; 250
     52a:	54 e4       	ldi	r21, 0x44	; 68
     52c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	8b a3       	std	Y+35, r24	; 0x23
     536:	9c a3       	std	Y+36, r25	; 0x24
     538:	ad a3       	std	Y+37, r26	; 0x25
     53a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     53c:	6b a1       	ldd	r22, Y+35	; 0x23
     53e:	7c a1       	ldd	r23, Y+36	; 0x24
     540:	8d a1       	ldd	r24, Y+37	; 0x25
     542:	9e a1       	ldd	r25, Y+38	; 0x26
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	40 e8       	ldi	r20, 0x80	; 128
     54a:	5f e3       	ldi	r21, 0x3F	; 63
     54c:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__ltsf2>
     550:	88 23       	and	r24, r24
     552:	2c f4       	brge	.+10     	; 0x55e <LCD_Init+0x74>
		__ticks = 1;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	9a a3       	std	Y+34, r25	; 0x22
     55a:	89 a3       	std	Y+33, r24	; 0x21
     55c:	3f c0       	rjmp	.+126    	; 0x5dc <LCD_Init+0xf2>
	else if (__tmp > 65535)
     55e:	6b a1       	ldd	r22, Y+35	; 0x23
     560:	7c a1       	ldd	r23, Y+36	; 0x24
     562:	8d a1       	ldd	r24, Y+37	; 0x25
     564:	9e a1       	ldd	r25, Y+38	; 0x26
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	3f ef       	ldi	r19, 0xFF	; 255
     56a:	4f e7       	ldi	r20, 0x7F	; 127
     56c:	57 e4       	ldi	r21, 0x47	; 71
     56e:	0e 94 01 10 	call	0x2002	; 0x2002 <__gtsf2>
     572:	18 16       	cp	r1, r24
     574:	4c f5       	brge	.+82     	; 0x5c8 <LCD_Init+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     576:	6f a1       	ldd	r22, Y+39	; 0x27
     578:	78 a5       	ldd	r23, Y+40	; 0x28
     57a:	89 a5       	ldd	r24, Y+41	; 0x29
     57c:	9a a5       	ldd	r25, Y+42	; 0x2a
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	40 e2       	ldi	r20, 0x20	; 32
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
     58a:	dc 01       	movw	r26, r24
     58c:	cb 01       	movw	r24, r22
     58e:	bc 01       	movw	r22, r24
     590:	cd 01       	movw	r24, r26
     592:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fixunssfsi>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	9a a3       	std	Y+34, r25	; 0x22
     59c:	89 a3       	std	Y+33, r24	; 0x21
     59e:	0f c0       	rjmp	.+30     	; 0x5be <LCD_Init+0xd4>
     5a0:	88 ec       	ldi	r24, 0xC8	; 200
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	98 a3       	std	Y+32, r25	; 0x20
     5a6:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     5aa:	98 a1       	ldd	r25, Y+32	; 0x20
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <LCD_Init+0xc2>
     5b0:	98 a3       	std	Y+32, r25	; 0x20
     5b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b4:	89 a1       	ldd	r24, Y+33	; 0x21
     5b6:	9a a1       	ldd	r25, Y+34	; 0x22
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	9a a3       	std	Y+34, r25	; 0x22
     5bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5be:	89 a1       	ldd	r24, Y+33	; 0x21
     5c0:	9a a1       	ldd	r25, Y+34	; 0x22
     5c2:	00 97       	sbiw	r24, 0x00	; 0
     5c4:	69 f7       	brne	.-38     	; 0x5a0 <LCD_Init+0xb6>
     5c6:	14 c0       	rjmp	.+40     	; 0x5f0 <LCD_Init+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5c8:	6b a1       	ldd	r22, Y+35	; 0x23
     5ca:	7c a1       	ldd	r23, Y+36	; 0x24
     5cc:	8d a1       	ldd	r24, Y+37	; 0x25
     5ce:	9e a1       	ldd	r25, Y+38	; 0x26
     5d0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fixunssfsi>
     5d4:	dc 01       	movw	r26, r24
     5d6:	cb 01       	movw	r24, r22
     5d8:	9a a3       	std	Y+34, r25	; 0x22
     5da:	89 a3       	std	Y+33, r24	; 0x21
     5dc:	89 a1       	ldd	r24, Y+33	; 0x21
     5de:	9a a1       	ldd	r25, Y+34	; 0x22
     5e0:	9e 8f       	std	Y+30, r25	; 0x1e
     5e2:	8d 8f       	std	Y+29, r24	; 0x1d
     5e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     5e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <LCD_Init+0xfe>
     5ec:	9e 8f       	std	Y+30, r25	; 0x1e
     5ee:	8d 8f       	std	Y+29, r24	; 0x1d

	/*
		RESET THE DISPLAY
	*/
	_delay_ms(30);
	LCD_PORT &= ~LCD_RESET_PIN; //Reset
     5f0:	a5 e3       	ldi	r26, 0x35	; 53
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	e5 e3       	ldi	r30, 0x35	; 53
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	8e 7f       	andi	r24, 0xFE	; 254
     5fc:	8c 93       	st	X, r24
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	a0 ef       	ldi	r26, 0xF0	; 240
     604:	b1 e4       	ldi	r27, 0x41	; 65
     606:	89 8f       	std	Y+25, r24	; 0x19
     608:	9a 8f       	std	Y+26, r25	; 0x1a
     60a:	ab 8f       	std	Y+27, r26	; 0x1b
     60c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     60e:	69 8d       	ldd	r22, Y+25	; 0x19
     610:	7a 8d       	ldd	r23, Y+26	; 0x1a
     612:	8b 8d       	ldd	r24, Y+27	; 0x1b
     614:	9c 8d       	ldd	r25, Y+28	; 0x1c
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	4a ef       	ldi	r20, 0xFA	; 250
     61c:	54 e4       	ldi	r21, 0x44	; 68
     61e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
     622:	dc 01       	movw	r26, r24
     624:	cb 01       	movw	r24, r22
     626:	8d 8b       	std	Y+21, r24	; 0x15
     628:	9e 8b       	std	Y+22, r25	; 0x16
     62a:	af 8b       	std	Y+23, r26	; 0x17
     62c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     62e:	6d 89       	ldd	r22, Y+21	; 0x15
     630:	7e 89       	ldd	r23, Y+22	; 0x16
     632:	8f 89       	ldd	r24, Y+23	; 0x17
     634:	98 8d       	ldd	r25, Y+24	; 0x18
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e8       	ldi	r20, 0x80	; 128
     63c:	5f e3       	ldi	r21, 0x3F	; 63
     63e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__ltsf2>
     642:	88 23       	and	r24, r24
     644:	2c f4       	brge	.+10     	; 0x650 <LCD_Init+0x166>
		__ticks = 1;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	9c 8b       	std	Y+20, r25	; 0x14
     64c:	8b 8b       	std	Y+19, r24	; 0x13
     64e:	3f c0       	rjmp	.+126    	; 0x6ce <LCD_Init+0x1e4>
	else if (__tmp > 65535)
     650:	6d 89       	ldd	r22, Y+21	; 0x15
     652:	7e 89       	ldd	r23, Y+22	; 0x16
     654:	8f 89       	ldd	r24, Y+23	; 0x17
     656:	98 8d       	ldd	r25, Y+24	; 0x18
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	3f ef       	ldi	r19, 0xFF	; 255
     65c:	4f e7       	ldi	r20, 0x7F	; 127
     65e:	57 e4       	ldi	r21, 0x47	; 71
     660:	0e 94 01 10 	call	0x2002	; 0x2002 <__gtsf2>
     664:	18 16       	cp	r1, r24
     666:	4c f5       	brge	.+82     	; 0x6ba <LCD_Init+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     668:	69 8d       	ldd	r22, Y+25	; 0x19
     66a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     66c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     66e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e2       	ldi	r20, 0x20	; 32
     676:	51 e4       	ldi	r21, 0x41	; 65
     678:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
     67c:	dc 01       	movw	r26, r24
     67e:	cb 01       	movw	r24, r22
     680:	bc 01       	movw	r22, r24
     682:	cd 01       	movw	r24, r26
     684:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fixunssfsi>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	9c 8b       	std	Y+20, r25	; 0x14
     68e:	8b 8b       	std	Y+19, r24	; 0x13
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <LCD_Init+0x1c6>
     692:	88 ec       	ldi	r24, 0xC8	; 200
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	9a 8b       	std	Y+18, r25	; 0x12
     698:	89 8b       	std	Y+17, r24	; 0x11
     69a:	89 89       	ldd	r24, Y+17	; 0x11
     69c:	9a 89       	ldd	r25, Y+18	; 0x12
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <LCD_Init+0x1b4>
     6a2:	9a 8b       	std	Y+18, r25	; 0x12
     6a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6a6:	8b 89       	ldd	r24, Y+19	; 0x13
     6a8:	9c 89       	ldd	r25, Y+20	; 0x14
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	9c 8b       	std	Y+20, r25	; 0x14
     6ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b0:	8b 89       	ldd	r24, Y+19	; 0x13
     6b2:	9c 89       	ldd	r25, Y+20	; 0x14
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	69 f7       	brne	.-38     	; 0x692 <LCD_Init+0x1a8>
     6b8:	14 c0       	rjmp	.+40     	; 0x6e2 <LCD_Init+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ba:	6d 89       	ldd	r22, Y+21	; 0x15
     6bc:	7e 89       	ldd	r23, Y+22	; 0x16
     6be:	8f 89       	ldd	r24, Y+23	; 0x17
     6c0:	98 8d       	ldd	r25, Y+24	; 0x18
     6c2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fixunssfsi>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	9c 8b       	std	Y+20, r25	; 0x14
     6cc:	8b 8b       	std	Y+19, r24	; 0x13
     6ce:	8b 89       	ldd	r24, Y+19	; 0x13
     6d0:	9c 89       	ldd	r25, Y+20	; 0x14
     6d2:	98 8b       	std	Y+16, r25	; 0x10
     6d4:	8f 87       	std	Y+15, r24	; 0x0f
     6d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     6d8:	98 89       	ldd	r25, Y+16	; 0x10
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <LCD_Init+0x1f0>
     6de:	98 8b       	std	Y+16, r25	; 0x10
     6e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	LCD_PORT |= LCD_RESET_PIN;  //Disable Reset
     6e2:	a5 e3       	ldi	r26, 0x35	; 53
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e5 e3       	ldi	r30, 0x35	; 53
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	81 60       	ori	r24, 0x01	; 1
     6ee:	8c 93       	st	X, r24
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 ef       	ldi	r26, 0xF0	; 240
     6f6:	b1 e4       	ldi	r27, 0x41	; 65
     6f8:	8b 87       	std	Y+11, r24	; 0x0b
     6fa:	9c 87       	std	Y+12, r25	; 0x0c
     6fc:	ad 87       	std	Y+13, r26	; 0x0d
     6fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     700:	6b 85       	ldd	r22, Y+11	; 0x0b
     702:	7c 85       	ldd	r23, Y+12	; 0x0c
     704:	8d 85       	ldd	r24, Y+13	; 0x0d
     706:	9e 85       	ldd	r25, Y+14	; 0x0e
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	4a ef       	ldi	r20, 0xFA	; 250
     70e:	54 e4       	ldi	r21, 0x44	; 68
     710:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
     714:	dc 01       	movw	r26, r24
     716:	cb 01       	movw	r24, r22
     718:	8f 83       	std	Y+7, r24	; 0x07
     71a:	98 87       	std	Y+8, r25	; 0x08
     71c:	a9 87       	std	Y+9, r26	; 0x09
     71e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     720:	6f 81       	ldd	r22, Y+7	; 0x07
     722:	78 85       	ldd	r23, Y+8	; 0x08
     724:	89 85       	ldd	r24, Y+9	; 0x09
     726:	9a 85       	ldd	r25, Y+10	; 0x0a
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e8       	ldi	r20, 0x80	; 128
     72e:	5f e3       	ldi	r21, 0x3F	; 63
     730:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__ltsf2>
     734:	88 23       	and	r24, r24
     736:	2c f4       	brge	.+10     	; 0x742 <LCD_Init+0x258>
		__ticks = 1;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	9e 83       	std	Y+6, r25	; 0x06
     73e:	8d 83       	std	Y+5, r24	; 0x05
     740:	3f c0       	rjmp	.+126    	; 0x7c0 <LCD_Init+0x2d6>
	else if (__tmp > 65535)
     742:	6f 81       	ldd	r22, Y+7	; 0x07
     744:	78 85       	ldd	r23, Y+8	; 0x08
     746:	89 85       	ldd	r24, Y+9	; 0x09
     748:	9a 85       	ldd	r25, Y+10	; 0x0a
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	3f ef       	ldi	r19, 0xFF	; 255
     74e:	4f e7       	ldi	r20, 0x7F	; 127
     750:	57 e4       	ldi	r21, 0x47	; 71
     752:	0e 94 01 10 	call	0x2002	; 0x2002 <__gtsf2>
     756:	18 16       	cp	r1, r24
     758:	4c f5       	brge	.+82     	; 0x7ac <LCD_Init+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     75a:	6b 85       	ldd	r22, Y+11	; 0x0b
     75c:	7c 85       	ldd	r23, Y+12	; 0x0c
     75e:	8d 85       	ldd	r24, Y+13	; 0x0d
     760:	9e 85       	ldd	r25, Y+14	; 0x0e
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e2       	ldi	r20, 0x20	; 32
     768:	51 e4       	ldi	r21, 0x41	; 65
     76a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
     76e:	dc 01       	movw	r26, r24
     770:	cb 01       	movw	r24, r22
     772:	bc 01       	movw	r22, r24
     774:	cd 01       	movw	r24, r26
     776:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fixunssfsi>
     77a:	dc 01       	movw	r26, r24
     77c:	cb 01       	movw	r24, r22
     77e:	9e 83       	std	Y+6, r25	; 0x06
     780:	8d 83       	std	Y+5, r24	; 0x05
     782:	0f c0       	rjmp	.+30     	; 0x7a2 <LCD_Init+0x2b8>
     784:	88 ec       	ldi	r24, 0xC8	; 200
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	9c 83       	std	Y+4, r25	; 0x04
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	f1 f7       	brne	.-4      	; 0x790 <LCD_Init+0x2a6>
     794:	9c 83       	std	Y+4, r25	; 0x04
     796:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     798:	8d 81       	ldd	r24, Y+5	; 0x05
     79a:	9e 81       	ldd	r25, Y+6	; 0x06
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	9e 83       	std	Y+6, r25	; 0x06
     7a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7a2:	8d 81       	ldd	r24, Y+5	; 0x05
     7a4:	9e 81       	ldd	r25, Y+6	; 0x06
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	69 f7       	brne	.-38     	; 0x784 <LCD_Init+0x29a>
     7aa:	14 c0       	rjmp	.+40     	; 0x7d4 <LCD_Init+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ac:	6f 81       	ldd	r22, Y+7	; 0x07
     7ae:	78 85       	ldd	r23, Y+8	; 0x08
     7b0:	89 85       	ldd	r24, Y+9	; 0x09
     7b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fixunssfsi>
     7b8:	dc 01       	movw	r26, r24
     7ba:	cb 01       	movw	r24, r22
     7bc:	9e 83       	std	Y+6, r25	; 0x06
     7be:	8d 83       	std	Y+5, r24	; 0x05
     7c0:	8d 81       	ldd	r24, Y+5	; 0x05
     7c2:	9e 81       	ldd	r25, Y+6	; 0x06
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	89 83       	std	Y+1, r24	; 0x01
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	9a 81       	ldd	r25, Y+2	; 0x02
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <LCD_Init+0x2e2>
     7d0:	9a 83       	std	Y+2, r25	; 0x02
     7d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

	sendData(0xEB, CMD); // LCD-Bias
     7d4:	8b ee       	ldi	r24, 0xEB	; 235
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>
	sendData(0x23, CMD); // 64 rows
     7dc:	83 e2       	ldi	r24, 0x23	; 35
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>
	sendData(0x81, CMD); // Potentiometer
     7e4:	81 e8       	ldi	r24, 0x81	; 129
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>
	sendData(0x64, CMD); // Contrast
     7ec:	84 e6       	ldi	r24, 0x64	; 100
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>
	sendData(0xAF, CMD); // Enable display
     7f4:	8f ea       	ldi	r24, 0xAF	; 175
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>
	sendData(0xCC, CMD); // RAM Mapping
     7fc:	8c ec       	ldi	r24, 0xCC	; 204
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>

	if(FLAGS & FLAG_INVERTED) sendData(0xA7, CMD); // Inversion
     804:	80 91 66 02 	lds	r24, 0x0266
     808:	88 2f       	mov	r24, r24
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	82 70       	andi	r24, 0x02	; 2
     80e:	90 70       	andi	r25, 0x00	; 0
     810:	00 97       	sbiw	r24, 0x00	; 0
     812:	21 f0       	breq	.+8      	; 0x81c <LCD_Init+0x332>
     814:	87 ea       	ldi	r24, 0xA7	; 167
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>

	LCD_Clear(); // Clear the buffer
     81c:	0e 94 27 06 	call	0xc4e	; 0xc4e <LCD_Clear>
	LCD_Display(); // Send the clear buffer to display
     820:	0e 94 4b 09 	call	0x1296	; 0x1296 <LCD_Display>
}
     824:	aa 96       	adiw	r28, 0x2a	; 42
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	cf 91       	pop	r28
     832:	df 91       	pop	r29
     834:	08 95       	ret

00000836 <LCD_Init_With_Flags>:

void LCD_Init_With_Flags(char flags)
{
     836:	df 93       	push	r29
     838:	cf 93       	push	r28
     83a:	0f 92       	push	r0
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	89 83       	std	Y+1, r24	; 0x01
	LCD_SetFlags(flags);
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_SetFlags>
	LCD_Init();
     848:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_Init>
}
     84c:	0f 90       	pop	r0
     84e:	cf 91       	pop	r28
     850:	df 91       	pop	r29
     852:	08 95       	ret

00000854 <sendData>:
	sendData(uchar CD, uchar DATA)
	CD = Command/Data (0 = Command, 1 = Data)
	DATA = 8 bits of data
*/
void sendData(unsigned char data, unsigned char CD)
{
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	00 d0       	rcall	.+0      	; 0x85a <sendData+0x6>
     85a:	00 d0       	rcall	.+0      	; 0x85c <sendData+0x8>
     85c:	00 d0       	rcall	.+0      	; 0x85e <sendData+0xa>
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	8d 83       	std	Y+5, r24	; 0x05
     864:	6e 83       	std	Y+6, r22	; 0x06
	int j;

	// Enable display controller (LOW active)
	LCD_PORT &= ~LCD_SCE_PIN;
     866:	a5 e3       	ldi	r26, 0x35	; 53
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e5 e3       	ldi	r30, 0x35	; 53
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	8d 7f       	andi	r24, 0xFD	; 253
     872:	8c 93       	st	X, r24

	if(CD == 1) LCD_PORT |=  LCD_CD_PIN; // Data
     874:	8e 81       	ldd	r24, Y+6	; 0x06
     876:	81 30       	cpi	r24, 0x01	; 1
     878:	41 f4       	brne	.+16     	; 0x88a <sendData+0x36>
     87a:	a5 e3       	ldi	r26, 0x35	; 53
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	e5 e3       	ldi	r30, 0x35	; 53
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	84 60       	ori	r24, 0x04	; 4
     886:	8c 93       	st	X, r24
     888:	07 c0       	rjmp	.+14     	; 0x898 <sendData+0x44>
	else        LCD_PORT &= ~LCD_CD_PIN; // Command
     88a:	a5 e3       	ldi	r26, 0x35	; 53
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	e5 e3       	ldi	r30, 0x35	; 53
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	8b 7f       	andi	r24, 0xFB	; 251
     896:	8c 93       	st	X, r24

	for(int i = 0;i < 8;i++) // Send all the bits to driver
     898:	1a 82       	std	Y+2, r1	; 0x02
     89a:	19 82       	std	Y+1, r1	; 0x01
     89c:	45 c0       	rjmp	.+138    	; 0x928 <sendData+0xd4>
	{
		if((data >> (7 - i)) & 1)     LCD_PORT |=  LCD_DATA_PIN; // If the data is 1
     89e:	8d 81       	ldd	r24, Y+5	; 0x05
     8a0:	48 2f       	mov	r20, r24
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	27 e0       	ldi	r18, 0x07	; 7
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	b9 01       	movw	r22, r18
     8ae:	68 1b       	sub	r22, r24
     8b0:	79 0b       	sbc	r23, r25
     8b2:	cb 01       	movw	r24, r22
     8b4:	9a 01       	movw	r18, r20
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <sendData+0x68>
     8b8:	35 95       	asr	r19
     8ba:	27 95       	ror	r18
     8bc:	8a 95       	dec	r24
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <sendData+0x64>
     8c0:	c9 01       	movw	r24, r18
     8c2:	81 70       	andi	r24, 0x01	; 1
     8c4:	90 70       	andi	r25, 0x00	; 0
     8c6:	88 23       	and	r24, r24
     8c8:	41 f0       	breq	.+16     	; 0x8da <sendData+0x86>
     8ca:	a5 e3       	ldi	r26, 0x35	; 53
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	e5 e3       	ldi	r30, 0x35	; 53
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	88 60       	ori	r24, 0x08	; 8
     8d6:	8c 93       	st	X, r24
     8d8:	07 c0       	rjmp	.+14     	; 0x8e8 <sendData+0x94>
		else                      LCD_PORT &= ~LCD_DATA_PIN; // If the data is 0
     8da:	a5 e3       	ldi	r26, 0x35	; 53
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	e5 e3       	ldi	r30, 0x35	; 53
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	87 7f       	andi	r24, 0xF7	; 247
     8e6:	8c 93       	st	X, r24
		// Toggle clock pin
		LCD_PORT |= LCD_CLK_PIN; 
     8e8:	a5 e3       	ldi	r26, 0x35	; 53
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	e5 e3       	ldi	r30, 0x35	; 53
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	80 61       	ori	r24, 0x10	; 16
     8f4:	8c 93       	st	X, r24
		for(j = 0;j < 4;j++);
     8f6:	1c 82       	std	Y+4, r1	; 0x04
     8f8:	1b 82       	std	Y+3, r1	; 0x03
     8fa:	05 c0       	rjmp	.+10     	; 0x906 <sendData+0xb2>
     8fc:	8b 81       	ldd	r24, Y+3	; 0x03
     8fe:	9c 81       	ldd	r25, Y+4	; 0x04
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	9c 83       	std	Y+4, r25	; 0x04
     904:	8b 83       	std	Y+3, r24	; 0x03
     906:	8b 81       	ldd	r24, Y+3	; 0x03
     908:	9c 81       	ldd	r25, Y+4	; 0x04
     90a:	84 30       	cpi	r24, 0x04	; 4
     90c:	91 05       	cpc	r25, r1
     90e:	b4 f3       	brlt	.-20     	; 0x8fc <sendData+0xa8>
		LCD_PORT &= ~LCD_CLK_PIN;
     910:	a5 e3       	ldi	r26, 0x35	; 53
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	e5 e3       	ldi	r30, 0x35	; 53
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	8f 7e       	andi	r24, 0xEF	; 239
     91c:	8c 93       	st	X, r24
	LCD_PORT &= ~LCD_SCE_PIN;

	if(CD == 1) LCD_PORT |=  LCD_CD_PIN; // Data
	else        LCD_PORT &= ~LCD_CD_PIN; // Command

	for(int i = 0;i < 8;i++) // Send all the bits to driver
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	9a 81       	ldd	r25, Y+2	; 0x02
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	9a 83       	std	Y+2, r25	; 0x02
     926:	89 83       	std	Y+1, r24	; 0x01
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	88 30       	cpi	r24, 0x08	; 8
     92e:	91 05       	cpc	r25, r1
     930:	0c f4       	brge	.+2      	; 0x934 <sendData+0xe0>
     932:	b5 cf       	rjmp	.-150    	; 0x89e <sendData+0x4a>
		for(j = 0;j < 4;j++);
		LCD_PORT &= ~LCD_CLK_PIN;
	}

	// Disable display controller (LOW active)
	LCD_PORT |= LCD_SCE_PIN;
     934:	a5 e3       	ldi	r26, 0x35	; 53
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e5 e3       	ldi	r30, 0x35	; 53
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	82 60       	ori	r24, 0x02	; 2
     940:	8c 93       	st	X, r24
}
     942:	26 96       	adiw	r28, 0x06	; 6
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	cf 91       	pop	r28
     950:	df 91       	pop	r29
     952:	08 95       	ret

00000954 <LCD_Test>:

void LCD_Test()
{
     954:	df 93       	push	r29
     956:	cf 93       	push	r28
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
	sendData(0xA5, CMD);
     95c:	85 ea       	ldi	r24, 0xA5	; 165
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>
}
     964:	cf 91       	pop	r28
     966:	df 91       	pop	r29
     968:	08 95       	ret

0000096a <LCD_Invert>:

void LCD_Invert()
{
     96a:	df 93       	push	r29
     96c:	cf 93       	push	r28
     96e:	0f 92       	push	r0
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
	if(FLAGS & FLAG_INVERTED) FLAGS &= ~(1 << FLAG_INVERTED);
     974:	80 91 66 02 	lds	r24, 0x0266
     978:	88 2f       	mov	r24, r24
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	82 70       	andi	r24, 0x02	; 2
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	31 f0       	breq	.+12     	; 0x990 <LCD_Invert+0x26>
     984:	80 91 66 02 	lds	r24, 0x0266
     988:	8b 7f       	andi	r24, 0xFB	; 251
     98a:	80 93 66 02 	sts	0x0266, r24
     98e:	05 c0       	rjmp	.+10     	; 0x99a <LCD_Invert+0x30>
	else FLAGS |= FLAG_INVERTED;
     990:	80 91 66 02 	lds	r24, 0x0266
     994:	82 60       	ori	r24, 0x02	; 2
     996:	80 93 66 02 	sts	0x0266, r24
	sendData(0xA6 + ((FLAGS & FLAG_INVERTED) > 0 ? 1 : 0), CMD);
     99a:	80 91 66 02 	lds	r24, 0x0266
     99e:	88 2f       	mov	r24, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	82 70       	andi	r24, 0x02	; 2
     9a4:	90 70       	andi	r25, 0x00	; 0
     9a6:	18 16       	cp	r1, r24
     9a8:	19 06       	cpc	r1, r25
     9aa:	1c f4       	brge	.+6      	; 0x9b2 <LCD_Invert+0x48>
     9ac:	87 ea       	ldi	r24, 0xA7	; 167
     9ae:	89 83       	std	Y+1, r24	; 0x01
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <LCD_Invert+0x4c>
     9b2:	86 ea       	ldi	r24, 0xA6	; 166
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>
}
     9be:	0f 90       	pop	r0
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	08 95       	ret

000009c6 <LCD_DrawPixel>:

void LCD_DrawPixel(unsigned char x, unsigned char y)
{
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <LCD_DrawPixel+0x6>
     9cc:	00 d0       	rcall	.+0      	; 0x9ce <LCD_DrawPixel+0x8>
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	6c 83       	std	Y+4, r22	; 0x04
	if((FLAGS & FLAG_LANDSCAPE) == 0)
     9d6:	80 91 66 02 	lds	r24, 0x0266
     9da:	88 2f       	mov	r24, r24
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	81 70       	andi	r24, 0x01	; 1
     9e0:	90 70       	andi	r25, 0x00	; 0
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <LCD_DrawPixel+0x22>
     9e6:	43 c0       	rjmp	.+134    	; 0xa6e <LCD_DrawPixel+0xa8>
	{
		if(x >= WIDTH || y >= HEIGHT) return;
     9e8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ea:	80 34       	cpi	r24, 0x40	; 64
     9ec:	08 f0       	brcs	.+2      	; 0x9f0 <LCD_DrawPixel+0x2a>
     9ee:	85 c0       	rjmp	.+266    	; 0xafa <LCD_DrawPixel+0x134>
     9f0:	8c 81       	ldd	r24, Y+4	; 0x04
     9f2:	88 23       	and	r24, r24
     9f4:	0c f4       	brge	.+2      	; 0x9f8 <LCD_DrawPixel+0x32>
     9f6:	81 c0       	rjmp	.+258    	; 0xafa <LCD_DrawPixel+0x134>
		buffer[(x / 8) * 128 + y] |= (1 << (7 - x % 8));
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	48 2f       	mov	r20, r24
     9fc:	46 95       	lsr	r20
     9fe:	46 95       	lsr	r20
     a00:	46 95       	lsr	r20
     a02:	84 2f       	mov	r24, r20
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	9c 01       	movw	r18, r24
     a08:	36 95       	lsr	r19
     a0a:	32 2f       	mov	r19, r18
     a0c:	22 27       	eor	r18, r18
     a0e:	37 95       	ror	r19
     a10:	27 95       	ror	r18
     a12:	8c 81       	ldd	r24, Y+4	; 0x04
     a14:	88 2f       	mov	r24, r24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	b9 01       	movw	r22, r18
     a1a:	68 0f       	add	r22, r24
     a1c:	79 1f       	adc	r23, r25
     a1e:	84 2f       	mov	r24, r20
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	9c 01       	movw	r18, r24
     a24:	36 95       	lsr	r19
     a26:	32 2f       	mov	r19, r18
     a28:	22 27       	eor	r18, r18
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8c 81       	ldd	r24, Y+4	; 0x04
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	82 0f       	add	r24, r18
     a36:	93 1f       	adc	r25, r19
     a38:	fc 01       	movw	r30, r24
     a3a:	e4 59       	subi	r30, 0x94	; 148
     a3c:	f9 4f       	sbci	r31, 0xF9	; 249
     a3e:	80 81       	ld	r24, Z
     a40:	48 2f       	mov	r20, r24
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	88 2f       	mov	r24, r24
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	80 95       	com	r24
     a4a:	90 95       	com	r25
     a4c:	9c 01       	movw	r18, r24
     a4e:	27 70       	andi	r18, 0x07	; 7
     a50:	30 70       	andi	r19, 0x00	; 0
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	02 2e       	mov	r0, r18
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <LCD_DrawPixel+0x98>
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	0a 94       	dec	r0
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <LCD_DrawPixel+0x94>
     a62:	84 2b       	or	r24, r20
     a64:	fb 01       	movw	r30, r22
     a66:	e4 59       	subi	r30, 0x94	; 148
     a68:	f9 4f       	sbci	r31, 0xF9	; 249
     a6a:	80 83       	st	Z, r24
     a6c:	46 c0       	rjmp	.+140    	; 0xafa <LCD_DrawPixel+0x134>
	}
	else
	{
		unsigned char tempX = x;
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char tempY = y;
     a72:	8c 81       	ldd	r24, Y+4	; 0x04
     a74:	89 83       	std	Y+1, r24	; 0x01
		x = 63 - tempY;
     a76:	9f e3       	ldi	r25, 0x3F	; 63
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	29 2f       	mov	r18, r25
     a7c:	28 1b       	sub	r18, r24
     a7e:	82 2f       	mov	r24, r18
     a80:	8b 83       	std	Y+3, r24	; 0x03
		y = tempX;
     a82:	8a 81       	ldd	r24, Y+2	; 0x02
     a84:	8c 83       	std	Y+4, r24	; 0x04
		buffer[(x / 8) * 128 + y] |= (1 << (7 - x % 8));
     a86:	8b 81       	ldd	r24, Y+3	; 0x03
     a88:	48 2f       	mov	r20, r24
     a8a:	46 95       	lsr	r20
     a8c:	46 95       	lsr	r20
     a8e:	46 95       	lsr	r20
     a90:	84 2f       	mov	r24, r20
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	9c 01       	movw	r18, r24
     a96:	36 95       	lsr	r19
     a98:	32 2f       	mov	r19, r18
     a9a:	22 27       	eor	r18, r18
     a9c:	37 95       	ror	r19
     a9e:	27 95       	ror	r18
     aa0:	8c 81       	ldd	r24, Y+4	; 0x04
     aa2:	88 2f       	mov	r24, r24
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	b9 01       	movw	r22, r18
     aa8:	68 0f       	add	r22, r24
     aaa:	79 1f       	adc	r23, r25
     aac:	84 2f       	mov	r24, r20
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	9c 01       	movw	r18, r24
     ab2:	36 95       	lsr	r19
     ab4:	32 2f       	mov	r19, r18
     ab6:	22 27       	eor	r18, r18
     ab8:	37 95       	ror	r19
     aba:	27 95       	ror	r18
     abc:	8c 81       	ldd	r24, Y+4	; 0x04
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	82 0f       	add	r24, r18
     ac4:	93 1f       	adc	r25, r19
     ac6:	fc 01       	movw	r30, r24
     ac8:	e4 59       	subi	r30, 0x94	; 148
     aca:	f9 4f       	sbci	r31, 0xF9	; 249
     acc:	80 81       	ld	r24, Z
     ace:	48 2f       	mov	r20, r24
     ad0:	8b 81       	ldd	r24, Y+3	; 0x03
     ad2:	88 2f       	mov	r24, r24
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	80 95       	com	r24
     ad8:	90 95       	com	r25
     ada:	9c 01       	movw	r18, r24
     adc:	27 70       	andi	r18, 0x07	; 7
     ade:	30 70       	andi	r19, 0x00	; 0
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	02 2e       	mov	r0, r18
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <LCD_DrawPixel+0x126>
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	0a 94       	dec	r0
     aee:	e2 f7       	brpl	.-8      	; 0xae8 <LCD_DrawPixel+0x122>
     af0:	84 2b       	or	r24, r20
     af2:	fb 01       	movw	r30, r22
     af4:	e4 59       	subi	r30, 0x94	; 148
     af6:	f9 4f       	sbci	r31, 0xF9	; 249
     af8:	80 83       	st	Z, r24
	}
}
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	cf 91       	pop	r28
     b04:	df 91       	pop	r29
     b06:	08 95       	ret

00000b08 <LCD_ClearPixel>:

void LCD_ClearPixel(unsigned char x, unsigned char y)
{
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <LCD_ClearPixel+0x6>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <LCD_ClearPixel+0x8>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	8b 83       	std	Y+3, r24	; 0x03
     b16:	6c 83       	std	Y+4, r22	; 0x04
	if((FLAGS & FLAG_LANDSCAPE) == 0)
     b18:	80 91 66 02 	lds	r24, 0x0266
     b1c:	88 2f       	mov	r24, r24
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	81 70       	andi	r24, 0x01	; 1
     b22:	90 70       	andi	r25, 0x00	; 0
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	09 f0       	breq	.+2      	; 0xb2a <LCD_ClearPixel+0x22>
     b28:	44 c0       	rjmp	.+136    	; 0xbb2 <LCD_ClearPixel+0xaa>
	{
		if(x >= WIDTH || y >= HEIGHT) return;
     b2a:	8b 81       	ldd	r24, Y+3	; 0x03
     b2c:	80 34       	cpi	r24, 0x40	; 64
     b2e:	08 f0       	brcs	.+2      	; 0xb32 <LCD_ClearPixel+0x2a>
     b30:	87 c0       	rjmp	.+270    	; 0xc40 <LCD_ClearPixel+0x138>
     b32:	8c 81       	ldd	r24, Y+4	; 0x04
     b34:	88 23       	and	r24, r24
     b36:	0c f4       	brge	.+2      	; 0xb3a <LCD_ClearPixel+0x32>
     b38:	83 c0       	rjmp	.+262    	; 0xc40 <LCD_ClearPixel+0x138>
		buffer[(x / 8) * 128 + y] &= ~(1 << (7 - x % 8));
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	48 2f       	mov	r20, r24
     b3e:	46 95       	lsr	r20
     b40:	46 95       	lsr	r20
     b42:	46 95       	lsr	r20
     b44:	84 2f       	mov	r24, r20
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	9c 01       	movw	r18, r24
     b4a:	36 95       	lsr	r19
     b4c:	32 2f       	mov	r19, r18
     b4e:	22 27       	eor	r18, r18
     b50:	37 95       	ror	r19
     b52:	27 95       	ror	r18
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	88 2f       	mov	r24, r24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	b9 01       	movw	r22, r18
     b5c:	68 0f       	add	r22, r24
     b5e:	79 1f       	adc	r23, r25
     b60:	84 2f       	mov	r24, r20
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9c 01       	movw	r18, r24
     b66:	36 95       	lsr	r19
     b68:	32 2f       	mov	r19, r18
     b6a:	22 27       	eor	r18, r18
     b6c:	37 95       	ror	r19
     b6e:	27 95       	ror	r18
     b70:	8c 81       	ldd	r24, Y+4	; 0x04
     b72:	88 2f       	mov	r24, r24
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	82 0f       	add	r24, r18
     b78:	93 1f       	adc	r25, r19
     b7a:	fc 01       	movw	r30, r24
     b7c:	e4 59       	subi	r30, 0x94	; 148
     b7e:	f9 4f       	sbci	r31, 0xF9	; 249
     b80:	80 81       	ld	r24, Z
     b82:	48 2f       	mov	r20, r24
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	80 95       	com	r24
     b8c:	90 95       	com	r25
     b8e:	9c 01       	movw	r18, r24
     b90:	27 70       	andi	r18, 0x07	; 7
     b92:	30 70       	andi	r19, 0x00	; 0
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	02 2e       	mov	r0, r18
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <LCD_ClearPixel+0x98>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	0a 94       	dec	r0
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <LCD_ClearPixel+0x94>
     ba4:	80 95       	com	r24
     ba6:	84 23       	and	r24, r20
     ba8:	fb 01       	movw	r30, r22
     baa:	e4 59       	subi	r30, 0x94	; 148
     bac:	f9 4f       	sbci	r31, 0xF9	; 249
     bae:	80 83       	st	Z, r24
     bb0:	47 c0       	rjmp	.+142    	; 0xc40 <LCD_ClearPixel+0x138>
	}
	else
	{
		unsigned char tempX = x;
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char tempY = y;
     bb6:	8c 81       	ldd	r24, Y+4	; 0x04
     bb8:	89 83       	std	Y+1, r24	; 0x01
		x = 63 - tempY;
     bba:	9f e3       	ldi	r25, 0x3F	; 63
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	29 2f       	mov	r18, r25
     bc0:	28 1b       	sub	r18, r24
     bc2:	82 2f       	mov	r24, r18
     bc4:	8b 83       	std	Y+3, r24	; 0x03
		y = tempX;
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	8c 83       	std	Y+4, r24	; 0x04
		buffer[(x / 8) * 128 + y] &= ~(1 << (7 - x % 8));
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	48 2f       	mov	r20, r24
     bce:	46 95       	lsr	r20
     bd0:	46 95       	lsr	r20
     bd2:	46 95       	lsr	r20
     bd4:	84 2f       	mov	r24, r20
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	9c 01       	movw	r18, r24
     bda:	36 95       	lsr	r19
     bdc:	32 2f       	mov	r19, r18
     bde:	22 27       	eor	r18, r18
     be0:	37 95       	ror	r19
     be2:	27 95       	ror	r18
     be4:	8c 81       	ldd	r24, Y+4	; 0x04
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	b9 01       	movw	r22, r18
     bec:	68 0f       	add	r22, r24
     bee:	79 1f       	adc	r23, r25
     bf0:	84 2f       	mov	r24, r20
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	9c 01       	movw	r18, r24
     bf6:	36 95       	lsr	r19
     bf8:	32 2f       	mov	r19, r18
     bfa:	22 27       	eor	r18, r18
     bfc:	37 95       	ror	r19
     bfe:	27 95       	ror	r18
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	82 0f       	add	r24, r18
     c08:	93 1f       	adc	r25, r19
     c0a:	fc 01       	movw	r30, r24
     c0c:	e4 59       	subi	r30, 0x94	; 148
     c0e:	f9 4f       	sbci	r31, 0xF9	; 249
     c10:	80 81       	ld	r24, Z
     c12:	48 2f       	mov	r20, r24
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	80 95       	com	r24
     c1c:	90 95       	com	r25
     c1e:	9c 01       	movw	r18, r24
     c20:	27 70       	andi	r18, 0x07	; 7
     c22:	30 70       	andi	r19, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 2e       	mov	r0, r18
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <LCD_ClearPixel+0x128>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <LCD_ClearPixel+0x124>
     c34:	80 95       	com	r24
     c36:	84 23       	and	r24, r20
     c38:	fb 01       	movw	r30, r22
     c3a:	e4 59       	subi	r30, 0x94	; 148
     c3c:	f9 4f       	sbci	r31, 0xF9	; 249
     c3e:	80 83       	st	Z, r24
	}
}
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <LCD_Clear>:

void LCD_Clear()
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
	memset(buffer, 0, sizeof(buffer));
     c56:	8c e6       	ldi	r24, 0x6C	; 108
     c58:	96 e0       	ldi	r25, 0x06	; 6
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	54 e0       	ldi	r21, 0x04	; 4
     c62:	0e 94 cb 12 	call	0x2596	; 0x2596 <memset>
}
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <LCD_ClearArea>:

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	00 d0       	rcall	.+0      	; 0xc72 <LCD_ClearArea+0x6>
     c72:	00 d0       	rcall	.+0      	; 0xc74 <LCD_ClearArea+0x8>
     c74:	00 d0       	rcall	.+0      	; 0xc76 <LCD_ClearArea+0xa>
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	8b 83       	std	Y+3, r24	; 0x03
     c7c:	6c 83       	std	Y+4, r22	; 0x04
     c7e:	4d 83       	std	Y+5, r20	; 0x05
     c80:	2e 83       	std	Y+6, r18	; 0x06
	for(char y = y0;y < y1;y++)
     c82:	8c 81       	ldd	r24, Y+4	; 0x04
     c84:	8a 83       	std	Y+2, r24	; 0x02
     c86:	11 c0       	rjmp	.+34     	; 0xcaa <LCD_ClearArea+0x3e>
	{
		for(char x = x0;x < x1;x++)
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	89 83       	std	Y+1, r24	; 0x01
     c8c:	07 c0       	rjmp	.+14     	; 0xc9c <LCD_ClearArea+0x30>
		{
			LCD_ClearPixel(x, y);
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	6a 81       	ldd	r22, Y+2	; 0x02
     c92:	0e 94 84 05 	call	0xb08	; 0xb08 <LCD_ClearPixel>

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(char y = y0;y < y1;y++)
	{
		for(char x = x0;x < x1;x++)
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	8f 5f       	subi	r24, 0xFF	; 255
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	99 81       	ldd	r25, Y+1	; 0x01
     c9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ca0:	98 17       	cp	r25, r24
     ca2:	a8 f3       	brcs	.-22     	; 0xc8e <LCD_ClearArea+0x22>
	memset(buffer, 0, sizeof(buffer));
}

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(char y = y0;y < y1;y++)
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	8f 5f       	subi	r24, 0xFF	; 255
     ca8:	8a 83       	std	Y+2, r24	; 0x02
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	8e 81       	ldd	r24, Y+6	; 0x06
     cae:	98 17       	cp	r25, r24
     cb0:	58 f3       	brcs	.-42     	; 0xc88 <LCD_ClearArea+0x1c>
		for(char x = x0;x < x1;x++)
		{
			LCD_ClearPixel(x, y);
		}
	}
}
     cb2:	26 96       	adiw	r28, 0x06	; 6
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <LCD_DrawRect>:

void LCD_DrawRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	00 d0       	rcall	.+0      	; 0xcca <LCD_DrawRect+0x6>
     cca:	00 d0       	rcall	.+0      	; 0xccc <LCD_DrawRect+0x8>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <LCD_DrawRect+0xa>
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	8b 83       	std	Y+3, r24	; 0x03
     cd4:	6c 83       	std	Y+4, r22	; 0x04
     cd6:	4d 83       	std	Y+5, r20	; 0x05
     cd8:	2e 83       	std	Y+6, r18	; 0x06
	for(unsigned char x = x0;x <= x1;x++)
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	8a 83       	std	Y+2, r24	; 0x02
     cde:	0b c0       	rjmp	.+22     	; 0xcf6 <LCD_DrawRect+0x32>
	{
		LCD_DrawPixel(x, y0);
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	6c 81       	ldd	r22, Y+4	; 0x04
     ce4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_DrawPixel>
		LCD_DrawPixel(x, y1);
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	6e 81       	ldd	r22, Y+6	; 0x06
     cec:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_DrawPixel>
	}
}

void LCD_DrawRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(unsigned char x = x0;x <= x1;x++)
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	8a 83       	std	Y+2, r24	; 0x02
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	89 17       	cp	r24, r25
     cfc:	88 f7       	brcc	.-30     	; 0xce0 <LCD_DrawRect+0x1c>
	{
		LCD_DrawPixel(x, y0);
		LCD_DrawPixel(x, y1);
	}
	for(unsigned char y = y0;y <= y1;y++)
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	0b c0       	rjmp	.+22     	; 0xd1a <LCD_DrawRect+0x56>
	{
		LCD_DrawPixel(x0, y);
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	69 81       	ldd	r22, Y+1	; 0x01
     d08:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_DrawPixel>
		LCD_DrawPixel(x1, y);
     d0c:	8d 81       	ldd	r24, Y+5	; 0x05
     d0e:	69 81       	ldd	r22, Y+1	; 0x01
     d10:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_DrawPixel>
	for(unsigned char x = x0;x <= x1;x++)
	{
		LCD_DrawPixel(x, y0);
		LCD_DrawPixel(x, y1);
	}
	for(unsigned char y = y0;y <= y1;y++)
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	99 81       	ldd	r25, Y+1	; 0x01
     d1c:	8e 81       	ldd	r24, Y+6	; 0x06
     d1e:	89 17       	cp	r24, r25
     d20:	88 f7       	brcc	.-30     	; 0xd04 <LCD_DrawRect+0x40>
	{
		LCD_DrawPixel(x0, y);
		LCD_DrawPixel(x1, y);
	}
}
     d22:	26 96       	adiw	r28, 0x06	; 6
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <LCD_FillRect>:

void LCD_FillRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	00 d0       	rcall	.+0      	; 0xd3a <LCD_FillRect+0x6>
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <LCD_FillRect+0x8>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <LCD_FillRect+0xa>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	8b 83       	std	Y+3, r24	; 0x03
     d44:	6c 83       	std	Y+4, r22	; 0x04
     d46:	4d 83       	std	Y+5, r20	; 0x05
     d48:	2e 83       	std	Y+6, r18	; 0x06
	if(x0 > x1)flip(&x0, &x1);
     d4a:	9b 81       	ldd	r25, Y+3	; 0x03
     d4c:	8d 81       	ldd	r24, Y+5	; 0x05
     d4e:	89 17       	cp	r24, r25
     d50:	40 f4       	brcc	.+16     	; 0xd62 <LCD_FillRect+0x2e>
     d52:	ce 01       	movw	r24, r28
     d54:	03 96       	adiw	r24, 0x03	; 3
     d56:	9e 01       	movw	r18, r28
     d58:	2b 5f       	subi	r18, 0xFB	; 251
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
     d5c:	b9 01       	movw	r22, r18
     d5e:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <flip>
	if(y0 > y1)flip(&y0, &y1);
     d62:	9c 81       	ldd	r25, Y+4	; 0x04
     d64:	8e 81       	ldd	r24, Y+6	; 0x06
     d66:	89 17       	cp	r24, r25
     d68:	40 f4       	brcc	.+16     	; 0xd7a <LCD_FillRect+0x46>
     d6a:	ce 01       	movw	r24, r28
     d6c:	04 96       	adiw	r24, 0x04	; 4
     d6e:	9e 01       	movw	r18, r28
     d70:	2a 5f       	subi	r18, 0xFA	; 250
     d72:	3f 4f       	sbci	r19, 0xFF	; 255
     d74:	b9 01       	movw	r22, r18
     d76:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <flip>
	for(unsigned char x = x0;x <= x1;x++)
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	8a 83       	std	Y+2, r24	; 0x02
     d7e:	11 c0       	rjmp	.+34     	; 0xda2 <LCD_FillRect+0x6e>
	{
		for(unsigned char y = y0;y <= y1;y++)
     d80:	8c 81       	ldd	r24, Y+4	; 0x04
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	07 c0       	rjmp	.+14     	; 0xd94 <LCD_FillRect+0x60>
		{
			LCD_DrawPixel(x, y);
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	69 81       	ldd	r22, Y+1	; 0x01
     d8a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_DrawPixel>
{
	if(x0 > x1)flip(&x0, &x1);
	if(y0 > y1)flip(&y0, &y1);
	for(unsigned char x = x0;x <= x1;x++)
	{
		for(unsigned char y = y0;y <= y1;y++)
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	98 17       	cp	r25, r24
     d9a:	a8 f7       	brcc	.-22     	; 0xd86 <LCD_FillRect+0x52>

void LCD_FillRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	if(x0 > x1)flip(&x0, &x1);
	if(y0 > y1)flip(&y0, &y1);
	for(unsigned char x = x0;x <= x1;x++)
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	8a 83       	std	Y+2, r24	; 0x02
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	98 17       	cp	r25, r24
     da8:	58 f7       	brcc	.-42     	; 0xd80 <LCD_FillRect+0x4c>
		for(unsigned char y = y0;y <= y1;y++)
		{
			LCD_DrawPixel(x, y);
		}
	}
}
     daa:	26 96       	adiw	r28, 0x06	; 6
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <LCD_DrawLine>:

void LCD_DrawLine(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	6a 97       	sbiw	r28, 0x1a	; 26
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	8d 87       	std	Y+13, r24	; 0x0d
     dd2:	6e 87       	std	Y+14, r22	; 0x0e
     dd4:	4f 87       	std	Y+15, r20	; 0x0f
     dd6:	28 8b       	std	Y+16, r18	; 0x10
	int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
     dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	8d 85       	ldd	r24, Y+13	; 0x0d
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	a9 01       	movw	r20, r18
     de6:	48 1b       	sub	r20, r24
     de8:	59 0b       	sbc	r21, r25
     dea:	ca 01       	movw	r24, r20
     dec:	9c 87       	std	Y+12, r25	; 0x0c
     dee:	8b 87       	std	Y+11, r24	; 0x0b
     df0:	8b 85       	ldd	r24, Y+11	; 0x0b
     df2:	9c 85       	ldd	r25, Y+12	; 0x0c
     df4:	99 23       	and	r25, r25
     df6:	3c f4       	brge	.+14     	; 0xe06 <LCD_DrawLine+0x4a>
     df8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dfa:	9c 85       	ldd	r25, Y+12	; 0x0c
     dfc:	90 95       	com	r25
     dfe:	81 95       	neg	r24
     e00:	9f 4f       	sbci	r25, 0xFF	; 255
     e02:	9c 87       	std	Y+12, r25	; 0x0c
     e04:	8b 87       	std	Y+11, r24	; 0x0b
     e06:	9d 85       	ldd	r25, Y+13	; 0x0d
     e08:	8f 85       	ldd	r24, Y+15	; 0x0f
     e0a:	98 17       	cp	r25, r24
     e0c:	28 f4       	brcc	.+10     	; 0xe18 <LCD_DrawLine+0x5c>
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9e 8b       	std	Y+22, r25	; 0x16
     e14:	8d 8b       	std	Y+21, r24	; 0x15
     e16:	04 c0       	rjmp	.+8      	; 0xe20 <LCD_DrawLine+0x64>
     e18:	4f ef       	ldi	r20, 0xFF	; 255
     e1a:	5f ef       	ldi	r21, 0xFF	; 255
     e1c:	5e 8b       	std	Y+22, r21	; 0x16
     e1e:	4d 8b       	std	Y+21, r20	; 0x15
     e20:	8d 89       	ldd	r24, Y+21	; 0x15
     e22:	9e 89       	ldd	r25, Y+22	; 0x16
     e24:	9a 87       	std	Y+10, r25	; 0x0a
     e26:	89 87       	std	Y+9, r24	; 0x09
	int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1; 
     e28:	88 89       	ldd	r24, Y+16	; 0x10
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	8e 85       	ldd	r24, Y+14	; 0x0e
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	a9 01       	movw	r20, r18
     e36:	48 1b       	sub	r20, r24
     e38:	59 0b       	sbc	r21, r25
     e3a:	ca 01       	movw	r24, r20
     e3c:	98 87       	std	Y+8, r25	; 0x08
     e3e:	8f 83       	std	Y+7, r24	; 0x07
     e40:	8f 81       	ldd	r24, Y+7	; 0x07
     e42:	98 85       	ldd	r25, Y+8	; 0x08
     e44:	99 23       	and	r25, r25
     e46:	3c f4       	brge	.+14     	; 0xe56 <LCD_DrawLine+0x9a>
     e48:	8f 81       	ldd	r24, Y+7	; 0x07
     e4a:	98 85       	ldd	r25, Y+8	; 0x08
     e4c:	90 95       	com	r25
     e4e:	81 95       	neg	r24
     e50:	9f 4f       	sbci	r25, 0xFF	; 255
     e52:	98 87       	std	Y+8, r25	; 0x08
     e54:	8f 83       	std	Y+7, r24	; 0x07
     e56:	9e 85       	ldd	r25, Y+14	; 0x0e
     e58:	88 89       	ldd	r24, Y+16	; 0x10
     e5a:	98 17       	cp	r25, r24
     e5c:	28 f4       	brcc	.+10     	; 0xe68 <LCD_DrawLine+0xac>
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9c 8b       	std	Y+20, r25	; 0x14
     e64:	8b 8b       	std	Y+19, r24	; 0x13
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <LCD_DrawLine+0xb4>
     e68:	4f ef       	ldi	r20, 0xFF	; 255
     e6a:	5f ef       	ldi	r21, 0xFF	; 255
     e6c:	5c 8b       	std	Y+20, r21	; 0x14
     e6e:	4b 8b       	std	Y+19, r20	; 0x13
     e70:	8b 89       	ldd	r24, Y+19	; 0x13
     e72:	9c 89       	ldd	r25, Y+20	; 0x14
     e74:	9e 83       	std	Y+6, r25	; 0x06
     e76:	8d 83       	std	Y+5, r24	; 0x05
	int err = (dx>dy ? dx : -dy)/2, e2;
     e78:	2b 85       	ldd	r18, Y+11	; 0x0b
     e7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     e7c:	8f 81       	ldd	r24, Y+7	; 0x07
     e7e:	98 85       	ldd	r25, Y+8	; 0x08
     e80:	82 17       	cp	r24, r18
     e82:	93 07       	cpc	r25, r19
     e84:	bc f0       	brlt	.+46     	; 0xeb4 <LCD_DrawLine+0xf8>
     e86:	8f 81       	ldd	r24, Y+7	; 0x07
     e88:	98 85       	ldd	r25, Y+8	; 0x08
     e8a:	90 95       	com	r25
     e8c:	81 95       	neg	r24
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	98 8f       	std	Y+24, r25	; 0x18
     e92:	8f 8b       	std	Y+23, r24	; 0x17
     e94:	4f 89       	ldd	r20, Y+23	; 0x17
     e96:	58 8d       	ldd	r21, Y+24	; 0x18
     e98:	55 23       	and	r21, r21
     e9a:	2c f4       	brge	.+10     	; 0xea6 <LCD_DrawLine+0xea>
     e9c:	8f 89       	ldd	r24, Y+23	; 0x17
     e9e:	98 8d       	ldd	r25, Y+24	; 0x18
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	98 8f       	std	Y+24, r25	; 0x18
     ea4:	8f 8b       	std	Y+23, r24	; 0x17
     ea6:	8f 89       	ldd	r24, Y+23	; 0x17
     ea8:	98 8d       	ldd	r25, Y+24	; 0x18
     eaa:	95 95       	asr	r25
     eac:	87 95       	ror	r24
     eae:	9a 8b       	std	Y+18, r25	; 0x12
     eb0:	89 8b       	std	Y+17, r24	; 0x11
     eb2:	13 c0       	rjmp	.+38     	; 0xeda <LCD_DrawLine+0x11e>
     eb4:	8b 85       	ldd	r24, Y+11	; 0x0b
     eb6:	9c 85       	ldd	r25, Y+12	; 0x0c
     eb8:	9a 8f       	std	Y+26, r25	; 0x1a
     eba:	89 8f       	std	Y+25, r24	; 0x19
     ebc:	49 8d       	ldd	r20, Y+25	; 0x19
     ebe:	5a 8d       	ldd	r21, Y+26	; 0x1a
     ec0:	55 23       	and	r21, r21
     ec2:	2c f4       	brge	.+10     	; 0xece <LCD_DrawLine+0x112>
     ec4:	89 8d       	ldd	r24, Y+25	; 0x19
     ec6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	9a 8f       	std	Y+26, r25	; 0x1a
     ecc:	89 8f       	std	Y+25, r24	; 0x19
     ece:	89 8d       	ldd	r24, Y+25	; 0x19
     ed0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ed2:	95 95       	asr	r25
     ed4:	87 95       	ror	r24
     ed6:	9a 8b       	std	Y+18, r25	; 0x12
     ed8:	89 8b       	std	Y+17, r24	; 0x11
     eda:	49 89       	ldd	r20, Y+17	; 0x11
     edc:	5a 89       	ldd	r21, Y+18	; 0x12
     ede:	5c 83       	std	Y+4, r21	; 0x04
     ee0:	4b 83       	std	Y+3, r20	; 0x03

  	for(;;)
	{
   		LCD_DrawPixel(x0,y0);
     ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee4:	6e 85       	ldd	r22, Y+14	; 0x0e
     ee6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_DrawPixel>
   		if (x0==x1 && y0==y1) break;
     eea:	9d 85       	ldd	r25, Y+13	; 0x0d
     eec:	8f 85       	ldd	r24, Y+15	; 0x0f
     eee:	98 17       	cp	r25, r24
     ef0:	21 f4       	brne	.+8      	; 0xefa <LCD_DrawLine+0x13e>
     ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef4:	88 89       	ldd	r24, Y+16	; 0x10
     ef6:	98 17       	cp	r25, r24
     ef8:	89 f1       	breq	.+98     	; 0xf5c <LCD_DrawLine+0x1a0>
   		e2 = err;
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	9c 81       	ldd	r25, Y+4	; 0x04
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
   		if (e2 >-dx) { err -= dy; x0 += sx; }
     f02:	8b 85       	ldd	r24, Y+11	; 0x0b
     f04:	9c 85       	ldd	r25, Y+12	; 0x0c
     f06:	22 27       	eor	r18, r18
     f08:	33 27       	eor	r19, r19
     f0a:	28 1b       	sub	r18, r24
     f0c:	39 0b       	sbc	r19, r25
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	28 17       	cp	r18, r24
     f14:	39 07       	cpc	r19, r25
     f16:	74 f4       	brge	.+28     	; 0xf34 <LCD_DrawLine+0x178>
     f18:	2b 81       	ldd	r18, Y+3	; 0x03
     f1a:	3c 81       	ldd	r19, Y+4	; 0x04
     f1c:	8f 81       	ldd	r24, Y+7	; 0x07
     f1e:	98 85       	ldd	r25, Y+8	; 0x08
     f20:	a9 01       	movw	r20, r18
     f22:	48 1b       	sub	r20, r24
     f24:	59 0b       	sbc	r21, r25
     f26:	ca 01       	movw	r24, r20
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	8b 83       	std	Y+3, r24	; 0x03
     f2c:	99 85       	ldd	r25, Y+9	; 0x09
     f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f30:	89 0f       	add	r24, r25
     f32:	8d 87       	std	Y+13, r24	; 0x0d
   		if (e2 < dy) { err += dx; y0 += sy; }
     f34:	29 81       	ldd	r18, Y+1	; 0x01
     f36:	3a 81       	ldd	r19, Y+2	; 0x02
     f38:	8f 81       	ldd	r24, Y+7	; 0x07
     f3a:	98 85       	ldd	r25, Y+8	; 0x08
     f3c:	28 17       	cp	r18, r24
     f3e:	39 07       	cpc	r19, r25
     f40:	84 f6       	brge	.-96     	; 0xee2 <LCD_DrawLine+0x126>
     f42:	2b 81       	ldd	r18, Y+3	; 0x03
     f44:	3c 81       	ldd	r19, Y+4	; 0x04
     f46:	8b 85       	ldd	r24, Y+11	; 0x0b
     f48:	9c 85       	ldd	r25, Y+12	; 0x0c
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	8b 83       	std	Y+3, r24	; 0x03
     f52:	9d 81       	ldd	r25, Y+5	; 0x05
     f54:	8e 85       	ldd	r24, Y+14	; 0x0e
     f56:	89 0f       	add	r24, r25
     f58:	8e 87       	std	Y+14, r24	; 0x0e
     f5a:	c3 cf       	rjmp	.-122    	; 0xee2 <LCD_DrawLine+0x126>
  	}
}
     f5c:	6a 96       	adiw	r28, 0x1a	; 26
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <LCD_PrintChar>:

int LCD_PrintChar(const char c, unsigned char x0, unsigned char y0)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	28 97       	sbiw	r28, 0x08	; 8
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	8e 83       	std	Y+6, r24	; 0x06
     f84:	6f 83       	std	Y+7, r22	; 0x07
     f86:	48 87       	std	Y+8, r20	; 0x08
	char whitespace = 0;
     f88:	1d 82       	std	Y+5, r1	; 0x05
	char * CHAR = getChar(c);
     f8a:	8e 81       	ldd	r24, Y+6	; 0x06
     f8c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <getChar>
     f90:	9c 83       	std	Y+4, r25	; 0x04
     f92:	8b 83       	std	Y+3, r24	; 0x03
	for(unsigned char x = 0;x < 5;x++)
     f94:	1a 82       	std	Y+2, r1	; 0x02
     f96:	50 c0       	rjmp	.+160    	; 0x1038 <LCD_PrintChar+0xca>
	{
		if(FLAGS & FLAG_IGNORE_WHITESPACE && CHAR[x] == 0) whitespace++;
     f98:	80 91 66 02 	lds	r24, 0x0266
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	84 70       	andi	r24, 0x04	; 4
     fa2:	90 70       	andi	r25, 0x00	; 0
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	71 f0       	breq	.+28     	; 0xfc4 <LCD_PrintChar+0x56>
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	80 81       	ld	r24, Z
     fba:	88 23       	and	r24, r24
     fbc:	19 f4       	brne	.+6      	; 0xfc4 <LCD_PrintChar+0x56>
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	8d 83       	std	Y+5, r24	; 0x05
		if(CHAR[x] == 0x00)continue;
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	fc 01       	movw	r30, r24
     fd0:	e2 0f       	add	r30, r18
     fd2:	f3 1f       	adc	r31, r19
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	61 f1       	breq	.+88     	; 0x1032 <LCD_PrintChar+0xc4>
		for(unsigned char y = 0;y < 8;y++)
     fda:	19 82       	std	Y+1, r1	; 0x01
     fdc:	27 c0       	rjmp	.+78     	; 0x102c <LCD_PrintChar+0xbe>
		{
			if(CHAR[x] & 1 << y)
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	fc 01       	movw	r30, r24
     fea:	e2 0f       	add	r30, r18
     fec:	f3 1f       	adc	r31, r19
     fee:	80 81       	ld	r24, Z
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a9 01       	movw	r20, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <LCD_PrintChar+0x94>
     ffe:	55 95       	asr	r21
    1000:	47 95       	ror	r20
    1002:	8a 95       	dec	r24
    1004:	e2 f7       	brpl	.-8      	; 0xffe <LCD_PrintChar+0x90>
    1006:	ca 01       	movw	r24, r20
    1008:	81 70       	andi	r24, 0x01	; 1
    100a:	90 70       	andi	r25, 0x00	; 0
    100c:	88 23       	and	r24, r24
    100e:	59 f0       	breq	.+22     	; 0x1026 <LCD_PrintChar+0xb8>
				LCD_DrawPixel(x + x0, y + y0);
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	8f 81       	ldd	r24, Y+7	; 0x07
    1014:	29 2f       	mov	r18, r25
    1016:	28 0f       	add	r18, r24
    1018:	99 81       	ldd	r25, Y+1	; 0x01
    101a:	88 85       	ldd	r24, Y+8	; 0x08
    101c:	98 0f       	add	r25, r24
    101e:	82 2f       	mov	r24, r18
    1020:	69 2f       	mov	r22, r25
    1022:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_DrawPixel>
	char * CHAR = getChar(c);
	for(unsigned char x = 0;x < 5;x++)
	{
		if(FLAGS & FLAG_IGNORE_WHITESPACE && CHAR[x] == 0) whitespace++;
		if(CHAR[x] == 0x00)continue;
		for(unsigned char y = 0;y < 8;y++)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	88 30       	cpi	r24, 0x08	; 8
    1030:	b0 f2       	brcs	.-84     	; 0xfde <LCD_PrintChar+0x70>

int LCD_PrintChar(const char c, unsigned char x0, unsigned char y0)
{
	char whitespace = 0;
	char * CHAR = getChar(c);
	for(unsigned char x = 0;x < 5;x++)
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	8f 5f       	subi	r24, 0xFF	; 255
    1036:	8a 83       	std	Y+2, r24	; 0x02
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	85 30       	cpi	r24, 0x05	; 5
    103c:	08 f4       	brcc	.+2      	; 0x1040 <LCD_PrintChar+0xd2>
    103e:	ac cf       	rjmp	.-168    	; 0xf98 <LCD_PrintChar+0x2a>
		{
			if(CHAR[x] & 1 << y)
				LCD_DrawPixel(x + x0, y + y0);
		}
	}
	return whitespace;
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
}
    1046:	28 96       	adiw	r28, 0x08	; 8
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <LCD_PrintString>:

void LCD_PrintString(const char * str, unsigned char x0, unsigned char y0)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <LCD_PrintString+0x6>
    105e:	00 d0       	rcall	.+0      	; 0x1060 <LCD_PrintString+0x8>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <LCD_PrintString+0xa>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9c 83       	std	Y+4, r25	; 0x04
    1068:	8b 83       	std	Y+3, r24	; 0x03
    106a:	6d 83       	std	Y+5, r22	; 0x05
    106c:	4e 83       	std	Y+6, r20	; 0x06
	unsigned char xOff = 0;
    106e:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char yOff = 0;
    1070:	19 82       	std	Y+1, r1	; 0x01
    1072:	2c c0       	rjmp	.+88     	; 0x10cc <LCD_PrintString+0x74>
	while(*str != '\0')
	{
		if(*str == ' ') xOff += 3;
    1074:	eb 81       	ldd	r30, Y+3	; 0x03
    1076:	fc 81       	ldd	r31, Y+4	; 0x04
    1078:	80 81       	ld	r24, Z
    107a:	80 32       	cpi	r24, 0x20	; 32
    107c:	21 f4       	brne	.+8      	; 0x1086 <LCD_PrintString+0x2e>
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	8d 5f       	subi	r24, 0xFD	; 253
    1082:	8a 83       	std	Y+2, r24	; 0x02
    1084:	1e c0       	rjmp	.+60     	; 0x10c2 <LCD_PrintString+0x6a>
		else if(*str == '\n') 
    1086:	eb 81       	ldd	r30, Y+3	; 0x03
    1088:	fc 81       	ldd	r31, Y+4	; 0x04
    108a:	80 81       	ld	r24, Z
    108c:	8a 30       	cpi	r24, 0x0A	; 10
    108e:	29 f4       	brne	.+10     	; 0x109a <LCD_PrintString+0x42>
		{
			xOff = 0;
    1090:	1a 82       	std	Y+2, r1	; 0x02
			yOff += 9;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	87 5f       	subi	r24, 0xF7	; 247
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	14 c0       	rjmp	.+40     	; 0x10c2 <LCD_PrintString+0x6a>
		}
		else xOff += 6 - LCD_PrintChar(*str, x0 + xOff, y0 + yOff);
    109a:	eb 81       	ldd	r30, Y+3	; 0x03
    109c:	fc 81       	ldd	r31, Y+4	; 0x04
    109e:	30 81       	ld	r19, Z
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	29 2f       	mov	r18, r25
    10a6:	28 0f       	add	r18, r24
    10a8:	9e 81       	ldd	r25, Y+6	; 0x06
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	98 0f       	add	r25, r24
    10ae:	83 2f       	mov	r24, r19
    10b0:	62 2f       	mov	r22, r18
    10b2:	49 2f       	mov	r20, r25
    10b4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_PrintChar>
    10b8:	98 2f       	mov	r25, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	89 1b       	sub	r24, r25
    10be:	8a 5f       	subi	r24, 0xFA	; 250
    10c0:	8a 83       	std	Y+2, r24	; 0x02
		str++;
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	9c 83       	std	Y+4, r25	; 0x04
    10ca:	8b 83       	std	Y+3, r24	; 0x03

void LCD_PrintString(const char * str, unsigned char x0, unsigned char y0)
{
	unsigned char xOff = 0;
	unsigned char yOff = 0;
	while(*str != '\0')
    10cc:	eb 81       	ldd	r30, Y+3	; 0x03
    10ce:	fc 81       	ldd	r31, Y+4	; 0x04
    10d0:	80 81       	ld	r24, Z
    10d2:	88 23       	and	r24, r24
    10d4:	79 f6       	brne	.-98     	; 0x1074 <LCD_PrintString+0x1c>
			yOff += 9;
		}
		else xOff += 6 - LCD_PrintChar(*str, x0 + xOff, y0 + yOff);
		str++;
	}
}
    10d6:	26 96       	adiw	r28, 0x06	; 6
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <LCD_StringWidth>:

int LCD_StringWidth(const char * str)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	2c 97       	sbiw	r28, 0x0c	; 12
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	9a 87       	std	Y+10, r25	; 0x0a
    10fe:	89 87       	std	Y+9, r24	; 0x09
	int length = 0;
    1100:	18 86       	std	Y+8, r1	; 0x08
    1102:	1f 82       	std	Y+7, r1	; 0x07
	const char * original = str;
    1104:	89 85       	ldd	r24, Y+9	; 0x09
    1106:	9a 85       	ldd	r25, Y+10	; 0x0a
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	0a c0       	rjmp	.+20     	; 0x1122 <__stack+0x23>
	while(*str != '\0')
	{
		length++;
    110e:	8f 81       	ldd	r24, Y+7	; 0x07
    1110:	98 85       	ldd	r25, Y+8	; 0x08
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	98 87       	std	Y+8, r25	; 0x08
    1116:	8f 83       	std	Y+7, r24	; 0x07
		str++;
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	9a 87       	std	Y+10, r25	; 0x0a
    1120:	89 87       	std	Y+9, r24	; 0x09

int LCD_StringWidth(const char * str)
{
	int length = 0;
	const char * original = str;
	while(*str != '\0')
    1122:	e9 85       	ldd	r30, Y+9	; 0x09
    1124:	fa 85       	ldd	r31, Y+10	; 0x0a
    1126:	80 81       	ld	r24, Z
    1128:	88 23       	and	r24, r24
    112a:	89 f7       	brne	.-30     	; 0x110e <__stack+0xf>
	{
		length++;
		str++;
	}
	str = original;
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	9a 87       	std	Y+10, r25	; 0x0a
    1132:	89 87       	std	Y+9, r24	; 0x09
	if(FLAGS & FLAG_IGNORE_WHITESPACE)
    1134:	80 91 66 02 	lds	r24, 0x0266
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	84 70       	andi	r24, 0x04	; 4
    113e:	90 70       	andi	r25, 0x00	; 0
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	09 f4       	brne	.+2      	; 0x1146 <__stack+0x47>
    1144:	40 c0       	rjmp	.+128    	; 0x11c6 <__stack+0xc7>
	{
		length = 0;
    1146:	18 86       	std	Y+8, r1	; 0x08
    1148:	1f 82       	std	Y+7, r1	; 0x07
    114a:	2f c0       	rjmp	.+94     	; 0x11aa <__stack+0xab>
		char * CHAR;
		int off;
		while(*str != '\0')
		{
			CHAR = getChar(*str);
    114c:	e9 85       	ldd	r30, Y+9	; 0x09
    114e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1150:	80 81       	ld	r24, Z
    1152:	0e 94 da 09 	call	0x13b4	; 0x13b4 <getChar>
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	8b 83       	std	Y+3, r24	; 0x03
			for(off = 4;off >= 0;off--)
    115a:	84 e0       	ldi	r24, 0x04	; 4
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9a 83       	std	Y+2, r25	; 0x02
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	0f c0       	rjmp	.+30     	; 0x1182 <__stack+0x83>
			{
				if(CHAR[off] != 0x00) break;
    1164:	29 81       	ldd	r18, Y+1	; 0x01
    1166:	3a 81       	ldd	r19, Y+2	; 0x02
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	fc 01       	movw	r30, r24
    116e:	e2 0f       	add	r30, r18
    1170:	f3 1f       	adc	r31, r19
    1172:	80 81       	ld	r24, Z
    1174:	88 23       	and	r24, r24
    1176:	49 f4       	brne	.+18     	; 0x118a <__stack+0x8b>
		char * CHAR;
		int off;
		while(*str != '\0')
		{
			CHAR = getChar(*str);
			for(off = 4;off >= 0;off--)
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	99 23       	and	r25, r25
    1188:	6c f7       	brge	.-38     	; 0x1164 <__stack+0x65>
			{
				if(CHAR[off] != 0x00) break;
			}
			length += off + 2;
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	9c 01       	movw	r18, r24
    1190:	2e 5f       	subi	r18, 0xFE	; 254
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	8f 81       	ldd	r24, Y+7	; 0x07
    1196:	98 85       	ldd	r25, Y+8	; 0x08
    1198:	82 0f       	add	r24, r18
    119a:	93 1f       	adc	r25, r19
    119c:	98 87       	std	Y+8, r25	; 0x08
    119e:	8f 83       	std	Y+7, r24	; 0x07
			str++;
    11a0:	89 85       	ldd	r24, Y+9	; 0x09
    11a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	9a 87       	std	Y+10, r25	; 0x0a
    11a8:	89 87       	std	Y+9, r24	; 0x09
	if(FLAGS & FLAG_IGNORE_WHITESPACE)
	{
		length = 0;
		char * CHAR;
		int off;
		while(*str != '\0')
    11aa:	e9 85       	ldd	r30, Y+9	; 0x09
    11ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    11ae:	80 81       	ld	r24, Z
    11b0:	88 23       	and	r24, r24
    11b2:	61 f6       	brne	.-104    	; 0x114c <__stack+0x4d>
				if(CHAR[off] != 0x00) break;
			}
			length += off + 2;
			str++;
		}
		str = original;
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	9a 87       	std	Y+10, r25	; 0x0a
    11ba:	89 87       	std	Y+9, r24	; 0x09
		return length;
    11bc:	4f 81       	ldd	r20, Y+7	; 0x07
    11be:	58 85       	ldd	r21, Y+8	; 0x08
    11c0:	5c 87       	std	Y+12, r21	; 0x0c
    11c2:	4b 87       	std	Y+11, r20	; 0x0b
    11c4:	0c c0       	rjmp	.+24     	; 0x11de <__stack+0xdf>
	}
	else return 5 * length;
    11c6:	8f 81       	ldd	r24, Y+7	; 0x07
    11c8:	98 85       	ldd	r25, Y+8	; 0x08
    11ca:	9c 01       	movw	r18, r24
    11cc:	22 0f       	add	r18, r18
    11ce:	33 1f       	adc	r19, r19
    11d0:	22 0f       	add	r18, r18
    11d2:	33 1f       	adc	r19, r19
    11d4:	a9 01       	movw	r20, r18
    11d6:	48 0f       	add	r20, r24
    11d8:	59 1f       	adc	r21, r25
    11da:	5c 87       	std	Y+12, r21	; 0x0c
    11dc:	4b 87       	std	Y+11, r20	; 0x0b
    11de:	8b 85       	ldd	r24, Y+11	; 0x0b
    11e0:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    11e2:	2c 96       	adiw	r28, 0x0c	; 12
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <LCD_PrintSpecial>:

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
    11f4:	0f 93       	push	r16
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	28 97       	sbiw	r28, 0x08	; 8
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	9c 83       	std	Y+4, r25	; 0x04
    120c:	8b 83       	std	Y+3, r24	; 0x03
    120e:	6d 83       	std	Y+5, r22	; 0x05
    1210:	4e 83       	std	Y+6, r20	; 0x06
    1212:	2f 83       	std	Y+7, r18	; 0x07
    1214:	08 87       	std	Y+8, r16	; 0x08
	for(unsigned char x = 0;x < width;x++)
    1216:	1a 82       	std	Y+2, r1	; 0x02
    1218:	30 c0       	rjmp	.+96     	; 0x127a <LCD_PrintSpecial+0x86>
	{
		for(unsigned char y = 0;y < height;y++)
    121a:	19 82       	std	Y+1, r1	; 0x01
    121c:	27 c0       	rjmp	.+78     	; 0x126c <LCD_PrintSpecial+0x78>
		{
			if(SPECIAL[x] & (1 << y))
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	fc 01       	movw	r30, r24
    122a:	e2 0f       	add	r30, r18
    122c:	f3 1f       	adc	r31, r19
    122e:	80 81       	ld	r24, Z
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a9 01       	movw	r20, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <LCD_PrintSpecial+0x4e>
    123e:	55 95       	asr	r21
    1240:	47 95       	ror	r20
    1242:	8a 95       	dec	r24
    1244:	e2 f7       	brpl	.-8      	; 0x123e <LCD_PrintSpecial+0x4a>
    1246:	ca 01       	movw	r24, r20
    1248:	81 70       	andi	r24, 0x01	; 1
    124a:	90 70       	andi	r25, 0x00	; 0
    124c:	88 23       	and	r24, r24
    124e:	59 f0       	breq	.+22     	; 0x1266 <LCD_PrintSpecial+0x72>
			{
				LCD_DrawPixel(x + x0, y + y0);
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	29 2f       	mov	r18, r25
    1256:	28 0f       	add	r18, r24
    1258:	99 81       	ldd	r25, Y+1	; 0x01
    125a:	8e 81       	ldd	r24, Y+6	; 0x06
    125c:	98 0f       	add	r25, r24
    125e:	82 2f       	mov	r24, r18
    1260:	69 2f       	mov	r22, r25
    1262:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_DrawPixel>

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
	for(unsigned char x = 0;x < width;x++)
	{
		for(unsigned char y = 0;y < height;y++)
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	99 81       	ldd	r25, Y+1	; 0x01
    126e:	88 85       	ldd	r24, Y+8	; 0x08
    1270:	98 17       	cp	r25, r24
    1272:	a8 f2       	brcs	.-86     	; 0x121e <LCD_PrintSpecial+0x2a>
	else return 5 * length;
}

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
	for(unsigned char x = 0;x < width;x++)
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8f 5f       	subi	r24, 0xFF	; 255
    1278:	8a 83       	std	Y+2, r24	; 0x02
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	8f 81       	ldd	r24, Y+7	; 0x07
    127e:	98 17       	cp	r25, r24
    1280:	60 f2       	brcs	.-104    	; 0x121a <LCD_PrintSpecial+0x26>
			{
				LCD_DrawPixel(x + x0, y + y0);
			}
		}
	}
}
    1282:	28 96       	adiw	r28, 0x08	; 8
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <LCD_Display>:

void LCD_Display()
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <LCD_Display+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <LCD_Display+0x8>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	int page, column;
	for(page = 7;page >= 0;page--)
    12a2:	87 e0       	ldi	r24, 0x07	; 7
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	34 c0       	rjmp	.+104    	; 0x1314 <LCD_Display+0x7e>
	{
		sendData(0xB0 | (7 - page), CMD); // Page address
    12ac:	9b 81       	ldd	r25, Y+3	; 0x03
    12ae:	87 e0       	ldi	r24, 0x07	; 7
    12b0:	89 1b       	sub	r24, r25
    12b2:	80 6b       	ori	r24, 0xB0	; 176
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>
		sendData(0x10, CMD); // Column addres MSB (0)
    12ba:	80 e1       	ldi	r24, 0x10	; 16
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>
		sendData(0x04, CMD); // Column address LSB (4)
    12c2:	84 e0       	ldi	r24, 0x04	; 4
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>
		for(column = 0;column < 128;column++)
    12ca:	1a 82       	std	Y+2, r1	; 0x02
    12cc:	19 82       	std	Y+1, r1	; 0x01
    12ce:	18 c0       	rjmp	.+48     	; 0x1300 <LCD_Display+0x6a>
		{
			sendData(buffer[page * 128 + column], DATA); // Data
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	9c 01       	movw	r18, r24
    12d6:	36 95       	lsr	r19
    12d8:	32 2f       	mov	r19, r18
    12da:	22 27       	eor	r18, r18
    12dc:	37 95       	ror	r19
    12de:	27 95       	ror	r18
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	82 0f       	add	r24, r18
    12e6:	93 1f       	adc	r25, r19
    12e8:	fc 01       	movw	r30, r24
    12ea:	e4 59       	subi	r30, 0x94	; 148
    12ec:	f9 4f       	sbci	r31, 0xF9	; 249
    12ee:	80 81       	ld	r24, Z
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	0e 94 2a 04 	call	0x854	; 0x854 <sendData>
	for(page = 7;page >= 0;page--)
	{
		sendData(0xB0 | (7 - page), CMD); // Page address
		sendData(0x10, CMD); // Column addres MSB (0)
		sendData(0x04, CMD); // Column address LSB (4)
		for(column = 0;column < 128;column++)
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	80 38       	cpi	r24, 0x80	; 128
    1306:	91 05       	cpc	r25, r1
    1308:	1c f3       	brlt	.-58     	; 0x12d0 <LCD_Display+0x3a>
}

void LCD_Display()
{
	int page, column;
	for(page = 7;page >= 0;page--)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	99 23       	and	r25, r25
    131a:	44 f6       	brge	.-112    	; 0x12ac <LCD_Display+0x16>
		for(column = 0;column < 128;column++)
		{
			sendData(buffer[page * 128 + column], DATA); // Data
		}
	}
	memcpy(pixels, buffer, sizeof(pixels));
    131c:	8c e6       	ldi	r24, 0x6C	; 108
    131e:	92 e0       	ldi	r25, 0x02	; 2
    1320:	2c e6       	ldi	r18, 0x6C	; 108
    1322:	36 e0       	ldi	r19, 0x06	; 6
    1324:	b9 01       	movw	r22, r18
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	54 e0       	ldi	r21, 0x04	; 4
    132a:	0e 94 c2 12 	call	0x2584	; 0x2584 <memcpy>
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <LCD_GetWidth>:

int LCD_GetWidth()
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	00 d0       	rcall	.+0      	; 0x1342 <LCD_GetWidth+0x6>
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	return ((FLAGS & FLAG_LANDSCAPE) > 0 ? 128 : 64);
    1346:	80 91 66 02 	lds	r24, 0x0266
    134a:	88 2f       	mov	r24, r24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	81 70       	andi	r24, 0x01	; 1
    1350:	90 70       	andi	r25, 0x00	; 0
    1352:	18 16       	cp	r1, r24
    1354:	19 06       	cpc	r1, r25
    1356:	2c f4       	brge	.+10     	; 0x1362 <LCD_GetWidth+0x26>
    1358:	80 e8       	ldi	r24, 0x80	; 128
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	04 c0       	rjmp	.+8      	; 0x136a <LCD_GetWidth+0x2e>
    1362:	80 e4       	ldi	r24, 0x40	; 64
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <LCD_GetHeight>:

int LCD_GetHeight()
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	00 d0       	rcall	.+0      	; 0x137e <LCD_GetHeight+0x6>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
	return ((FLAGS & FLAG_LANDSCAPE) > 0 ? 64 : 128);
    1382:	80 91 66 02 	lds	r24, 0x0266
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	81 70       	andi	r24, 0x01	; 1
    138c:	90 70       	andi	r25, 0x00	; 0
    138e:	18 16       	cp	r1, r24
    1390:	19 06       	cpc	r1, r25
    1392:	2c f4       	brge	.+10     	; 0x139e <LCD_GetHeight+0x26>
    1394:	80 e4       	ldi	r24, 0x40	; 64
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <LCD_GetHeight+0x2e>
    139e:	80 e8       	ldi	r24, 0x80	; 128
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <getChar>:

char * getChar(char c)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <getChar+0x6>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <getChar+0x8>
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	89 83       	std	Y+1, r24	; 0x01
	switch(c)
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3d 83       	std	Y+5, r19	; 0x05
    13cc:	2c 83       	std	Y+4, r18	; 0x04
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	9d 81       	ldd	r25, Y+5	; 0x05
    13d2:	84 35       	cpi	r24, 0x54	; 84
    13d4:	91 05       	cpc	r25, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <getChar+0x26>
    13d8:	79 c2       	rjmp	.+1266   	; 0x18cc <getChar+0x518>
    13da:	2c 81       	ldd	r18, Y+4	; 0x04
    13dc:	3d 81       	ldd	r19, Y+5	; 0x05
    13de:	25 35       	cpi	r18, 0x55	; 85
    13e0:	31 05       	cpc	r19, r1
    13e2:	0c f0       	brlt	.+2      	; 0x13e6 <getChar+0x32>
    13e4:	ed c0       	rjmp	.+474    	; 0x15c0 <getChar+0x20c>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	83 34       	cpi	r24, 0x43	; 67
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <getChar+0x3e>
    13f0:	c3 c1       	rjmp	.+902    	; 0x1778 <getChar+0x3c4>
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
    13f4:	3d 81       	ldd	r19, Y+5	; 0x05
    13f6:	24 34       	cpi	r18, 0x44	; 68
    13f8:	31 05       	cpc	r19, r1
    13fa:	0c f0       	brlt	.+2      	; 0x13fe <getChar+0x4a>
    13fc:	80 c0       	rjmp	.+256    	; 0x14fe <getChar+0x14a>
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	9d 81       	ldd	r25, Y+5	; 0x05
    1402:	85 33       	cpi	r24, 0x35	; 53
    1404:	91 05       	cpc	r25, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <getChar+0x56>
    1408:	c0 c2       	rjmp	.+1408   	; 0x198a <getChar+0x5d6>
    140a:	2c 81       	ldd	r18, Y+4	; 0x04
    140c:	3d 81       	ldd	r19, Y+5	; 0x05
    140e:	26 33       	cpi	r18, 0x36	; 54
    1410:	31 05       	cpc	r19, r1
    1412:	0c f0       	brlt	.+2      	; 0x1416 <getChar+0x62>
    1414:	43 c0       	rjmp	.+134    	; 0x149c <getChar+0xe8>
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	9d 81       	ldd	r25, Y+5	; 0x05
    141a:	81 33       	cpi	r24, 0x31	; 49
    141c:	91 05       	cpc	r25, r1
    141e:	09 f4       	brne	.+2      	; 0x1422 <getChar+0x6e>
    1420:	a0 c2       	rjmp	.+1344   	; 0x1962 <getChar+0x5ae>
    1422:	2c 81       	ldd	r18, Y+4	; 0x04
    1424:	3d 81       	ldd	r19, Y+5	; 0x05
    1426:	22 33       	cpi	r18, 0x32	; 50
    1428:	31 05       	cpc	r19, r1
    142a:	5c f5       	brge	.+86     	; 0x1482 <getChar+0xce>
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	9d 81       	ldd	r25, Y+5	; 0x05
    1430:	8d 32       	cpi	r24, 0x2D	; 45
    1432:	91 05       	cpc	r25, r1
    1434:	09 f4       	brne	.+2      	; 0x1438 <getChar+0x84>
    1436:	cc c2       	rjmp	.+1432   	; 0x19d0 <getChar+0x61c>
    1438:	2c 81       	ldd	r18, Y+4	; 0x04
    143a:	3d 81       	ldd	r19, Y+5	; 0x05
    143c:	2e 32       	cpi	r18, 0x2E	; 46
    143e:	31 05       	cpc	r19, r1
    1440:	9c f4       	brge	.+38     	; 0x1468 <getChar+0xb4>
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	82 32       	cpi	r24, 0x22	; 34
    1448:	91 05       	cpc	r25, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <getChar+0x9a>
    144c:	c6 c2       	rjmp	.+1420   	; 0x19da <getChar+0x626>
    144e:	2c 81       	ldd	r18, Y+4	; 0x04
    1450:	3d 81       	ldd	r19, Y+5	; 0x05
    1452:	2c 32       	cpi	r18, 0x2C	; 44
    1454:	31 05       	cpc	r19, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <getChar+0xa6>
    1458:	b6 c2       	rjmp	.+1388   	; 0x19c6 <getChar+0x612>
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	81 32       	cpi	r24, 0x21	; 33
    1460:	91 05       	cpc	r25, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <getChar+0xb2>
    1464:	bf c2       	rjmp	.+1406   	; 0x19e4 <getChar+0x630>
    1466:	cd c2       	rjmp	.+1434   	; 0x1a02 <getChar+0x64e>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	2e 32       	cpi	r18, 0x2E	; 46
    146e:	31 05       	cpc	r19, r1
    1470:	09 f4       	brne	.+2      	; 0x1474 <getChar+0xc0>
    1472:	a4 c2       	rjmp	.+1352   	; 0x19bc <getChar+0x608>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	80 33       	cpi	r24, 0x30	; 48
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <getChar+0xcc>
    147e:	6c c2       	rjmp	.+1240   	; 0x1958 <getChar+0x5a4>
    1480:	c0 c2       	rjmp	.+1408   	; 0x1a02 <getChar+0x64e>
    1482:	2c 81       	ldd	r18, Y+4	; 0x04
    1484:	3d 81       	ldd	r19, Y+5	; 0x05
    1486:	23 33       	cpi	r18, 0x33	; 51
    1488:	31 05       	cpc	r19, r1
    148a:	09 f4       	brne	.+2      	; 0x148e <getChar+0xda>
    148c:	74 c2       	rjmp	.+1256   	; 0x1976 <getChar+0x5c2>
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	84 33       	cpi	r24, 0x34	; 52
    1494:	91 05       	cpc	r25, r1
    1496:	0c f0       	brlt	.+2      	; 0x149a <getChar+0xe6>
    1498:	73 c2       	rjmp	.+1254   	; 0x1980 <getChar+0x5cc>
    149a:	68 c2       	rjmp	.+1232   	; 0x196c <getChar+0x5b8>
    149c:	2c 81       	ldd	r18, Y+4	; 0x04
    149e:	3d 81       	ldd	r19, Y+5	; 0x05
    14a0:	29 33       	cpi	r18, 0x39	; 57
    14a2:	31 05       	cpc	r19, r1
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <getChar+0xf4>
    14a6:	85 c2       	rjmp	.+1290   	; 0x19b2 <getChar+0x5fe>
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	8a 33       	cpi	r24, 0x3A	; 58
    14ae:	91 05       	cpc	r25, r1
    14b0:	6c f4       	brge	.+26     	; 0x14cc <getChar+0x118>
    14b2:	2c 81       	ldd	r18, Y+4	; 0x04
    14b4:	3d 81       	ldd	r19, Y+5	; 0x05
    14b6:	27 33       	cpi	r18, 0x37	; 55
    14b8:	31 05       	cpc	r19, r1
    14ba:	09 f4       	brne	.+2      	; 0x14be <getChar+0x10a>
    14bc:	70 c2       	rjmp	.+1248   	; 0x199e <getChar+0x5ea>
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	88 33       	cpi	r24, 0x38	; 56
    14c4:	91 05       	cpc	r25, r1
    14c6:	0c f0       	brlt	.+2      	; 0x14ca <getChar+0x116>
    14c8:	6f c2       	rjmp	.+1246   	; 0x19a8 <getChar+0x5f4>
    14ca:	64 c2       	rjmp	.+1224   	; 0x1994 <getChar+0x5e0>
    14cc:	2c 81       	ldd	r18, Y+4	; 0x04
    14ce:	3d 81       	ldd	r19, Y+5	; 0x05
    14d0:	21 34       	cpi	r18, 0x41	; 65
    14d2:	31 05       	cpc	r19, r1
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <getChar+0x124>
    14d6:	3c c1       	rjmp	.+632    	; 0x1750 <getChar+0x39c>
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	9d 81       	ldd	r25, Y+5	; 0x05
    14dc:	82 34       	cpi	r24, 0x42	; 66
    14de:	91 05       	cpc	r25, r1
    14e0:	0c f0       	brlt	.+2      	; 0x14e4 <getChar+0x130>
    14e2:	40 c1       	rjmp	.+640    	; 0x1764 <getChar+0x3b0>
    14e4:	2c 81       	ldd	r18, Y+4	; 0x04
    14e6:	3d 81       	ldd	r19, Y+5	; 0x05
    14e8:	2a 33       	cpi	r18, 0x3A	; 58
    14ea:	31 05       	cpc	r19, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <getChar+0x13c>
    14ee:	84 c2       	rjmp	.+1288   	; 0x19f8 <getChar+0x644>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	8f 33       	cpi	r24, 0x3F	; 63
    14f6:	91 05       	cpc	r25, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <getChar+0x148>
    14fa:	79 c2       	rjmp	.+1266   	; 0x19ee <getChar+0x63a>
    14fc:	82 c2       	rjmp	.+1284   	; 0x1a02 <getChar+0x64e>
    14fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1500:	3d 81       	ldd	r19, Y+5	; 0x05
    1502:	2b 34       	cpi	r18, 0x4B	; 75
    1504:	31 05       	cpc	r19, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <getChar+0x156>
    1508:	87 c1       	rjmp	.+782    	; 0x1818 <getChar+0x464>
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	8c 34       	cpi	r24, 0x4C	; 76
    1510:	91 05       	cpc	r25, r1
    1512:	2c f5       	brge	.+74     	; 0x155e <getChar+0x1aa>
    1514:	2c 81       	ldd	r18, Y+4	; 0x04
    1516:	3d 81       	ldd	r19, Y+5	; 0x05
    1518:	27 34       	cpi	r18, 0x47	; 71
    151a:	31 05       	cpc	r19, r1
    151c:	09 f4       	brne	.+2      	; 0x1520 <getChar+0x16c>
    151e:	54 c1       	rjmp	.+680    	; 0x17c8 <getChar+0x414>
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	88 34       	cpi	r24, 0x48	; 72
    1526:	91 05       	cpc	r25, r1
    1528:	6c f4       	brge	.+26     	; 0x1544 <getChar+0x190>
    152a:	2c 81       	ldd	r18, Y+4	; 0x04
    152c:	3d 81       	ldd	r19, Y+5	; 0x05
    152e:	25 34       	cpi	r18, 0x45	; 69
    1530:	31 05       	cpc	r19, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <getChar+0x182>
    1534:	35 c1       	rjmp	.+618    	; 0x17a0 <getChar+0x3ec>
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	9d 81       	ldd	r25, Y+5	; 0x05
    153a:	86 34       	cpi	r24, 0x46	; 70
    153c:	91 05       	cpc	r25, r1
    153e:	0c f0       	brlt	.+2      	; 0x1542 <getChar+0x18e>
    1540:	39 c1       	rjmp	.+626    	; 0x17b4 <getChar+0x400>
    1542:	24 c1       	rjmp	.+584    	; 0x178c <getChar+0x3d8>
    1544:	2c 81       	ldd	r18, Y+4	; 0x04
    1546:	3d 81       	ldd	r19, Y+5	; 0x05
    1548:	29 34       	cpi	r18, 0x49	; 73
    154a:	31 05       	cpc	r19, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <getChar+0x19c>
    154e:	50 c1       	rjmp	.+672    	; 0x17f0 <getChar+0x43c>
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	9d 81       	ldd	r25, Y+5	; 0x05
    1554:	8a 34       	cpi	r24, 0x4A	; 74
    1556:	91 05       	cpc	r25, r1
    1558:	0c f0       	brlt	.+2      	; 0x155c <getChar+0x1a8>
    155a:	54 c1       	rjmp	.+680    	; 0x1804 <getChar+0x450>
    155c:	3f c1       	rjmp	.+638    	; 0x17dc <getChar+0x428>
    155e:	2c 81       	ldd	r18, Y+4	; 0x04
    1560:	3d 81       	ldd	r19, Y+5	; 0x05
    1562:	2f 34       	cpi	r18, 0x4F	; 79
    1564:	31 05       	cpc	r19, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <getChar+0x1b6>
    1568:	7f c1       	rjmp	.+766    	; 0x1868 <getChar+0x4b4>
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	80 35       	cpi	r24, 0x50	; 80
    1570:	91 05       	cpc	r25, r1
    1572:	6c f4       	brge	.+26     	; 0x158e <getChar+0x1da>
    1574:	2c 81       	ldd	r18, Y+4	; 0x04
    1576:	3d 81       	ldd	r19, Y+5	; 0x05
    1578:	2d 34       	cpi	r18, 0x4D	; 77
    157a:	31 05       	cpc	r19, r1
    157c:	09 f4       	brne	.+2      	; 0x1580 <getChar+0x1cc>
    157e:	60 c1       	rjmp	.+704    	; 0x1840 <getChar+0x48c>
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	8e 34       	cpi	r24, 0x4E	; 78
    1586:	91 05       	cpc	r25, r1
    1588:	0c f0       	brlt	.+2      	; 0x158c <getChar+0x1d8>
    158a:	64 c1       	rjmp	.+712    	; 0x1854 <getChar+0x4a0>
    158c:	4f c1       	rjmp	.+670    	; 0x182c <getChar+0x478>
    158e:	2c 81       	ldd	r18, Y+4	; 0x04
    1590:	3d 81       	ldd	r19, Y+5	; 0x05
    1592:	21 35       	cpi	r18, 0x51	; 81
    1594:	31 05       	cpc	r19, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <getChar+0x1e6>
    1598:	7b c1       	rjmp	.+758    	; 0x1890 <getChar+0x4dc>
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	81 35       	cpi	r24, 0x51	; 81
    15a0:	91 05       	cpc	r25, r1
    15a2:	0c f4       	brge	.+2      	; 0x15a6 <getChar+0x1f2>
    15a4:	6b c1       	rjmp	.+726    	; 0x187c <getChar+0x4c8>
    15a6:	2c 81       	ldd	r18, Y+4	; 0x04
    15a8:	3d 81       	ldd	r19, Y+5	; 0x05
    15aa:	22 35       	cpi	r18, 0x52	; 82
    15ac:	31 05       	cpc	r19, r1
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <getChar+0x1fe>
    15b0:	79 c1       	rjmp	.+754    	; 0x18a4 <getChar+0x4f0>
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	9d 81       	ldd	r25, Y+5	; 0x05
    15b6:	83 35       	cpi	r24, 0x53	; 83
    15b8:	91 05       	cpc	r25, r1
    15ba:	09 f4       	brne	.+2      	; 0x15be <getChar+0x20a>
    15bc:	7d c1       	rjmp	.+762    	; 0x18b8 <getChar+0x504>
    15be:	21 c2       	rjmp	.+1090   	; 0x1a02 <getChar+0x64e>
    15c0:	2c 81       	ldd	r18, Y+4	; 0x04
    15c2:	3d 81       	ldd	r19, Y+5	; 0x05
    15c4:	2a 36       	cpi	r18, 0x6A	; 106
    15c6:	31 05       	cpc	r19, r1
    15c8:	09 f4       	brne	.+2      	; 0x15cc <getChar+0x218>
    15ca:	21 c1       	rjmp	.+578    	; 0x180e <getChar+0x45a>
    15cc:	8c 81       	ldd	r24, Y+4	; 0x04
    15ce:	9d 81       	ldd	r25, Y+5	; 0x05
    15d0:	8b 36       	cpi	r24, 0x6B	; 107
    15d2:	91 05       	cpc	r25, r1
    15d4:	0c f0       	brlt	.+2      	; 0x15d8 <getChar+0x224>
    15d6:	5b c0       	rjmp	.+182    	; 0x168e <getChar+0x2da>
    15d8:	2c 81       	ldd	r18, Y+4	; 0x04
    15da:	3d 81       	ldd	r19, Y+5	; 0x05
    15dc:	22 36       	cpi	r18, 0x62	; 98
    15de:	31 05       	cpc	r19, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <getChar+0x230>
    15e2:	c5 c0       	rjmp	.+394    	; 0x176e <getChar+0x3ba>
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	83 36       	cpi	r24, 0x63	; 99
    15ea:	91 05       	cpc	r25, r1
    15ec:	5c f5       	brge	.+86     	; 0x1644 <getChar+0x290>
    15ee:	2c 81       	ldd	r18, Y+4	; 0x04
    15f0:	3d 81       	ldd	r19, Y+5	; 0x05
    15f2:	28 35       	cpi	r18, 0x58	; 88
    15f4:	31 05       	cpc	r19, r1
    15f6:	09 f4       	brne	.+2      	; 0x15fa <getChar+0x246>
    15f8:	91 c1       	rjmp	.+802    	; 0x191c <getChar+0x568>
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	89 35       	cpi	r24, 0x59	; 89
    1600:	91 05       	cpc	r25, r1
    1602:	6c f4       	brge	.+26     	; 0x161e <getChar+0x26a>
    1604:	2c 81       	ldd	r18, Y+4	; 0x04
    1606:	3d 81       	ldd	r19, Y+5	; 0x05
    1608:	26 35       	cpi	r18, 0x56	; 86
    160a:	31 05       	cpc	r19, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <getChar+0x25c>
    160e:	72 c1       	rjmp	.+740    	; 0x18f4 <getChar+0x540>
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	87 35       	cpi	r24, 0x57	; 87
    1616:	91 05       	cpc	r25, r1
    1618:	0c f0       	brlt	.+2      	; 0x161c <getChar+0x268>
    161a:	76 c1       	rjmp	.+748    	; 0x1908 <getChar+0x554>
    161c:	61 c1       	rjmp	.+706    	; 0x18e0 <getChar+0x52c>
    161e:	2c 81       	ldd	r18, Y+4	; 0x04
    1620:	3d 81       	ldd	r19, Y+5	; 0x05
    1622:	2a 35       	cpi	r18, 0x5A	; 90
    1624:	31 05       	cpc	r19, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <getChar+0x276>
    1628:	8d c1       	rjmp	.+794    	; 0x1944 <getChar+0x590>
    162a:	8c 81       	ldd	r24, Y+4	; 0x04
    162c:	9d 81       	ldd	r25, Y+5	; 0x05
    162e:	8a 35       	cpi	r24, 0x5A	; 90
    1630:	91 05       	cpc	r25, r1
    1632:	0c f4       	brge	.+2      	; 0x1636 <getChar+0x282>
    1634:	7d c1       	rjmp	.+762    	; 0x1930 <getChar+0x57c>
    1636:	2c 81       	ldd	r18, Y+4	; 0x04
    1638:	3d 81       	ldd	r19, Y+5	; 0x05
    163a:	21 36       	cpi	r18, 0x61	; 97
    163c:	31 05       	cpc	r19, r1
    163e:	09 f4       	brne	.+2      	; 0x1642 <getChar+0x28e>
    1640:	8c c0       	rjmp	.+280    	; 0x175a <getChar+0x3a6>
    1642:	df c1       	rjmp	.+958    	; 0x1a02 <getChar+0x64e>
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	9d 81       	ldd	r25, Y+5	; 0x05
    1648:	86 36       	cpi	r24, 0x66	; 102
    164a:	91 05       	cpc	r25, r1
    164c:	09 f4       	brne	.+2      	; 0x1650 <getChar+0x29c>
    164e:	b7 c0       	rjmp	.+366    	; 0x17be <getChar+0x40a>
    1650:	2c 81       	ldd	r18, Y+4	; 0x04
    1652:	3d 81       	ldd	r19, Y+5	; 0x05
    1654:	27 36       	cpi	r18, 0x67	; 103
    1656:	31 05       	cpc	r19, r1
    1658:	6c f4       	brge	.+26     	; 0x1674 <getChar+0x2c0>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	84 36       	cpi	r24, 0x64	; 100
    1660:	91 05       	cpc	r25, r1
    1662:	09 f4       	brne	.+2      	; 0x1666 <getChar+0x2b2>
    1664:	98 c0       	rjmp	.+304    	; 0x1796 <getChar+0x3e2>
    1666:	2c 81       	ldd	r18, Y+4	; 0x04
    1668:	3d 81       	ldd	r19, Y+5	; 0x05
    166a:	25 36       	cpi	r18, 0x65	; 101
    166c:	31 05       	cpc	r19, r1
    166e:	0c f0       	brlt	.+2      	; 0x1672 <getChar+0x2be>
    1670:	9c c0       	rjmp	.+312    	; 0x17aa <getChar+0x3f6>
    1672:	87 c0       	rjmp	.+270    	; 0x1782 <getChar+0x3ce>
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	9d 81       	ldd	r25, Y+5	; 0x05
    1678:	88 36       	cpi	r24, 0x68	; 104
    167a:	91 05       	cpc	r25, r1
    167c:	09 f4       	brne	.+2      	; 0x1680 <getChar+0x2cc>
    167e:	b3 c0       	rjmp	.+358    	; 0x17e6 <getChar+0x432>
    1680:	2c 81       	ldd	r18, Y+4	; 0x04
    1682:	3d 81       	ldd	r19, Y+5	; 0x05
    1684:	29 36       	cpi	r18, 0x69	; 105
    1686:	31 05       	cpc	r19, r1
    1688:	0c f0       	brlt	.+2      	; 0x168c <getChar+0x2d8>
    168a:	b7 c0       	rjmp	.+366    	; 0x17fa <getChar+0x446>
    168c:	a2 c0       	rjmp	.+324    	; 0x17d2 <getChar+0x41e>
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	9d 81       	ldd	r25, Y+5	; 0x05
    1692:	82 37       	cpi	r24, 0x72	; 114
    1694:	91 05       	cpc	r25, r1
    1696:	09 f4       	brne	.+2      	; 0x169a <getChar+0x2e6>
    1698:	0a c1       	rjmp	.+532    	; 0x18ae <getChar+0x4fa>
    169a:	2c 81       	ldd	r18, Y+4	; 0x04
    169c:	3d 81       	ldd	r19, Y+5	; 0x05
    169e:	23 37       	cpi	r18, 0x73	; 115
    16a0:	31 05       	cpc	r19, r1
    16a2:	2c f5       	brge	.+74     	; 0x16ee <getChar+0x33a>
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	9d 81       	ldd	r25, Y+5	; 0x05
    16a8:	8e 36       	cpi	r24, 0x6E	; 110
    16aa:	91 05       	cpc	r25, r1
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <getChar+0x2fc>
    16ae:	d7 c0       	rjmp	.+430    	; 0x185e <getChar+0x4aa>
    16b0:	2c 81       	ldd	r18, Y+4	; 0x04
    16b2:	3d 81       	ldd	r19, Y+5	; 0x05
    16b4:	2f 36       	cpi	r18, 0x6F	; 111
    16b6:	31 05       	cpc	r19, r1
    16b8:	6c f4       	brge	.+26     	; 0x16d4 <getChar+0x320>
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	8c 36       	cpi	r24, 0x6C	; 108
    16c0:	91 05       	cpc	r25, r1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <getChar+0x312>
    16c4:	b8 c0       	rjmp	.+368    	; 0x1836 <getChar+0x482>
    16c6:	2c 81       	ldd	r18, Y+4	; 0x04
    16c8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ca:	2d 36       	cpi	r18, 0x6D	; 109
    16cc:	31 05       	cpc	r19, r1
    16ce:	0c f0       	brlt	.+2      	; 0x16d2 <getChar+0x31e>
    16d0:	bc c0       	rjmp	.+376    	; 0x184a <getChar+0x496>
    16d2:	a7 c0       	rjmp	.+334    	; 0x1822 <getChar+0x46e>
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	9d 81       	ldd	r25, Y+5	; 0x05
    16d8:	80 37       	cpi	r24, 0x70	; 112
    16da:	91 05       	cpc	r25, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <getChar+0x32c>
    16de:	d3 c0       	rjmp	.+422    	; 0x1886 <getChar+0x4d2>
    16e0:	2c 81       	ldd	r18, Y+4	; 0x04
    16e2:	3d 81       	ldd	r19, Y+5	; 0x05
    16e4:	21 37       	cpi	r18, 0x71	; 113
    16e6:	31 05       	cpc	r19, r1
    16e8:	0c f0       	brlt	.+2      	; 0x16ec <getChar+0x338>
    16ea:	d7 c0       	rjmp	.+430    	; 0x189a <getChar+0x4e6>
    16ec:	c2 c0       	rjmp	.+388    	; 0x1872 <getChar+0x4be>
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	86 37       	cpi	r24, 0x76	; 118
    16f4:	91 05       	cpc	r25, r1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <getChar+0x346>
    16f8:	02 c1       	rjmp	.+516    	; 0x18fe <getChar+0x54a>
    16fa:	2c 81       	ldd	r18, Y+4	; 0x04
    16fc:	3d 81       	ldd	r19, Y+5	; 0x05
    16fe:	27 37       	cpi	r18, 0x77	; 119
    1700:	31 05       	cpc	r19, r1
    1702:	6c f4       	brge	.+26     	; 0x171e <getChar+0x36a>
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	9d 81       	ldd	r25, Y+5	; 0x05
    1708:	84 37       	cpi	r24, 0x74	; 116
    170a:	91 05       	cpc	r25, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <getChar+0x35c>
    170e:	e3 c0       	rjmp	.+454    	; 0x18d6 <getChar+0x522>
    1710:	2c 81       	ldd	r18, Y+4	; 0x04
    1712:	3d 81       	ldd	r19, Y+5	; 0x05
    1714:	25 37       	cpi	r18, 0x75	; 117
    1716:	31 05       	cpc	r19, r1
    1718:	0c f0       	brlt	.+2      	; 0x171c <getChar+0x368>
    171a:	e7 c0       	rjmp	.+462    	; 0x18ea <getChar+0x536>
    171c:	d2 c0       	rjmp	.+420    	; 0x18c2 <getChar+0x50e>
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	88 37       	cpi	r24, 0x78	; 120
    1724:	91 05       	cpc	r25, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <getChar+0x376>
    1728:	fe c0       	rjmp	.+508    	; 0x1926 <getChar+0x572>
    172a:	2c 81       	ldd	r18, Y+4	; 0x04
    172c:	3d 81       	ldd	r19, Y+5	; 0x05
    172e:	28 37       	cpi	r18, 0x78	; 120
    1730:	31 05       	cpc	r19, r1
    1732:	0c f4       	brge	.+2      	; 0x1736 <getChar+0x382>
    1734:	ee c0       	rjmp	.+476    	; 0x1912 <getChar+0x55e>
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	9d 81       	ldd	r25, Y+5	; 0x05
    173a:	89 37       	cpi	r24, 0x79	; 121
    173c:	91 05       	cpc	r25, r1
    173e:	09 f4       	brne	.+2      	; 0x1742 <getChar+0x38e>
    1740:	fc c0       	rjmp	.+504    	; 0x193a <getChar+0x586>
    1742:	2c 81       	ldd	r18, Y+4	; 0x04
    1744:	3d 81       	ldd	r19, Y+5	; 0x05
    1746:	2a 37       	cpi	r18, 0x7A	; 122
    1748:	31 05       	cpc	r19, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <getChar+0x39a>
    174c:	00 c1       	rjmp	.+512    	; 0x194e <getChar+0x59a>
    174e:	59 c1       	rjmp	.+690    	; 0x1a02 <getChar+0x64e>
	{
		case 'A': return CHAR_A;
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	9b 83       	std	Y+3, r25	; 0x03
    1756:	8a 83       	std	Y+2, r24	; 0x02
    1758:	58 c1       	rjmp	.+688    	; 0x1a0a <getChar+0x656>
		case 'a': return CHAR_a;
    175a:	25 e0       	ldi	r18, 0x05	; 5
    175c:	31 e0       	ldi	r19, 0x01	; 1
    175e:	3b 83       	std	Y+3, r19	; 0x03
    1760:	2a 83       	std	Y+2, r18	; 0x02
    1762:	53 c1       	rjmp	.+678    	; 0x1a0a <getChar+0x656>
		case 'B': return CHAR_B;
    1764:	8a e0       	ldi	r24, 0x0A	; 10
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	9b 83       	std	Y+3, r25	; 0x03
    176a:	8a 83       	std	Y+2, r24	; 0x02
    176c:	4e c1       	rjmp	.+668    	; 0x1a0a <getChar+0x656>
		case 'b': return CHAR_b;
    176e:	2f e0       	ldi	r18, 0x0F	; 15
    1770:	31 e0       	ldi	r19, 0x01	; 1
    1772:	3b 83       	std	Y+3, r19	; 0x03
    1774:	2a 83       	std	Y+2, r18	; 0x02
    1776:	49 c1       	rjmp	.+658    	; 0x1a0a <getChar+0x656>
		case 'C': return CHAR_C;
    1778:	84 e1       	ldi	r24, 0x14	; 20
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	9b 83       	std	Y+3, r25	; 0x03
    177e:	8a 83       	std	Y+2, r24	; 0x02
    1780:	44 c1       	rjmp	.+648    	; 0x1a0a <getChar+0x656>
		case 'c': return CHAR_c;
    1782:	29 e1       	ldi	r18, 0x19	; 25
    1784:	31 e0       	ldi	r19, 0x01	; 1
    1786:	3b 83       	std	Y+3, r19	; 0x03
    1788:	2a 83       	std	Y+2, r18	; 0x02
    178a:	3f c1       	rjmp	.+638    	; 0x1a0a <getChar+0x656>
		case 'D': return CHAR_D;
    178c:	8e e1       	ldi	r24, 0x1E	; 30
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	9b 83       	std	Y+3, r25	; 0x03
    1792:	8a 83       	std	Y+2, r24	; 0x02
    1794:	3a c1       	rjmp	.+628    	; 0x1a0a <getChar+0x656>
		case 'd': return CHAR_d;
    1796:	23 e2       	ldi	r18, 0x23	; 35
    1798:	31 e0       	ldi	r19, 0x01	; 1
    179a:	3b 83       	std	Y+3, r19	; 0x03
    179c:	2a 83       	std	Y+2, r18	; 0x02
    179e:	35 c1       	rjmp	.+618    	; 0x1a0a <getChar+0x656>
		case 'E': return CHAR_E;
    17a0:	88 e2       	ldi	r24, 0x28	; 40
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	9b 83       	std	Y+3, r25	; 0x03
    17a6:	8a 83       	std	Y+2, r24	; 0x02
    17a8:	30 c1       	rjmp	.+608    	; 0x1a0a <getChar+0x656>
		case 'e': return CHAR_e;
    17aa:	2d e2       	ldi	r18, 0x2D	; 45
    17ac:	31 e0       	ldi	r19, 0x01	; 1
    17ae:	3b 83       	std	Y+3, r19	; 0x03
    17b0:	2a 83       	std	Y+2, r18	; 0x02
    17b2:	2b c1       	rjmp	.+598    	; 0x1a0a <getChar+0x656>
		case 'F': return CHAR_F;
    17b4:	82 e3       	ldi	r24, 0x32	; 50
    17b6:	91 e0       	ldi	r25, 0x01	; 1
    17b8:	9b 83       	std	Y+3, r25	; 0x03
    17ba:	8a 83       	std	Y+2, r24	; 0x02
    17bc:	26 c1       	rjmp	.+588    	; 0x1a0a <getChar+0x656>
		case 'f': return CHAR_f;
    17be:	27 e3       	ldi	r18, 0x37	; 55
    17c0:	31 e0       	ldi	r19, 0x01	; 1
    17c2:	3b 83       	std	Y+3, r19	; 0x03
    17c4:	2a 83       	std	Y+2, r18	; 0x02
    17c6:	21 c1       	rjmp	.+578    	; 0x1a0a <getChar+0x656>
		case 'G': return CHAR_G;
    17c8:	8c e3       	ldi	r24, 0x3C	; 60
    17ca:	91 e0       	ldi	r25, 0x01	; 1
    17cc:	9b 83       	std	Y+3, r25	; 0x03
    17ce:	8a 83       	std	Y+2, r24	; 0x02
    17d0:	1c c1       	rjmp	.+568    	; 0x1a0a <getChar+0x656>
		case 'g': return CHAR_g;
    17d2:	21 e4       	ldi	r18, 0x41	; 65
    17d4:	31 e0       	ldi	r19, 0x01	; 1
    17d6:	3b 83       	std	Y+3, r19	; 0x03
    17d8:	2a 83       	std	Y+2, r18	; 0x02
    17da:	17 c1       	rjmp	.+558    	; 0x1a0a <getChar+0x656>
		case 'H': return CHAR_H;
    17dc:	86 e4       	ldi	r24, 0x46	; 70
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	9b 83       	std	Y+3, r25	; 0x03
    17e2:	8a 83       	std	Y+2, r24	; 0x02
    17e4:	12 c1       	rjmp	.+548    	; 0x1a0a <getChar+0x656>
		case 'h': return CHAR_h;
    17e6:	2b e4       	ldi	r18, 0x4B	; 75
    17e8:	31 e0       	ldi	r19, 0x01	; 1
    17ea:	3b 83       	std	Y+3, r19	; 0x03
    17ec:	2a 83       	std	Y+2, r18	; 0x02
    17ee:	0d c1       	rjmp	.+538    	; 0x1a0a <getChar+0x656>
		case 'I': return CHAR_I;
    17f0:	80 e5       	ldi	r24, 0x50	; 80
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	9b 83       	std	Y+3, r25	; 0x03
    17f6:	8a 83       	std	Y+2, r24	; 0x02
    17f8:	08 c1       	rjmp	.+528    	; 0x1a0a <getChar+0x656>
		case 'i': return CHAR_i;
    17fa:	25 e5       	ldi	r18, 0x55	; 85
    17fc:	31 e0       	ldi	r19, 0x01	; 1
    17fe:	3b 83       	std	Y+3, r19	; 0x03
    1800:	2a 83       	std	Y+2, r18	; 0x02
    1802:	03 c1       	rjmp	.+518    	; 0x1a0a <getChar+0x656>
		case 'J': return CHAR_J;
    1804:	8a e5       	ldi	r24, 0x5A	; 90
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	9b 83       	std	Y+3, r25	; 0x03
    180a:	8a 83       	std	Y+2, r24	; 0x02
    180c:	fe c0       	rjmp	.+508    	; 0x1a0a <getChar+0x656>
		case 'j': return CHAR_j;
    180e:	2f e5       	ldi	r18, 0x5F	; 95
    1810:	31 e0       	ldi	r19, 0x01	; 1
    1812:	3b 83       	std	Y+3, r19	; 0x03
    1814:	2a 83       	std	Y+2, r18	; 0x02
    1816:	f9 c0       	rjmp	.+498    	; 0x1a0a <getChar+0x656>
		case 'K': return CHAR_K;
    1818:	84 e6       	ldi	r24, 0x64	; 100
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	9b 83       	std	Y+3, r25	; 0x03
    181e:	8a 83       	std	Y+2, r24	; 0x02
    1820:	f4 c0       	rjmp	.+488    	; 0x1a0a <getChar+0x656>
		case 'k': return CHAR_k;
    1822:	29 e6       	ldi	r18, 0x69	; 105
    1824:	31 e0       	ldi	r19, 0x01	; 1
    1826:	3b 83       	std	Y+3, r19	; 0x03
    1828:	2a 83       	std	Y+2, r18	; 0x02
    182a:	ef c0       	rjmp	.+478    	; 0x1a0a <getChar+0x656>
		case 'L': return CHAR_L;
    182c:	8e e6       	ldi	r24, 0x6E	; 110
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	9b 83       	std	Y+3, r25	; 0x03
    1832:	8a 83       	std	Y+2, r24	; 0x02
    1834:	ea c0       	rjmp	.+468    	; 0x1a0a <getChar+0x656>
		case 'l': return CHAR_l;
    1836:	23 e7       	ldi	r18, 0x73	; 115
    1838:	31 e0       	ldi	r19, 0x01	; 1
    183a:	3b 83       	std	Y+3, r19	; 0x03
    183c:	2a 83       	std	Y+2, r18	; 0x02
    183e:	e5 c0       	rjmp	.+458    	; 0x1a0a <getChar+0x656>
		case 'M': return CHAR_M;
    1840:	88 e7       	ldi	r24, 0x78	; 120
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	9b 83       	std	Y+3, r25	; 0x03
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	e0 c0       	rjmp	.+448    	; 0x1a0a <getChar+0x656>
		case 'm': return CHAR_m;
    184a:	2d e7       	ldi	r18, 0x7D	; 125
    184c:	31 e0       	ldi	r19, 0x01	; 1
    184e:	3b 83       	std	Y+3, r19	; 0x03
    1850:	2a 83       	std	Y+2, r18	; 0x02
    1852:	db c0       	rjmp	.+438    	; 0x1a0a <getChar+0x656>
		case 'N': return CHAR_N;
    1854:	82 e8       	ldi	r24, 0x82	; 130
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	9b 83       	std	Y+3, r25	; 0x03
    185a:	8a 83       	std	Y+2, r24	; 0x02
    185c:	d6 c0       	rjmp	.+428    	; 0x1a0a <getChar+0x656>
		case 'n': return CHAR_n;
    185e:	27 e8       	ldi	r18, 0x87	; 135
    1860:	31 e0       	ldi	r19, 0x01	; 1
    1862:	3b 83       	std	Y+3, r19	; 0x03
    1864:	2a 83       	std	Y+2, r18	; 0x02
    1866:	d1 c0       	rjmp	.+418    	; 0x1a0a <getChar+0x656>
		case 'O': return CHAR_O;
    1868:	8c e8       	ldi	r24, 0x8C	; 140
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	9b 83       	std	Y+3, r25	; 0x03
    186e:	8a 83       	std	Y+2, r24	; 0x02
    1870:	cc c0       	rjmp	.+408    	; 0x1a0a <getChar+0x656>
		case 'o': return CHAR_o;
    1872:	21 e9       	ldi	r18, 0x91	; 145
    1874:	31 e0       	ldi	r19, 0x01	; 1
    1876:	3b 83       	std	Y+3, r19	; 0x03
    1878:	2a 83       	std	Y+2, r18	; 0x02
    187a:	c7 c0       	rjmp	.+398    	; 0x1a0a <getChar+0x656>
		case 'P': return CHAR_P;
    187c:	86 e9       	ldi	r24, 0x96	; 150
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	9b 83       	std	Y+3, r25	; 0x03
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	c2 c0       	rjmp	.+388    	; 0x1a0a <getChar+0x656>
		case 'p': return CHAR_p;
    1886:	2b e9       	ldi	r18, 0x9B	; 155
    1888:	31 e0       	ldi	r19, 0x01	; 1
    188a:	3b 83       	std	Y+3, r19	; 0x03
    188c:	2a 83       	std	Y+2, r18	; 0x02
    188e:	bd c0       	rjmp	.+378    	; 0x1a0a <getChar+0x656>
		case 'Q': return CHAR_Q;
    1890:	80 ea       	ldi	r24, 0xA0	; 160
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	9b 83       	std	Y+3, r25	; 0x03
    1896:	8a 83       	std	Y+2, r24	; 0x02
    1898:	b8 c0       	rjmp	.+368    	; 0x1a0a <getChar+0x656>
		case 'q': return CHAR_q;
    189a:	25 ea       	ldi	r18, 0xA5	; 165
    189c:	31 e0       	ldi	r19, 0x01	; 1
    189e:	3b 83       	std	Y+3, r19	; 0x03
    18a0:	2a 83       	std	Y+2, r18	; 0x02
    18a2:	b3 c0       	rjmp	.+358    	; 0x1a0a <getChar+0x656>
		case 'R': return CHAR_R;
    18a4:	8a ea       	ldi	r24, 0xAA	; 170
    18a6:	91 e0       	ldi	r25, 0x01	; 1
    18a8:	9b 83       	std	Y+3, r25	; 0x03
    18aa:	8a 83       	std	Y+2, r24	; 0x02
    18ac:	ae c0       	rjmp	.+348    	; 0x1a0a <getChar+0x656>
		case 'r': return CHAR_r;
    18ae:	2f ea       	ldi	r18, 0xAF	; 175
    18b0:	31 e0       	ldi	r19, 0x01	; 1
    18b2:	3b 83       	std	Y+3, r19	; 0x03
    18b4:	2a 83       	std	Y+2, r18	; 0x02
    18b6:	a9 c0       	rjmp	.+338    	; 0x1a0a <getChar+0x656>
		case 'S': return CHAR_S;
    18b8:	84 eb       	ldi	r24, 0xB4	; 180
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	9b 83       	std	Y+3, r25	; 0x03
    18be:	8a 83       	std	Y+2, r24	; 0x02
    18c0:	a4 c0       	rjmp	.+328    	; 0x1a0a <getChar+0x656>
		case 's': return CHAR_s;
    18c2:	29 eb       	ldi	r18, 0xB9	; 185
    18c4:	31 e0       	ldi	r19, 0x01	; 1
    18c6:	3b 83       	std	Y+3, r19	; 0x03
    18c8:	2a 83       	std	Y+2, r18	; 0x02
    18ca:	9f c0       	rjmp	.+318    	; 0x1a0a <getChar+0x656>
		case 'T': return CHAR_T;
    18cc:	8e eb       	ldi	r24, 0xBE	; 190
    18ce:	91 e0       	ldi	r25, 0x01	; 1
    18d0:	9b 83       	std	Y+3, r25	; 0x03
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	9a c0       	rjmp	.+308    	; 0x1a0a <getChar+0x656>
		case 't': return CHAR_t;
    18d6:	23 ec       	ldi	r18, 0xC3	; 195
    18d8:	31 e0       	ldi	r19, 0x01	; 1
    18da:	3b 83       	std	Y+3, r19	; 0x03
    18dc:	2a 83       	std	Y+2, r18	; 0x02
    18de:	95 c0       	rjmp	.+298    	; 0x1a0a <getChar+0x656>
		case 'U': return CHAR_U;
    18e0:	88 ec       	ldi	r24, 0xC8	; 200
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	9b 83       	std	Y+3, r25	; 0x03
    18e6:	8a 83       	std	Y+2, r24	; 0x02
    18e8:	90 c0       	rjmp	.+288    	; 0x1a0a <getChar+0x656>
		case 'u': return CHAR_u;
    18ea:	2d ec       	ldi	r18, 0xCD	; 205
    18ec:	31 e0       	ldi	r19, 0x01	; 1
    18ee:	3b 83       	std	Y+3, r19	; 0x03
    18f0:	2a 83       	std	Y+2, r18	; 0x02
    18f2:	8b c0       	rjmp	.+278    	; 0x1a0a <getChar+0x656>
		case 'V': return CHAR_V;
    18f4:	82 ed       	ldi	r24, 0xD2	; 210
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	9b 83       	std	Y+3, r25	; 0x03
    18fa:	8a 83       	std	Y+2, r24	; 0x02
    18fc:	86 c0       	rjmp	.+268    	; 0x1a0a <getChar+0x656>
		case 'v': return CHAR_v;
    18fe:	27 ed       	ldi	r18, 0xD7	; 215
    1900:	31 e0       	ldi	r19, 0x01	; 1
    1902:	3b 83       	std	Y+3, r19	; 0x03
    1904:	2a 83       	std	Y+2, r18	; 0x02
    1906:	81 c0       	rjmp	.+258    	; 0x1a0a <getChar+0x656>
		case 'W': return CHAR_W;
    1908:	8c ed       	ldi	r24, 0xDC	; 220
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	9b 83       	std	Y+3, r25	; 0x03
    190e:	8a 83       	std	Y+2, r24	; 0x02
    1910:	7c c0       	rjmp	.+248    	; 0x1a0a <getChar+0x656>
		case 'w': return CHAR_w;
    1912:	21 ee       	ldi	r18, 0xE1	; 225
    1914:	31 e0       	ldi	r19, 0x01	; 1
    1916:	3b 83       	std	Y+3, r19	; 0x03
    1918:	2a 83       	std	Y+2, r18	; 0x02
    191a:	77 c0       	rjmp	.+238    	; 0x1a0a <getChar+0x656>
		case 'X': return CHAR_X;
    191c:	86 ee       	ldi	r24, 0xE6	; 230
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	9b 83       	std	Y+3, r25	; 0x03
    1922:	8a 83       	std	Y+2, r24	; 0x02
    1924:	72 c0       	rjmp	.+228    	; 0x1a0a <getChar+0x656>
		case 'x': return CHAR_x;
    1926:	2b ee       	ldi	r18, 0xEB	; 235
    1928:	31 e0       	ldi	r19, 0x01	; 1
    192a:	3b 83       	std	Y+3, r19	; 0x03
    192c:	2a 83       	std	Y+2, r18	; 0x02
    192e:	6d c0       	rjmp	.+218    	; 0x1a0a <getChar+0x656>
		case 'Y': return CHAR_Y;
    1930:	80 ef       	ldi	r24, 0xF0	; 240
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	9b 83       	std	Y+3, r25	; 0x03
    1936:	8a 83       	std	Y+2, r24	; 0x02
    1938:	68 c0       	rjmp	.+208    	; 0x1a0a <getChar+0x656>
		case 'y': return CHAR_y;
    193a:	25 ef       	ldi	r18, 0xF5	; 245
    193c:	31 e0       	ldi	r19, 0x01	; 1
    193e:	3b 83       	std	Y+3, r19	; 0x03
    1940:	2a 83       	std	Y+2, r18	; 0x02
    1942:	63 c0       	rjmp	.+198    	; 0x1a0a <getChar+0x656>
		case 'Z': return CHAR_Z;
    1944:	8a ef       	ldi	r24, 0xFA	; 250
    1946:	91 e0       	ldi	r25, 0x01	; 1
    1948:	9b 83       	std	Y+3, r25	; 0x03
    194a:	8a 83       	std	Y+2, r24	; 0x02
    194c:	5e c0       	rjmp	.+188    	; 0x1a0a <getChar+0x656>
		case 'z': return CHAR_z;
    194e:	2f ef       	ldi	r18, 0xFF	; 255
    1950:	31 e0       	ldi	r19, 0x01	; 1
    1952:	3b 83       	std	Y+3, r19	; 0x03
    1954:	2a 83       	std	Y+2, r18	; 0x02
    1956:	59 c0       	rjmp	.+178    	; 0x1a0a <getChar+0x656>

		case '0': return CHAR_0;
    1958:	84 e0       	ldi	r24, 0x04	; 4
    195a:	92 e0       	ldi	r25, 0x02	; 2
    195c:	9b 83       	std	Y+3, r25	; 0x03
    195e:	8a 83       	std	Y+2, r24	; 0x02
    1960:	54 c0       	rjmp	.+168    	; 0x1a0a <getChar+0x656>
		case '1': return CHAR_1;
    1962:	29 e0       	ldi	r18, 0x09	; 9
    1964:	32 e0       	ldi	r19, 0x02	; 2
    1966:	3b 83       	std	Y+3, r19	; 0x03
    1968:	2a 83       	std	Y+2, r18	; 0x02
    196a:	4f c0       	rjmp	.+158    	; 0x1a0a <getChar+0x656>
		case '2': return CHAR_2;
    196c:	8e e0       	ldi	r24, 0x0E	; 14
    196e:	92 e0       	ldi	r25, 0x02	; 2
    1970:	9b 83       	std	Y+3, r25	; 0x03
    1972:	8a 83       	std	Y+2, r24	; 0x02
    1974:	4a c0       	rjmp	.+148    	; 0x1a0a <getChar+0x656>
		case '3': return CHAR_3;
    1976:	23 e1       	ldi	r18, 0x13	; 19
    1978:	32 e0       	ldi	r19, 0x02	; 2
    197a:	3b 83       	std	Y+3, r19	; 0x03
    197c:	2a 83       	std	Y+2, r18	; 0x02
    197e:	45 c0       	rjmp	.+138    	; 0x1a0a <getChar+0x656>
		case '4': return CHAR_4;
    1980:	88 e1       	ldi	r24, 0x18	; 24
    1982:	92 e0       	ldi	r25, 0x02	; 2
    1984:	9b 83       	std	Y+3, r25	; 0x03
    1986:	8a 83       	std	Y+2, r24	; 0x02
    1988:	40 c0       	rjmp	.+128    	; 0x1a0a <getChar+0x656>
		case '5': return CHAR_5;
    198a:	2d e1       	ldi	r18, 0x1D	; 29
    198c:	32 e0       	ldi	r19, 0x02	; 2
    198e:	3b 83       	std	Y+3, r19	; 0x03
    1990:	2a 83       	std	Y+2, r18	; 0x02
    1992:	3b c0       	rjmp	.+118    	; 0x1a0a <getChar+0x656>
		case '6': return CHAR_6;
    1994:	82 e2       	ldi	r24, 0x22	; 34
    1996:	92 e0       	ldi	r25, 0x02	; 2
    1998:	9b 83       	std	Y+3, r25	; 0x03
    199a:	8a 83       	std	Y+2, r24	; 0x02
    199c:	36 c0       	rjmp	.+108    	; 0x1a0a <getChar+0x656>
		case '7': return CHAR_7;
    199e:	27 e2       	ldi	r18, 0x27	; 39
    19a0:	32 e0       	ldi	r19, 0x02	; 2
    19a2:	3b 83       	std	Y+3, r19	; 0x03
    19a4:	2a 83       	std	Y+2, r18	; 0x02
    19a6:	31 c0       	rjmp	.+98     	; 0x1a0a <getChar+0x656>
		case '8': return CHAR_8;
    19a8:	8c e2       	ldi	r24, 0x2C	; 44
    19aa:	92 e0       	ldi	r25, 0x02	; 2
    19ac:	9b 83       	std	Y+3, r25	; 0x03
    19ae:	8a 83       	std	Y+2, r24	; 0x02
    19b0:	2c c0       	rjmp	.+88     	; 0x1a0a <getChar+0x656>
		case '9': return CHAR_9;
    19b2:	21 e3       	ldi	r18, 0x31	; 49
    19b4:	32 e0       	ldi	r19, 0x02	; 2
    19b6:	3b 83       	std	Y+3, r19	; 0x03
    19b8:	2a 83       	std	Y+2, r18	; 0x02
    19ba:	27 c0       	rjmp	.+78     	; 0x1a0a <getChar+0x656>

		case '.': return CHAR_DOT;
    19bc:	86 e3       	ldi	r24, 0x36	; 54
    19be:	92 e0       	ldi	r25, 0x02	; 2
    19c0:	9b 83       	std	Y+3, r25	; 0x03
    19c2:	8a 83       	std	Y+2, r24	; 0x02
    19c4:	22 c0       	rjmp	.+68     	; 0x1a0a <getChar+0x656>
		case ',': return CHAR_COMMA;
    19c6:	2b e3       	ldi	r18, 0x3B	; 59
    19c8:	32 e0       	ldi	r19, 0x02	; 2
    19ca:	3b 83       	std	Y+3, r19	; 0x03
    19cc:	2a 83       	std	Y+2, r18	; 0x02
    19ce:	1d c0       	rjmp	.+58     	; 0x1a0a <getChar+0x656>
		case '-': return CHAR_DASH;
    19d0:	80 e4       	ldi	r24, 0x40	; 64
    19d2:	92 e0       	ldi	r25, 0x02	; 2
    19d4:	9b 83       	std	Y+3, r25	; 0x03
    19d6:	8a 83       	std	Y+2, r24	; 0x02
    19d8:	18 c0       	rjmp	.+48     	; 0x1a0a <getChar+0x656>
		case '"': return CHAR_CITATION;
    19da:	25 e4       	ldi	r18, 0x45	; 69
    19dc:	32 e0       	ldi	r19, 0x02	; 2
    19de:	3b 83       	std	Y+3, r19	; 0x03
    19e0:	2a 83       	std	Y+2, r18	; 0x02
    19e2:	13 c0       	rjmp	.+38     	; 0x1a0a <getChar+0x656>
		case '!': return CHAR_EXCLAMATION;
    19e4:	8f e4       	ldi	r24, 0x4F	; 79
    19e6:	92 e0       	ldi	r25, 0x02	; 2
    19e8:	9b 83       	std	Y+3, r25	; 0x03
    19ea:	8a 83       	std	Y+2, r24	; 0x02
    19ec:	0e c0       	rjmp	.+28     	; 0x1a0a <getChar+0x656>
		case '?': return CHAR_QUESTION;
    19ee:	24 e5       	ldi	r18, 0x54	; 84
    19f0:	32 e0       	ldi	r19, 0x02	; 2
    19f2:	3b 83       	std	Y+3, r19	; 0x03
    19f4:	2a 83       	std	Y+2, r18	; 0x02
    19f6:	09 c0       	rjmp	.+18     	; 0x1a0a <getChar+0x656>
		case ':': return CHAR_COLON;
    19f8:	89 e5       	ldi	r24, 0x59	; 89
    19fa:	92 e0       	ldi	r25, 0x02	; 2
    19fc:	9b 83       	std	Y+3, r25	; 0x03
    19fe:	8a 83       	std	Y+2, r24	; 0x02
    1a00:	04 c0       	rjmp	.+8      	; 0x1a0a <getChar+0x656>
		default: return CHAR_SPACE;
    1a02:	27 e6       	ldi	r18, 0x67	; 103
    1a04:	32 e0       	ldi	r19, 0x02	; 2
    1a06:	3b 83       	std	Y+3, r19	; 0x03
    1a08:	2a 83       	std	Y+2, r18	; 0x02
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <flip>:

void flip(unsigned char* c1, unsigned char* c2)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <flip+0x6>
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <flip+0x8>
    1a26:	0f 92       	push	r0
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	9b 83       	std	Y+3, r25	; 0x03
    1a2e:	8a 83       	std	Y+2, r24	; 0x02
    1a30:	7d 83       	std	Y+5, r23	; 0x05
    1a32:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char temp = *c1;
    1a34:	ea 81       	ldd	r30, Y+2	; 0x02
    1a36:	fb 81       	ldd	r31, Y+3	; 0x03
    1a38:	80 81       	ld	r24, Z
    1a3a:	89 83       	std	Y+1, r24	; 0x01
	*c1 = *c2;
    1a3c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a3e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a40:	80 81       	ld	r24, Z
    1a42:	ea 81       	ldd	r30, Y+2	; 0x02
    1a44:	fb 81       	ldd	r31, Y+3	; 0x03
    1a46:	80 83       	st	Z, r24
	*c2 = temp;
    1a48:	ec 81       	ldd	r30, Y+4	; 0x04
    1a4a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	80 83       	st	Z, r24
	temp = 0;
    1a50:	19 82       	std	Y+1, r1	; 0x01
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <__fixunssfsi>:
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	7b 01       	movw	r14, r22
    1a6c:	8c 01       	movw	r16, r24
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	5f e4       	ldi	r21, 0x4F	; 79
    1a76:	0e 94 31 10 	call	0x2062	; 0x2062 <__gesf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	8c f0       	brlt	.+34     	; 0x1aa0 <__fixunssfsi+0x3e>
    1a7e:	c8 01       	movw	r24, r16
    1a80:	b7 01       	movw	r22, r14
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	5f e4       	ldi	r21, 0x4F	; 79
    1a8a:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__subsf3>
    1a8e:	0e 94 91 10 	call	0x2122	; 0x2122 <__fixsfsi>
    1a92:	9b 01       	movw	r18, r22
    1a94:	ac 01       	movw	r20, r24
    1a96:	20 50       	subi	r18, 0x00	; 0
    1a98:	30 40       	sbci	r19, 0x00	; 0
    1a9a:	40 40       	sbci	r20, 0x00	; 0
    1a9c:	50 48       	sbci	r21, 0x80	; 128
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <__fixunssfsi+0x4a>
    1aa0:	c8 01       	movw	r24, r16
    1aa2:	b7 01       	movw	r22, r14
    1aa4:	0e 94 91 10 	call	0x2122	; 0x2122 <__fixsfsi>
    1aa8:	9b 01       	movw	r18, r22
    1aaa:	ac 01       	movw	r20, r24
    1aac:	b9 01       	movw	r22, r18
    1aae:	ca 01       	movw	r24, r20
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	08 95       	ret

00001aba <_fpadd_parts>:
    1aba:	a0 e0       	ldi	r26, 0x00	; 0
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e3 e6       	ldi	r30, 0x63	; 99
    1ac0:	fd e0       	ldi	r31, 0x0D	; 13
    1ac2:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	2b 01       	movw	r4, r22
    1aca:	fa 01       	movw	r30, r20
    1acc:	9c 91       	ld	r25, X
    1ace:	92 30       	cpi	r25, 0x02	; 2
    1ad0:	08 f4       	brcc	.+2      	; 0x1ad4 <_fpadd_parts+0x1a>
    1ad2:	39 c1       	rjmp	.+626    	; 0x1d46 <_fpadd_parts+0x28c>
    1ad4:	eb 01       	movw	r28, r22
    1ad6:	88 81       	ld	r24, Y
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	08 f4       	brcc	.+2      	; 0x1ade <_fpadd_parts+0x24>
    1adc:	33 c1       	rjmp	.+614    	; 0x1d44 <_fpadd_parts+0x28a>
    1ade:	94 30       	cpi	r25, 0x04	; 4
    1ae0:	69 f4       	brne	.+26     	; 0x1afc <_fpadd_parts+0x42>
    1ae2:	84 30       	cpi	r24, 0x04	; 4
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <_fpadd_parts+0x2e>
    1ae6:	2f c1       	rjmp	.+606    	; 0x1d46 <_fpadd_parts+0x28c>
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	9c 91       	ld	r25, X
    1aec:	11 97       	sbiw	r26, 0x01	; 1
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	98 17       	cp	r25, r24
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <_fpadd_parts+0x3c>
    1af4:	28 c1       	rjmp	.+592    	; 0x1d46 <_fpadd_parts+0x28c>
    1af6:	ae e5       	ldi	r26, 0x5E	; 94
    1af8:	b2 e0       	ldi	r27, 0x02	; 2
    1afa:	25 c1       	rjmp	.+586    	; 0x1d46 <_fpadd_parts+0x28c>
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <_fpadd_parts+0x48>
    1b00:	21 c1       	rjmp	.+578    	; 0x1d44 <_fpadd_parts+0x28a>
    1b02:	82 30       	cpi	r24, 0x02	; 2
    1b04:	a9 f4       	brne	.+42     	; 0x1b30 <_fpadd_parts+0x76>
    1b06:	92 30       	cpi	r25, 0x02	; 2
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <_fpadd_parts+0x52>
    1b0a:	1d c1       	rjmp	.+570    	; 0x1d46 <_fpadd_parts+0x28c>
    1b0c:	9a 01       	movw	r18, r20
    1b0e:	ad 01       	movw	r20, r26
    1b10:	88 e0       	ldi	r24, 0x08	; 8
    1b12:	ea 01       	movw	r28, r20
    1b14:	09 90       	ld	r0, Y+
    1b16:	ae 01       	movw	r20, r28
    1b18:	e9 01       	movw	r28, r18
    1b1a:	09 92       	st	Y+, r0
    1b1c:	9e 01       	movw	r18, r28
    1b1e:	81 50       	subi	r24, 0x01	; 1
    1b20:	c1 f7       	brne	.-16     	; 0x1b12 <_fpadd_parts+0x58>
    1b22:	e2 01       	movw	r28, r4
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	11 96       	adiw	r26, 0x01	; 1
    1b28:	9c 91       	ld	r25, X
    1b2a:	89 23       	and	r24, r25
    1b2c:	81 83       	std	Z+1, r24	; 0x01
    1b2e:	08 c1       	rjmp	.+528    	; 0x1d40 <_fpadd_parts+0x286>
    1b30:	92 30       	cpi	r25, 0x02	; 2
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <_fpadd_parts+0x7c>
    1b34:	07 c1       	rjmp	.+526    	; 0x1d44 <_fpadd_parts+0x28a>
    1b36:	12 96       	adiw	r26, 0x02	; 2
    1b38:	2d 90       	ld	r2, X+
    1b3a:	3c 90       	ld	r3, X
    1b3c:	13 97       	sbiw	r26, 0x03	; 3
    1b3e:	eb 01       	movw	r28, r22
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	9b 81       	ldd	r25, Y+3	; 0x03
    1b44:	14 96       	adiw	r26, 0x04	; 4
    1b46:	ad 90       	ld	r10, X+
    1b48:	bd 90       	ld	r11, X+
    1b4a:	cd 90       	ld	r12, X+
    1b4c:	dc 90       	ld	r13, X
    1b4e:	17 97       	sbiw	r26, 0x07	; 7
    1b50:	ec 80       	ldd	r14, Y+4	; 0x04
    1b52:	fd 80       	ldd	r15, Y+5	; 0x05
    1b54:	0e 81       	ldd	r16, Y+6	; 0x06
    1b56:	1f 81       	ldd	r17, Y+7	; 0x07
    1b58:	91 01       	movw	r18, r2
    1b5a:	28 1b       	sub	r18, r24
    1b5c:	39 0b       	sbc	r19, r25
    1b5e:	b9 01       	movw	r22, r18
    1b60:	37 ff       	sbrs	r19, 7
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <_fpadd_parts+0xb2>
    1b64:	66 27       	eor	r22, r22
    1b66:	77 27       	eor	r23, r23
    1b68:	62 1b       	sub	r22, r18
    1b6a:	73 0b       	sbc	r23, r19
    1b6c:	60 32       	cpi	r22, 0x20	; 32
    1b6e:	71 05       	cpc	r23, r1
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <_fpadd_parts+0xba>
    1b72:	61 c0       	rjmp	.+194    	; 0x1c36 <_fpadd_parts+0x17c>
    1b74:	12 16       	cp	r1, r18
    1b76:	13 06       	cpc	r1, r19
    1b78:	6c f5       	brge	.+90     	; 0x1bd4 <_fpadd_parts+0x11a>
    1b7a:	37 01       	movw	r6, r14
    1b7c:	48 01       	movw	r8, r16
    1b7e:	06 2e       	mov	r0, r22
    1b80:	04 c0       	rjmp	.+8      	; 0x1b8a <_fpadd_parts+0xd0>
    1b82:	96 94       	lsr	r9
    1b84:	87 94       	ror	r8
    1b86:	77 94       	ror	r7
    1b88:	67 94       	ror	r6
    1b8a:	0a 94       	dec	r0
    1b8c:	d2 f7       	brpl	.-12     	; 0x1b82 <_fpadd_parts+0xc8>
    1b8e:	21 e0       	ldi	r18, 0x01	; 1
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <_fpadd_parts+0xe6>
    1b98:	22 0f       	add	r18, r18
    1b9a:	33 1f       	adc	r19, r19
    1b9c:	44 1f       	adc	r20, r20
    1b9e:	55 1f       	adc	r21, r21
    1ba0:	6a 95       	dec	r22
    1ba2:	d2 f7       	brpl	.-12     	; 0x1b98 <_fpadd_parts+0xde>
    1ba4:	21 50       	subi	r18, 0x01	; 1
    1ba6:	30 40       	sbci	r19, 0x00	; 0
    1ba8:	40 40       	sbci	r20, 0x00	; 0
    1baa:	50 40       	sbci	r21, 0x00	; 0
    1bac:	2e 21       	and	r18, r14
    1bae:	3f 21       	and	r19, r15
    1bb0:	40 23       	and	r20, r16
    1bb2:	51 23       	and	r21, r17
    1bb4:	21 15       	cp	r18, r1
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	41 05       	cpc	r20, r1
    1bba:	51 05       	cpc	r21, r1
    1bbc:	21 f0       	breq	.+8      	; 0x1bc6 <_fpadd_parts+0x10c>
    1bbe:	21 e0       	ldi	r18, 0x01	; 1
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	79 01       	movw	r14, r18
    1bc8:	8a 01       	movw	r16, r20
    1bca:	e6 28       	or	r14, r6
    1bcc:	f7 28       	or	r15, r7
    1bce:	08 29       	or	r16, r8
    1bd0:	19 29       	or	r17, r9
    1bd2:	3c c0       	rjmp	.+120    	; 0x1c4c <_fpadd_parts+0x192>
    1bd4:	23 2b       	or	r18, r19
    1bd6:	d1 f1       	breq	.+116    	; 0x1c4c <_fpadd_parts+0x192>
    1bd8:	26 0e       	add	r2, r22
    1bda:	37 1e       	adc	r3, r23
    1bdc:	35 01       	movw	r6, r10
    1bde:	46 01       	movw	r8, r12
    1be0:	06 2e       	mov	r0, r22
    1be2:	04 c0       	rjmp	.+8      	; 0x1bec <_fpadd_parts+0x132>
    1be4:	96 94       	lsr	r9
    1be6:	87 94       	ror	r8
    1be8:	77 94       	ror	r7
    1bea:	67 94       	ror	r6
    1bec:	0a 94       	dec	r0
    1bee:	d2 f7       	brpl	.-12     	; 0x1be4 <_fpadd_parts+0x12a>
    1bf0:	21 e0       	ldi	r18, 0x01	; 1
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	04 c0       	rjmp	.+8      	; 0x1c02 <_fpadd_parts+0x148>
    1bfa:	22 0f       	add	r18, r18
    1bfc:	33 1f       	adc	r19, r19
    1bfe:	44 1f       	adc	r20, r20
    1c00:	55 1f       	adc	r21, r21
    1c02:	6a 95       	dec	r22
    1c04:	d2 f7       	brpl	.-12     	; 0x1bfa <_fpadd_parts+0x140>
    1c06:	21 50       	subi	r18, 0x01	; 1
    1c08:	30 40       	sbci	r19, 0x00	; 0
    1c0a:	40 40       	sbci	r20, 0x00	; 0
    1c0c:	50 40       	sbci	r21, 0x00	; 0
    1c0e:	2a 21       	and	r18, r10
    1c10:	3b 21       	and	r19, r11
    1c12:	4c 21       	and	r20, r12
    1c14:	5d 21       	and	r21, r13
    1c16:	21 15       	cp	r18, r1
    1c18:	31 05       	cpc	r19, r1
    1c1a:	41 05       	cpc	r20, r1
    1c1c:	51 05       	cpc	r21, r1
    1c1e:	21 f0       	breq	.+8      	; 0x1c28 <_fpadd_parts+0x16e>
    1c20:	21 e0       	ldi	r18, 0x01	; 1
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	59 01       	movw	r10, r18
    1c2a:	6a 01       	movw	r12, r20
    1c2c:	a6 28       	or	r10, r6
    1c2e:	b7 28       	or	r11, r7
    1c30:	c8 28       	or	r12, r8
    1c32:	d9 28       	or	r13, r9
    1c34:	0b c0       	rjmp	.+22     	; 0x1c4c <_fpadd_parts+0x192>
    1c36:	82 15       	cp	r24, r2
    1c38:	93 05       	cpc	r25, r3
    1c3a:	2c f0       	brlt	.+10     	; 0x1c46 <_fpadd_parts+0x18c>
    1c3c:	1c 01       	movw	r2, r24
    1c3e:	aa 24       	eor	r10, r10
    1c40:	bb 24       	eor	r11, r11
    1c42:	65 01       	movw	r12, r10
    1c44:	03 c0       	rjmp	.+6      	; 0x1c4c <_fpadd_parts+0x192>
    1c46:	ee 24       	eor	r14, r14
    1c48:	ff 24       	eor	r15, r15
    1c4a:	87 01       	movw	r16, r14
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	9c 91       	ld	r25, X
    1c50:	d2 01       	movw	r26, r4
    1c52:	11 96       	adiw	r26, 0x01	; 1
    1c54:	8c 91       	ld	r24, X
    1c56:	98 17       	cp	r25, r24
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <_fpadd_parts+0x1a2>
    1c5a:	45 c0       	rjmp	.+138    	; 0x1ce6 <_fpadd_parts+0x22c>
    1c5c:	99 23       	and	r25, r25
    1c5e:	39 f0       	breq	.+14     	; 0x1c6e <_fpadd_parts+0x1b4>
    1c60:	a8 01       	movw	r20, r16
    1c62:	97 01       	movw	r18, r14
    1c64:	2a 19       	sub	r18, r10
    1c66:	3b 09       	sbc	r19, r11
    1c68:	4c 09       	sbc	r20, r12
    1c6a:	5d 09       	sbc	r21, r13
    1c6c:	06 c0       	rjmp	.+12     	; 0x1c7a <_fpadd_parts+0x1c0>
    1c6e:	a6 01       	movw	r20, r12
    1c70:	95 01       	movw	r18, r10
    1c72:	2e 19       	sub	r18, r14
    1c74:	3f 09       	sbc	r19, r15
    1c76:	40 0b       	sbc	r20, r16
    1c78:	51 0b       	sbc	r21, r17
    1c7a:	57 fd       	sbrc	r21, 7
    1c7c:	08 c0       	rjmp	.+16     	; 0x1c8e <_fpadd_parts+0x1d4>
    1c7e:	11 82       	std	Z+1, r1	; 0x01
    1c80:	33 82       	std	Z+3, r3	; 0x03
    1c82:	22 82       	std	Z+2, r2	; 0x02
    1c84:	24 83       	std	Z+4, r18	; 0x04
    1c86:	35 83       	std	Z+5, r19	; 0x05
    1c88:	46 83       	std	Z+6, r20	; 0x06
    1c8a:	57 83       	std	Z+7, r21	; 0x07
    1c8c:	1d c0       	rjmp	.+58     	; 0x1cc8 <_fpadd_parts+0x20e>
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	81 83       	std	Z+1, r24	; 0x01
    1c92:	33 82       	std	Z+3, r3	; 0x03
    1c94:	22 82       	std	Z+2, r2	; 0x02
    1c96:	88 27       	eor	r24, r24
    1c98:	99 27       	eor	r25, r25
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	82 1b       	sub	r24, r18
    1c9e:	93 0b       	sbc	r25, r19
    1ca0:	a4 0b       	sbc	r26, r20
    1ca2:	b5 0b       	sbc	r27, r21
    1ca4:	84 83       	std	Z+4, r24	; 0x04
    1ca6:	95 83       	std	Z+5, r25	; 0x05
    1ca8:	a6 83       	std	Z+6, r26	; 0x06
    1caa:	b7 83       	std	Z+7, r27	; 0x07
    1cac:	0d c0       	rjmp	.+26     	; 0x1cc8 <_fpadd_parts+0x20e>
    1cae:	22 0f       	add	r18, r18
    1cb0:	33 1f       	adc	r19, r19
    1cb2:	44 1f       	adc	r20, r20
    1cb4:	55 1f       	adc	r21, r21
    1cb6:	24 83       	std	Z+4, r18	; 0x04
    1cb8:	35 83       	std	Z+5, r19	; 0x05
    1cba:	46 83       	std	Z+6, r20	; 0x06
    1cbc:	57 83       	std	Z+7, r21	; 0x07
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	93 83       	std	Z+3, r25	; 0x03
    1cc6:	82 83       	std	Z+2, r24	; 0x02
    1cc8:	24 81       	ldd	r18, Z+4	; 0x04
    1cca:	35 81       	ldd	r19, Z+5	; 0x05
    1ccc:	46 81       	ldd	r20, Z+6	; 0x06
    1cce:	57 81       	ldd	r21, Z+7	; 0x07
    1cd0:	da 01       	movw	r26, r20
    1cd2:	c9 01       	movw	r24, r18
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	a1 09       	sbc	r26, r1
    1cd8:	b1 09       	sbc	r27, r1
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	af 4f       	sbci	r26, 0xFF	; 255
    1ce0:	bf 43       	sbci	r27, 0x3F	; 63
    1ce2:	28 f3       	brcs	.-54     	; 0x1cae <_fpadd_parts+0x1f4>
    1ce4:	0b c0       	rjmp	.+22     	; 0x1cfc <_fpadd_parts+0x242>
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	33 82       	std	Z+3, r3	; 0x03
    1cea:	22 82       	std	Z+2, r2	; 0x02
    1cec:	ea 0c       	add	r14, r10
    1cee:	fb 1c       	adc	r15, r11
    1cf0:	0c 1d       	adc	r16, r12
    1cf2:	1d 1d       	adc	r17, r13
    1cf4:	e4 82       	std	Z+4, r14	; 0x04
    1cf6:	f5 82       	std	Z+5, r15	; 0x05
    1cf8:	06 83       	std	Z+6, r16	; 0x06
    1cfa:	17 83       	std	Z+7, r17	; 0x07
    1cfc:	83 e0       	ldi	r24, 0x03	; 3
    1cfe:	80 83       	st	Z, r24
    1d00:	24 81       	ldd	r18, Z+4	; 0x04
    1d02:	35 81       	ldd	r19, Z+5	; 0x05
    1d04:	46 81       	ldd	r20, Z+6	; 0x06
    1d06:	57 81       	ldd	r21, Z+7	; 0x07
    1d08:	57 ff       	sbrs	r21, 7
    1d0a:	1a c0       	rjmp	.+52     	; 0x1d40 <_fpadd_parts+0x286>
    1d0c:	c9 01       	movw	r24, r18
    1d0e:	aa 27       	eor	r26, r26
    1d10:	97 fd       	sbrc	r25, 7
    1d12:	a0 95       	com	r26
    1d14:	ba 2f       	mov	r27, r26
    1d16:	81 70       	andi	r24, 0x01	; 1
    1d18:	90 70       	andi	r25, 0x00	; 0
    1d1a:	a0 70       	andi	r26, 0x00	; 0
    1d1c:	b0 70       	andi	r27, 0x00	; 0
    1d1e:	56 95       	lsr	r21
    1d20:	47 95       	ror	r20
    1d22:	37 95       	ror	r19
    1d24:	27 95       	ror	r18
    1d26:	82 2b       	or	r24, r18
    1d28:	93 2b       	or	r25, r19
    1d2a:	a4 2b       	or	r26, r20
    1d2c:	b5 2b       	or	r27, r21
    1d2e:	84 83       	std	Z+4, r24	; 0x04
    1d30:	95 83       	std	Z+5, r25	; 0x05
    1d32:	a6 83       	std	Z+6, r26	; 0x06
    1d34:	b7 83       	std	Z+7, r27	; 0x07
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	93 83       	std	Z+3, r25	; 0x03
    1d3e:	82 83       	std	Z+2, r24	; 0x02
    1d40:	df 01       	movw	r26, r30
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <_fpadd_parts+0x28c>
    1d44:	d2 01       	movw	r26, r4
    1d46:	cd 01       	movw	r24, r26
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	e2 e1       	ldi	r30, 0x12	; 18
    1d4e:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__>

00001d52 <__subsf3>:
    1d52:	a0 e2       	ldi	r26, 0x20	; 32
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	ef ea       	ldi	r30, 0xAF	; 175
    1d58:	fe e0       	ldi	r31, 0x0E	; 14
    1d5a:	0c 94 97 12 	jmp	0x252e	; 0x252e <__prologue_saves__+0x18>
    1d5e:	69 83       	std	Y+1, r22	; 0x01
    1d60:	7a 83       	std	Y+2, r23	; 0x02
    1d62:	8b 83       	std	Y+3, r24	; 0x03
    1d64:	9c 83       	std	Y+4, r25	; 0x04
    1d66:	2d 83       	std	Y+5, r18	; 0x05
    1d68:	3e 83       	std	Y+6, r19	; 0x06
    1d6a:	4f 83       	std	Y+7, r20	; 0x07
    1d6c:	58 87       	std	Y+8, r21	; 0x08
    1d6e:	e9 e0       	ldi	r30, 0x09	; 9
    1d70:	ee 2e       	mov	r14, r30
    1d72:	f1 2c       	mov	r15, r1
    1d74:	ec 0e       	add	r14, r28
    1d76:	fd 1e       	adc	r15, r29
    1d78:	ce 01       	movw	r24, r28
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	b7 01       	movw	r22, r14
    1d7e:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    1d82:	8e 01       	movw	r16, r28
    1d84:	0f 5e       	subi	r16, 0xEF	; 239
    1d86:	1f 4f       	sbci	r17, 0xFF	; 255
    1d88:	ce 01       	movw	r24, r28
    1d8a:	05 96       	adiw	r24, 0x05	; 5
    1d8c:	b8 01       	movw	r22, r16
    1d8e:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    1d92:	8a 89       	ldd	r24, Y+18	; 0x12
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	89 27       	eor	r24, r25
    1d98:	8a 8b       	std	Y+18, r24	; 0x12
    1d9a:	c7 01       	movw	r24, r14
    1d9c:	b8 01       	movw	r22, r16
    1d9e:	ae 01       	movw	r20, r28
    1da0:	47 5e       	subi	r20, 0xE7	; 231
    1da2:	5f 4f       	sbci	r21, 0xFF	; 255
    1da4:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <_fpadd_parts>
    1da8:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__pack_f>
    1dac:	a0 96       	adiw	r28, 0x20	; 32
    1dae:	e6 e0       	ldi	r30, 0x06	; 6
    1db0:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__epilogue_restores__+0x18>

00001db4 <__addsf3>:
    1db4:	a0 e2       	ldi	r26, 0x20	; 32
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e0 ee       	ldi	r30, 0xE0	; 224
    1dba:	fe e0       	ldi	r31, 0x0E	; 14
    1dbc:	0c 94 97 12 	jmp	0x252e	; 0x252e <__prologue_saves__+0x18>
    1dc0:	69 83       	std	Y+1, r22	; 0x01
    1dc2:	7a 83       	std	Y+2, r23	; 0x02
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	2d 83       	std	Y+5, r18	; 0x05
    1dca:	3e 83       	std	Y+6, r19	; 0x06
    1dcc:	4f 83       	std	Y+7, r20	; 0x07
    1dce:	58 87       	std	Y+8, r21	; 0x08
    1dd0:	f9 e0       	ldi	r31, 0x09	; 9
    1dd2:	ef 2e       	mov	r14, r31
    1dd4:	f1 2c       	mov	r15, r1
    1dd6:	ec 0e       	add	r14, r28
    1dd8:	fd 1e       	adc	r15, r29
    1dda:	ce 01       	movw	r24, r28
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	b7 01       	movw	r22, r14
    1de0:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    1de4:	8e 01       	movw	r16, r28
    1de6:	0f 5e       	subi	r16, 0xEF	; 239
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	ce 01       	movw	r24, r28
    1dec:	05 96       	adiw	r24, 0x05	; 5
    1dee:	b8 01       	movw	r22, r16
    1df0:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    1df4:	c7 01       	movw	r24, r14
    1df6:	b8 01       	movw	r22, r16
    1df8:	ae 01       	movw	r20, r28
    1dfa:	47 5e       	subi	r20, 0xE7	; 231
    1dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfe:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <_fpadd_parts>
    1e02:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__pack_f>
    1e06:	a0 96       	adiw	r28, 0x20	; 32
    1e08:	e6 e0       	ldi	r30, 0x06	; 6
    1e0a:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__epilogue_restores__+0x18>

00001e0e <__mulsf3>:
    1e0e:	a0 e2       	ldi	r26, 0x20	; 32
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	ed e0       	ldi	r30, 0x0D	; 13
    1e14:	ff e0       	ldi	r31, 0x0F	; 15
    1e16:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__>
    1e1a:	69 83       	std	Y+1, r22	; 0x01
    1e1c:	7a 83       	std	Y+2, r23	; 0x02
    1e1e:	8b 83       	std	Y+3, r24	; 0x03
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	2d 83       	std	Y+5, r18	; 0x05
    1e24:	3e 83       	std	Y+6, r19	; 0x06
    1e26:	4f 83       	std	Y+7, r20	; 0x07
    1e28:	58 87       	std	Y+8, r21	; 0x08
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	01 96       	adiw	r24, 0x01	; 1
    1e2e:	be 01       	movw	r22, r28
    1e30:	67 5f       	subi	r22, 0xF7	; 247
    1e32:	7f 4f       	sbci	r23, 0xFF	; 255
    1e34:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    1e38:	ce 01       	movw	r24, r28
    1e3a:	05 96       	adiw	r24, 0x05	; 5
    1e3c:	be 01       	movw	r22, r28
    1e3e:	6f 5e       	subi	r22, 0xEF	; 239
    1e40:	7f 4f       	sbci	r23, 0xFF	; 255
    1e42:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    1e46:	99 85       	ldd	r25, Y+9	; 0x09
    1e48:	92 30       	cpi	r25, 0x02	; 2
    1e4a:	88 f0       	brcs	.+34     	; 0x1e6e <__mulsf3+0x60>
    1e4c:	89 89       	ldd	r24, Y+17	; 0x11
    1e4e:	82 30       	cpi	r24, 0x02	; 2
    1e50:	c8 f0       	brcs	.+50     	; 0x1e84 <__mulsf3+0x76>
    1e52:	94 30       	cpi	r25, 0x04	; 4
    1e54:	19 f4       	brne	.+6      	; 0x1e5c <__mulsf3+0x4e>
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	51 f4       	brne	.+20     	; 0x1e6e <__mulsf3+0x60>
    1e5a:	04 c0       	rjmp	.+8      	; 0x1e64 <__mulsf3+0x56>
    1e5c:	84 30       	cpi	r24, 0x04	; 4
    1e5e:	29 f4       	brne	.+10     	; 0x1e6a <__mulsf3+0x5c>
    1e60:	92 30       	cpi	r25, 0x02	; 2
    1e62:	81 f4       	brne	.+32     	; 0x1e84 <__mulsf3+0x76>
    1e64:	8e e5       	ldi	r24, 0x5E	; 94
    1e66:	92 e0       	ldi	r25, 0x02	; 2
    1e68:	c6 c0       	rjmp	.+396    	; 0x1ff6 <__mulsf3+0x1e8>
    1e6a:	92 30       	cpi	r25, 0x02	; 2
    1e6c:	49 f4       	brne	.+18     	; 0x1e80 <__mulsf3+0x72>
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	8a 89       	ldd	r24, Y+18	; 0x12
    1e74:	98 13       	cpse	r25, r24
    1e76:	21 e0       	ldi	r18, 0x01	; 1
    1e78:	2a 87       	std	Y+10, r18	; 0x0a
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	09 96       	adiw	r24, 0x09	; 9
    1e7e:	bb c0       	rjmp	.+374    	; 0x1ff6 <__mulsf3+0x1e8>
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	49 f4       	brne	.+18     	; 0x1e96 <__mulsf3+0x88>
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	8a 89       	ldd	r24, Y+18	; 0x12
    1e8a:	98 13       	cpse	r25, r24
    1e8c:	21 e0       	ldi	r18, 0x01	; 1
    1e8e:	2a 8b       	std	Y+18, r18	; 0x12
    1e90:	ce 01       	movw	r24, r28
    1e92:	41 96       	adiw	r24, 0x11	; 17
    1e94:	b0 c0       	rjmp	.+352    	; 0x1ff6 <__mulsf3+0x1e8>
    1e96:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e98:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e9a:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e9c:	58 88       	ldd	r5, Y+16	; 0x10
    1e9e:	6d 88       	ldd	r6, Y+21	; 0x15
    1ea0:	7e 88       	ldd	r7, Y+22	; 0x16
    1ea2:	8f 88       	ldd	r8, Y+23	; 0x17
    1ea4:	98 8c       	ldd	r9, Y+24	; 0x18
    1ea6:	ee 24       	eor	r14, r14
    1ea8:	ff 24       	eor	r15, r15
    1eaa:	87 01       	movw	r16, r14
    1eac:	aa 24       	eor	r10, r10
    1eae:	bb 24       	eor	r11, r11
    1eb0:	65 01       	movw	r12, r10
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	e0 e0       	ldi	r30, 0x00	; 0
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	c1 01       	movw	r24, r2
    1ec0:	81 70       	andi	r24, 0x01	; 1
    1ec2:	90 70       	andi	r25, 0x00	; 0
    1ec4:	89 2b       	or	r24, r25
    1ec6:	e9 f0       	breq	.+58     	; 0x1f02 <__mulsf3+0xf4>
    1ec8:	e6 0c       	add	r14, r6
    1eca:	f7 1c       	adc	r15, r7
    1ecc:	08 1d       	adc	r16, r8
    1ece:	19 1d       	adc	r17, r9
    1ed0:	9a 01       	movw	r18, r20
    1ed2:	ab 01       	movw	r20, r22
    1ed4:	2a 0d       	add	r18, r10
    1ed6:	3b 1d       	adc	r19, r11
    1ed8:	4c 1d       	adc	r20, r12
    1eda:	5d 1d       	adc	r21, r13
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a0 e0       	ldi	r26, 0x00	; 0
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e6 14       	cp	r14, r6
    1ee6:	f7 04       	cpc	r15, r7
    1ee8:	08 05       	cpc	r16, r8
    1eea:	19 05       	cpc	r17, r9
    1eec:	20 f4       	brcc	.+8      	; 0x1ef6 <__mulsf3+0xe8>
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a0 e0       	ldi	r26, 0x00	; 0
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	ba 01       	movw	r22, r20
    1ef8:	a9 01       	movw	r20, r18
    1efa:	48 0f       	add	r20, r24
    1efc:	59 1f       	adc	r21, r25
    1efe:	6a 1f       	adc	r22, r26
    1f00:	7b 1f       	adc	r23, r27
    1f02:	aa 0c       	add	r10, r10
    1f04:	bb 1c       	adc	r11, r11
    1f06:	cc 1c       	adc	r12, r12
    1f08:	dd 1c       	adc	r13, r13
    1f0a:	97 fe       	sbrs	r9, 7
    1f0c:	08 c0       	rjmp	.+16     	; 0x1f1e <__mulsf3+0x110>
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a0 e0       	ldi	r26, 0x00	; 0
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	a8 2a       	or	r10, r24
    1f18:	b9 2a       	or	r11, r25
    1f1a:	ca 2a       	or	r12, r26
    1f1c:	db 2a       	or	r13, r27
    1f1e:	31 96       	adiw	r30, 0x01	; 1
    1f20:	e0 32       	cpi	r30, 0x20	; 32
    1f22:	f1 05       	cpc	r31, r1
    1f24:	49 f0       	breq	.+18     	; 0x1f38 <__mulsf3+0x12a>
    1f26:	66 0c       	add	r6, r6
    1f28:	77 1c       	adc	r7, r7
    1f2a:	88 1c       	adc	r8, r8
    1f2c:	99 1c       	adc	r9, r9
    1f2e:	56 94       	lsr	r5
    1f30:	47 94       	ror	r4
    1f32:	37 94       	ror	r3
    1f34:	27 94       	ror	r2
    1f36:	c3 cf       	rjmp	.-122    	; 0x1ebe <__mulsf3+0xb0>
    1f38:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f3a:	ea 89       	ldd	r30, Y+18	; 0x12
    1f3c:	2b 89       	ldd	r18, Y+19	; 0x13
    1f3e:	3c 89       	ldd	r19, Y+20	; 0x14
    1f40:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f42:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f44:	28 0f       	add	r18, r24
    1f46:	39 1f       	adc	r19, r25
    1f48:	2e 5f       	subi	r18, 0xFE	; 254
    1f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4c:	17 c0       	rjmp	.+46     	; 0x1f7c <__mulsf3+0x16e>
    1f4e:	ca 01       	movw	r24, r20
    1f50:	81 70       	andi	r24, 0x01	; 1
    1f52:	90 70       	andi	r25, 0x00	; 0
    1f54:	89 2b       	or	r24, r25
    1f56:	61 f0       	breq	.+24     	; 0x1f70 <__mulsf3+0x162>
    1f58:	16 95       	lsr	r17
    1f5a:	07 95       	ror	r16
    1f5c:	f7 94       	ror	r15
    1f5e:	e7 94       	ror	r14
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e0       	ldi	r26, 0x00	; 0
    1f66:	b0 e8       	ldi	r27, 0x80	; 128
    1f68:	e8 2a       	or	r14, r24
    1f6a:	f9 2a       	or	r15, r25
    1f6c:	0a 2b       	or	r16, r26
    1f6e:	1b 2b       	or	r17, r27
    1f70:	76 95       	lsr	r23
    1f72:	67 95       	ror	r22
    1f74:	57 95       	ror	r21
    1f76:	47 95       	ror	r20
    1f78:	2f 5f       	subi	r18, 0xFF	; 255
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	77 fd       	sbrc	r23, 7
    1f7e:	e7 cf       	rjmp	.-50     	; 0x1f4e <__mulsf3+0x140>
    1f80:	0c c0       	rjmp	.+24     	; 0x1f9a <__mulsf3+0x18c>
    1f82:	44 0f       	add	r20, r20
    1f84:	55 1f       	adc	r21, r21
    1f86:	66 1f       	adc	r22, r22
    1f88:	77 1f       	adc	r23, r23
    1f8a:	17 fd       	sbrc	r17, 7
    1f8c:	41 60       	ori	r20, 0x01	; 1
    1f8e:	ee 0c       	add	r14, r14
    1f90:	ff 1c       	adc	r15, r15
    1f92:	00 1f       	adc	r16, r16
    1f94:	11 1f       	adc	r17, r17
    1f96:	21 50       	subi	r18, 0x01	; 1
    1f98:	30 40       	sbci	r19, 0x00	; 0
    1f9a:	40 30       	cpi	r20, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	59 07       	cpc	r21, r25
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	69 07       	cpc	r22, r25
    1fa4:	90 e4       	ldi	r25, 0x40	; 64
    1fa6:	79 07       	cpc	r23, r25
    1fa8:	60 f3       	brcs	.-40     	; 0x1f82 <__mulsf3+0x174>
    1faa:	2b 8f       	std	Y+27, r18	; 0x1b
    1fac:	3c 8f       	std	Y+28, r19	; 0x1c
    1fae:	db 01       	movw	r26, r22
    1fb0:	ca 01       	movw	r24, r20
    1fb2:	8f 77       	andi	r24, 0x7F	; 127
    1fb4:	90 70       	andi	r25, 0x00	; 0
    1fb6:	a0 70       	andi	r26, 0x00	; 0
    1fb8:	b0 70       	andi	r27, 0x00	; 0
    1fba:	80 34       	cpi	r24, 0x40	; 64
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	a1 05       	cpc	r26, r1
    1fc0:	b1 05       	cpc	r27, r1
    1fc2:	61 f4       	brne	.+24     	; 0x1fdc <__mulsf3+0x1ce>
    1fc4:	47 fd       	sbrc	r20, 7
    1fc6:	0a c0       	rjmp	.+20     	; 0x1fdc <__mulsf3+0x1ce>
    1fc8:	e1 14       	cp	r14, r1
    1fca:	f1 04       	cpc	r15, r1
    1fcc:	01 05       	cpc	r16, r1
    1fce:	11 05       	cpc	r17, r1
    1fd0:	29 f0       	breq	.+10     	; 0x1fdc <__mulsf3+0x1ce>
    1fd2:	40 5c       	subi	r20, 0xC0	; 192
    1fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd6:	6f 4f       	sbci	r22, 0xFF	; 255
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	40 78       	andi	r20, 0x80	; 128
    1fdc:	1a 8e       	std	Y+26, r1	; 0x1a
    1fde:	fe 17       	cp	r31, r30
    1fe0:	11 f0       	breq	.+4      	; 0x1fe6 <__mulsf3+0x1d8>
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe6:	4d 8f       	std	Y+29, r20	; 0x1d
    1fe8:	5e 8f       	std	Y+30, r21	; 0x1e
    1fea:	6f 8f       	std	Y+31, r22	; 0x1f
    1fec:	78 a3       	std	Y+32, r23	; 0x20
    1fee:	83 e0       	ldi	r24, 0x03	; 3
    1ff0:	89 8f       	std	Y+25, r24	; 0x19
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	49 96       	adiw	r24, 0x19	; 25
    1ff6:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__pack_f>
    1ffa:	a0 96       	adiw	r28, 0x20	; 32
    1ffc:	e2 e1       	ldi	r30, 0x12	; 18
    1ffe:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__>

00002002 <__gtsf2>:
    2002:	a8 e1       	ldi	r26, 0x18	; 24
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e7 e0       	ldi	r30, 0x07	; 7
    2008:	f0 e1       	ldi	r31, 0x10	; 16
    200a:	0c 94 97 12 	jmp	0x252e	; 0x252e <__prologue_saves__+0x18>
    200e:	69 83       	std	Y+1, r22	; 0x01
    2010:	7a 83       	std	Y+2, r23	; 0x02
    2012:	8b 83       	std	Y+3, r24	; 0x03
    2014:	9c 83       	std	Y+4, r25	; 0x04
    2016:	2d 83       	std	Y+5, r18	; 0x05
    2018:	3e 83       	std	Y+6, r19	; 0x06
    201a:	4f 83       	std	Y+7, r20	; 0x07
    201c:	58 87       	std	Y+8, r21	; 0x08
    201e:	89 e0       	ldi	r24, 0x09	; 9
    2020:	e8 2e       	mov	r14, r24
    2022:	f1 2c       	mov	r15, r1
    2024:	ec 0e       	add	r14, r28
    2026:	fd 1e       	adc	r15, r29
    2028:	ce 01       	movw	r24, r28
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	b7 01       	movw	r22, r14
    202e:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    2032:	8e 01       	movw	r16, r28
    2034:	0f 5e       	subi	r16, 0xEF	; 239
    2036:	1f 4f       	sbci	r17, 0xFF	; 255
    2038:	ce 01       	movw	r24, r28
    203a:	05 96       	adiw	r24, 0x05	; 5
    203c:	b8 01       	movw	r22, r16
    203e:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    2042:	89 85       	ldd	r24, Y+9	; 0x09
    2044:	82 30       	cpi	r24, 0x02	; 2
    2046:	40 f0       	brcs	.+16     	; 0x2058 <__gtsf2+0x56>
    2048:	89 89       	ldd	r24, Y+17	; 0x11
    204a:	82 30       	cpi	r24, 0x02	; 2
    204c:	28 f0       	brcs	.+10     	; 0x2058 <__gtsf2+0x56>
    204e:	c7 01       	movw	r24, r14
    2050:	b8 01       	movw	r22, r16
    2052:	0e 94 32 12 	call	0x2464	; 0x2464 <__fpcmp_parts_f>
    2056:	01 c0       	rjmp	.+2      	; 0x205a <__gtsf2+0x58>
    2058:	8f ef       	ldi	r24, 0xFF	; 255
    205a:	68 96       	adiw	r28, 0x18	; 24
    205c:	e6 e0       	ldi	r30, 0x06	; 6
    205e:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__epilogue_restores__+0x18>

00002062 <__gesf2>:
    2062:	a8 e1       	ldi	r26, 0x18	; 24
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e7 e3       	ldi	r30, 0x37	; 55
    2068:	f0 e1       	ldi	r31, 0x10	; 16
    206a:	0c 94 97 12 	jmp	0x252e	; 0x252e <__prologue_saves__+0x18>
    206e:	69 83       	std	Y+1, r22	; 0x01
    2070:	7a 83       	std	Y+2, r23	; 0x02
    2072:	8b 83       	std	Y+3, r24	; 0x03
    2074:	9c 83       	std	Y+4, r25	; 0x04
    2076:	2d 83       	std	Y+5, r18	; 0x05
    2078:	3e 83       	std	Y+6, r19	; 0x06
    207a:	4f 83       	std	Y+7, r20	; 0x07
    207c:	58 87       	std	Y+8, r21	; 0x08
    207e:	89 e0       	ldi	r24, 0x09	; 9
    2080:	e8 2e       	mov	r14, r24
    2082:	f1 2c       	mov	r15, r1
    2084:	ec 0e       	add	r14, r28
    2086:	fd 1e       	adc	r15, r29
    2088:	ce 01       	movw	r24, r28
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	b7 01       	movw	r22, r14
    208e:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    2092:	8e 01       	movw	r16, r28
    2094:	0f 5e       	subi	r16, 0xEF	; 239
    2096:	1f 4f       	sbci	r17, 0xFF	; 255
    2098:	ce 01       	movw	r24, r28
    209a:	05 96       	adiw	r24, 0x05	; 5
    209c:	b8 01       	movw	r22, r16
    209e:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	40 f0       	brcs	.+16     	; 0x20b8 <__gesf2+0x56>
    20a8:	89 89       	ldd	r24, Y+17	; 0x11
    20aa:	82 30       	cpi	r24, 0x02	; 2
    20ac:	28 f0       	brcs	.+10     	; 0x20b8 <__gesf2+0x56>
    20ae:	c7 01       	movw	r24, r14
    20b0:	b8 01       	movw	r22, r16
    20b2:	0e 94 32 12 	call	0x2464	; 0x2464 <__fpcmp_parts_f>
    20b6:	01 c0       	rjmp	.+2      	; 0x20ba <__gesf2+0x58>
    20b8:	8f ef       	ldi	r24, 0xFF	; 255
    20ba:	68 96       	adiw	r28, 0x18	; 24
    20bc:	e6 e0       	ldi	r30, 0x06	; 6
    20be:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__epilogue_restores__+0x18>

000020c2 <__ltsf2>:
    20c2:	a8 e1       	ldi	r26, 0x18	; 24
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e7 e6       	ldi	r30, 0x67	; 103
    20c8:	f0 e1       	ldi	r31, 0x10	; 16
    20ca:	0c 94 97 12 	jmp	0x252e	; 0x252e <__prologue_saves__+0x18>
    20ce:	69 83       	std	Y+1, r22	; 0x01
    20d0:	7a 83       	std	Y+2, r23	; 0x02
    20d2:	8b 83       	std	Y+3, r24	; 0x03
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	2d 83       	std	Y+5, r18	; 0x05
    20d8:	3e 83       	std	Y+6, r19	; 0x06
    20da:	4f 83       	std	Y+7, r20	; 0x07
    20dc:	58 87       	std	Y+8, r21	; 0x08
    20de:	89 e0       	ldi	r24, 0x09	; 9
    20e0:	e8 2e       	mov	r14, r24
    20e2:	f1 2c       	mov	r15, r1
    20e4:	ec 0e       	add	r14, r28
    20e6:	fd 1e       	adc	r15, r29
    20e8:	ce 01       	movw	r24, r28
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	b7 01       	movw	r22, r14
    20ee:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    20f2:	8e 01       	movw	r16, r28
    20f4:	0f 5e       	subi	r16, 0xEF	; 239
    20f6:	1f 4f       	sbci	r17, 0xFF	; 255
    20f8:	ce 01       	movw	r24, r28
    20fa:	05 96       	adiw	r24, 0x05	; 5
    20fc:	b8 01       	movw	r22, r16
    20fe:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	82 30       	cpi	r24, 0x02	; 2
    2106:	40 f0       	brcs	.+16     	; 0x2118 <__ltsf2+0x56>
    2108:	89 89       	ldd	r24, Y+17	; 0x11
    210a:	82 30       	cpi	r24, 0x02	; 2
    210c:	28 f0       	brcs	.+10     	; 0x2118 <__ltsf2+0x56>
    210e:	c7 01       	movw	r24, r14
    2110:	b8 01       	movw	r22, r16
    2112:	0e 94 32 12 	call	0x2464	; 0x2464 <__fpcmp_parts_f>
    2116:	01 c0       	rjmp	.+2      	; 0x211a <__ltsf2+0x58>
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	68 96       	adiw	r28, 0x18	; 24
    211c:	e6 e0       	ldi	r30, 0x06	; 6
    211e:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__epilogue_restores__+0x18>

00002122 <__fixsfsi>:
    2122:	ac e0       	ldi	r26, 0x0C	; 12
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e7 e9       	ldi	r30, 0x97	; 151
    2128:	f0 e1       	ldi	r31, 0x10	; 16
    212a:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__prologue_saves__+0x20>
    212e:	69 83       	std	Y+1, r22	; 0x01
    2130:	7a 83       	std	Y+2, r23	; 0x02
    2132:	8b 83       	std	Y+3, r24	; 0x03
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	ce 01       	movw	r24, r28
    2138:	01 96       	adiw	r24, 0x01	; 1
    213a:	be 01       	movw	r22, r28
    213c:	6b 5f       	subi	r22, 0xFB	; 251
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	0e 94 ba 11 	call	0x2374	; 0x2374 <__unpack_f>
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	82 30       	cpi	r24, 0x02	; 2
    2148:	61 f1       	breq	.+88     	; 0x21a2 <__fixsfsi+0x80>
    214a:	82 30       	cpi	r24, 0x02	; 2
    214c:	50 f1       	brcs	.+84     	; 0x21a2 <__fixsfsi+0x80>
    214e:	84 30       	cpi	r24, 0x04	; 4
    2150:	21 f4       	brne	.+8      	; 0x215a <__fixsfsi+0x38>
    2152:	8e 81       	ldd	r24, Y+6	; 0x06
    2154:	88 23       	and	r24, r24
    2156:	51 f1       	breq	.+84     	; 0x21ac <__fixsfsi+0x8a>
    2158:	2e c0       	rjmp	.+92     	; 0x21b6 <__fixsfsi+0x94>
    215a:	2f 81       	ldd	r18, Y+7	; 0x07
    215c:	38 85       	ldd	r19, Y+8	; 0x08
    215e:	37 fd       	sbrc	r19, 7
    2160:	20 c0       	rjmp	.+64     	; 0x21a2 <__fixsfsi+0x80>
    2162:	6e 81       	ldd	r22, Y+6	; 0x06
    2164:	2f 31       	cpi	r18, 0x1F	; 31
    2166:	31 05       	cpc	r19, r1
    2168:	1c f0       	brlt	.+6      	; 0x2170 <__fixsfsi+0x4e>
    216a:	66 23       	and	r22, r22
    216c:	f9 f0       	breq	.+62     	; 0x21ac <__fixsfsi+0x8a>
    216e:	23 c0       	rjmp	.+70     	; 0x21b6 <__fixsfsi+0x94>
    2170:	8e e1       	ldi	r24, 0x1E	; 30
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	82 1b       	sub	r24, r18
    2176:	93 0b       	sbc	r25, r19
    2178:	29 85       	ldd	r18, Y+9	; 0x09
    217a:	3a 85       	ldd	r19, Y+10	; 0x0a
    217c:	4b 85       	ldd	r20, Y+11	; 0x0b
    217e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2180:	04 c0       	rjmp	.+8      	; 0x218a <__fixsfsi+0x68>
    2182:	56 95       	lsr	r21
    2184:	47 95       	ror	r20
    2186:	37 95       	ror	r19
    2188:	27 95       	ror	r18
    218a:	8a 95       	dec	r24
    218c:	d2 f7       	brpl	.-12     	; 0x2182 <__fixsfsi+0x60>
    218e:	66 23       	and	r22, r22
    2190:	b1 f0       	breq	.+44     	; 0x21be <__fixsfsi+0x9c>
    2192:	50 95       	com	r21
    2194:	40 95       	com	r20
    2196:	30 95       	com	r19
    2198:	21 95       	neg	r18
    219a:	3f 4f       	sbci	r19, 0xFF	; 255
    219c:	4f 4f       	sbci	r20, 0xFF	; 255
    219e:	5f 4f       	sbci	r21, 0xFF	; 255
    21a0:	0e c0       	rjmp	.+28     	; 0x21be <__fixsfsi+0x9c>
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	50 e0       	ldi	r21, 0x00	; 0
    21aa:	09 c0       	rjmp	.+18     	; 0x21be <__fixsfsi+0x9c>
    21ac:	2f ef       	ldi	r18, 0xFF	; 255
    21ae:	3f ef       	ldi	r19, 0xFF	; 255
    21b0:	4f ef       	ldi	r20, 0xFF	; 255
    21b2:	5f e7       	ldi	r21, 0x7F	; 127
    21b4:	04 c0       	rjmp	.+8      	; 0x21be <__fixsfsi+0x9c>
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	50 e8       	ldi	r21, 0x80	; 128
    21be:	b9 01       	movw	r22, r18
    21c0:	ca 01       	movw	r24, r20
    21c2:	2c 96       	adiw	r28, 0x0c	; 12
    21c4:	e2 e0       	ldi	r30, 0x02	; 2
    21c6:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__epilogue_restores__+0x20>

000021ca <__pack_f>:
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	fc 01       	movw	r30, r24
    21d6:	e4 80       	ldd	r14, Z+4	; 0x04
    21d8:	f5 80       	ldd	r15, Z+5	; 0x05
    21da:	06 81       	ldd	r16, Z+6	; 0x06
    21dc:	17 81       	ldd	r17, Z+7	; 0x07
    21de:	d1 80       	ldd	r13, Z+1	; 0x01
    21e0:	80 81       	ld	r24, Z
    21e2:	82 30       	cpi	r24, 0x02	; 2
    21e4:	48 f4       	brcc	.+18     	; 0x21f8 <__pack_f+0x2e>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a0 e1       	ldi	r26, 0x10	; 16
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e8 2a       	or	r14, r24
    21f0:	f9 2a       	or	r15, r25
    21f2:	0a 2b       	or	r16, r26
    21f4:	1b 2b       	or	r17, r27
    21f6:	a5 c0       	rjmp	.+330    	; 0x2342 <__pack_f+0x178>
    21f8:	84 30       	cpi	r24, 0x04	; 4
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__pack_f+0x34>
    21fc:	9f c0       	rjmp	.+318    	; 0x233c <__pack_f+0x172>
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	21 f4       	brne	.+8      	; 0x220a <__pack_f+0x40>
    2202:	ee 24       	eor	r14, r14
    2204:	ff 24       	eor	r15, r15
    2206:	87 01       	movw	r16, r14
    2208:	05 c0       	rjmp	.+10     	; 0x2214 <__pack_f+0x4a>
    220a:	e1 14       	cp	r14, r1
    220c:	f1 04       	cpc	r15, r1
    220e:	01 05       	cpc	r16, r1
    2210:	11 05       	cpc	r17, r1
    2212:	19 f4       	brne	.+6      	; 0x221a <__pack_f+0x50>
    2214:	e0 e0       	ldi	r30, 0x00	; 0
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	96 c0       	rjmp	.+300    	; 0x2346 <__pack_f+0x17c>
    221a:	62 81       	ldd	r22, Z+2	; 0x02
    221c:	73 81       	ldd	r23, Z+3	; 0x03
    221e:	9f ef       	ldi	r25, 0xFF	; 255
    2220:	62 38       	cpi	r22, 0x82	; 130
    2222:	79 07       	cpc	r23, r25
    2224:	0c f0       	brlt	.+2      	; 0x2228 <__pack_f+0x5e>
    2226:	5b c0       	rjmp	.+182    	; 0x22de <__pack_f+0x114>
    2228:	22 e8       	ldi	r18, 0x82	; 130
    222a:	3f ef       	ldi	r19, 0xFF	; 255
    222c:	26 1b       	sub	r18, r22
    222e:	37 0b       	sbc	r19, r23
    2230:	2a 31       	cpi	r18, 0x1A	; 26
    2232:	31 05       	cpc	r19, r1
    2234:	2c f0       	brlt	.+10     	; 0x2240 <__pack_f+0x76>
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	2a c0       	rjmp	.+84     	; 0x2294 <__pack_f+0xca>
    2240:	b8 01       	movw	r22, r16
    2242:	a7 01       	movw	r20, r14
    2244:	02 2e       	mov	r0, r18
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <__pack_f+0x86>
    2248:	76 95       	lsr	r23
    224a:	67 95       	ror	r22
    224c:	57 95       	ror	r21
    224e:	47 95       	ror	r20
    2250:	0a 94       	dec	r0
    2252:	d2 f7       	brpl	.-12     	; 0x2248 <__pack_f+0x7e>
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 e0       	ldi	r26, 0x00	; 0
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <__pack_f+0x9c>
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	aa 1f       	adc	r26, r26
    2264:	bb 1f       	adc	r27, r27
    2266:	2a 95       	dec	r18
    2268:	d2 f7       	brpl	.-12     	; 0x225e <__pack_f+0x94>
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	a1 09       	sbc	r26, r1
    226e:	b1 09       	sbc	r27, r1
    2270:	8e 21       	and	r24, r14
    2272:	9f 21       	and	r25, r15
    2274:	a0 23       	and	r26, r16
    2276:	b1 23       	and	r27, r17
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	a1 05       	cpc	r26, r1
    227c:	b1 05       	cpc	r27, r1
    227e:	21 f0       	breq	.+8      	; 0x2288 <__pack_f+0xbe>
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a0 e0       	ldi	r26, 0x00	; 0
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	9a 01       	movw	r18, r20
    228a:	ab 01       	movw	r20, r22
    228c:	28 2b       	or	r18, r24
    228e:	39 2b       	or	r19, r25
    2290:	4a 2b       	or	r20, r26
    2292:	5b 2b       	or	r21, r27
    2294:	da 01       	movw	r26, r20
    2296:	c9 01       	movw	r24, r18
    2298:	8f 77       	andi	r24, 0x7F	; 127
    229a:	90 70       	andi	r25, 0x00	; 0
    229c:	a0 70       	andi	r26, 0x00	; 0
    229e:	b0 70       	andi	r27, 0x00	; 0
    22a0:	80 34       	cpi	r24, 0x40	; 64
    22a2:	91 05       	cpc	r25, r1
    22a4:	a1 05       	cpc	r26, r1
    22a6:	b1 05       	cpc	r27, r1
    22a8:	39 f4       	brne	.+14     	; 0x22b8 <__pack_f+0xee>
    22aa:	27 ff       	sbrs	r18, 7
    22ac:	09 c0       	rjmp	.+18     	; 0x22c0 <__pack_f+0xf6>
    22ae:	20 5c       	subi	r18, 0xC0	; 192
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	4f 4f       	sbci	r20, 0xFF	; 255
    22b4:	5f 4f       	sbci	r21, 0xFF	; 255
    22b6:	04 c0       	rjmp	.+8      	; 0x22c0 <__pack_f+0xf6>
    22b8:	21 5c       	subi	r18, 0xC1	; 193
    22ba:	3f 4f       	sbci	r19, 0xFF	; 255
    22bc:	4f 4f       	sbci	r20, 0xFF	; 255
    22be:	5f 4f       	sbci	r21, 0xFF	; 255
    22c0:	e0 e0       	ldi	r30, 0x00	; 0
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	20 30       	cpi	r18, 0x00	; 0
    22c6:	a0 e0       	ldi	r26, 0x00	; 0
    22c8:	3a 07       	cpc	r19, r26
    22ca:	a0 e0       	ldi	r26, 0x00	; 0
    22cc:	4a 07       	cpc	r20, r26
    22ce:	a0 e4       	ldi	r26, 0x40	; 64
    22d0:	5a 07       	cpc	r21, r26
    22d2:	10 f0       	brcs	.+4      	; 0x22d8 <__pack_f+0x10e>
    22d4:	e1 e0       	ldi	r30, 0x01	; 1
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	79 01       	movw	r14, r18
    22da:	8a 01       	movw	r16, r20
    22dc:	27 c0       	rjmp	.+78     	; 0x232c <__pack_f+0x162>
    22de:	60 38       	cpi	r22, 0x80	; 128
    22e0:	71 05       	cpc	r23, r1
    22e2:	64 f5       	brge	.+88     	; 0x233c <__pack_f+0x172>
    22e4:	fb 01       	movw	r30, r22
    22e6:	e1 58       	subi	r30, 0x81	; 129
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	d8 01       	movw	r26, r16
    22ec:	c7 01       	movw	r24, r14
    22ee:	8f 77       	andi	r24, 0x7F	; 127
    22f0:	90 70       	andi	r25, 0x00	; 0
    22f2:	a0 70       	andi	r26, 0x00	; 0
    22f4:	b0 70       	andi	r27, 0x00	; 0
    22f6:	80 34       	cpi	r24, 0x40	; 64
    22f8:	91 05       	cpc	r25, r1
    22fa:	a1 05       	cpc	r26, r1
    22fc:	b1 05       	cpc	r27, r1
    22fe:	39 f4       	brne	.+14     	; 0x230e <__pack_f+0x144>
    2300:	e7 fe       	sbrs	r14, 7
    2302:	0d c0       	rjmp	.+26     	; 0x231e <__pack_f+0x154>
    2304:	80 e4       	ldi	r24, 0x40	; 64
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a0 e0       	ldi	r26, 0x00	; 0
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <__pack_f+0x14c>
    230e:	8f e3       	ldi	r24, 0x3F	; 63
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	a0 e0       	ldi	r26, 0x00	; 0
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e8 0e       	add	r14, r24
    2318:	f9 1e       	adc	r15, r25
    231a:	0a 1f       	adc	r16, r26
    231c:	1b 1f       	adc	r17, r27
    231e:	17 ff       	sbrs	r17, 7
    2320:	05 c0       	rjmp	.+10     	; 0x232c <__pack_f+0x162>
    2322:	16 95       	lsr	r17
    2324:	07 95       	ror	r16
    2326:	f7 94       	ror	r15
    2328:	e7 94       	ror	r14
    232a:	31 96       	adiw	r30, 0x01	; 1
    232c:	87 e0       	ldi	r24, 0x07	; 7
    232e:	16 95       	lsr	r17
    2330:	07 95       	ror	r16
    2332:	f7 94       	ror	r15
    2334:	e7 94       	ror	r14
    2336:	8a 95       	dec	r24
    2338:	d1 f7       	brne	.-12     	; 0x232e <__pack_f+0x164>
    233a:	05 c0       	rjmp	.+10     	; 0x2346 <__pack_f+0x17c>
    233c:	ee 24       	eor	r14, r14
    233e:	ff 24       	eor	r15, r15
    2340:	87 01       	movw	r16, r14
    2342:	ef ef       	ldi	r30, 0xFF	; 255
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	6e 2f       	mov	r22, r30
    2348:	67 95       	ror	r22
    234a:	66 27       	eor	r22, r22
    234c:	67 95       	ror	r22
    234e:	90 2f       	mov	r25, r16
    2350:	9f 77       	andi	r25, 0x7F	; 127
    2352:	d7 94       	ror	r13
    2354:	dd 24       	eor	r13, r13
    2356:	d7 94       	ror	r13
    2358:	8e 2f       	mov	r24, r30
    235a:	86 95       	lsr	r24
    235c:	49 2f       	mov	r20, r25
    235e:	46 2b       	or	r20, r22
    2360:	58 2f       	mov	r21, r24
    2362:	5d 29       	or	r21, r13
    2364:	b7 01       	movw	r22, r14
    2366:	ca 01       	movw	r24, r20
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	ff 90       	pop	r15
    236e:	ef 90       	pop	r14
    2370:	df 90       	pop	r13
    2372:	08 95       	ret

00002374 <__unpack_f>:
    2374:	fc 01       	movw	r30, r24
    2376:	db 01       	movw	r26, r22
    2378:	40 81       	ld	r20, Z
    237a:	51 81       	ldd	r21, Z+1	; 0x01
    237c:	22 81       	ldd	r18, Z+2	; 0x02
    237e:	62 2f       	mov	r22, r18
    2380:	6f 77       	andi	r22, 0x7F	; 127
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	22 1f       	adc	r18, r18
    2386:	22 27       	eor	r18, r18
    2388:	22 1f       	adc	r18, r18
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	89 2f       	mov	r24, r25
    238e:	88 0f       	add	r24, r24
    2390:	82 2b       	or	r24, r18
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	99 1f       	adc	r25, r25
    2398:	99 27       	eor	r25, r25
    239a:	99 1f       	adc	r25, r25
    239c:	11 96       	adiw	r26, 0x01	; 1
    239e:	9c 93       	st	X, r25
    23a0:	11 97       	sbiw	r26, 0x01	; 1
    23a2:	21 15       	cp	r18, r1
    23a4:	31 05       	cpc	r19, r1
    23a6:	a9 f5       	brne	.+106    	; 0x2412 <__unpack_f+0x9e>
    23a8:	41 15       	cp	r20, r1
    23aa:	51 05       	cpc	r21, r1
    23ac:	61 05       	cpc	r22, r1
    23ae:	71 05       	cpc	r23, r1
    23b0:	11 f4       	brne	.+4      	; 0x23b6 <__unpack_f+0x42>
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	37 c0       	rjmp	.+110    	; 0x2424 <__unpack_f+0xb0>
    23b6:	82 e8       	ldi	r24, 0x82	; 130
    23b8:	9f ef       	ldi	r25, 0xFF	; 255
    23ba:	13 96       	adiw	r26, 0x03	; 3
    23bc:	9c 93       	st	X, r25
    23be:	8e 93       	st	-X, r24
    23c0:	12 97       	sbiw	r26, 0x02	; 2
    23c2:	9a 01       	movw	r18, r20
    23c4:	ab 01       	movw	r20, r22
    23c6:	67 e0       	ldi	r22, 0x07	; 7
    23c8:	22 0f       	add	r18, r18
    23ca:	33 1f       	adc	r19, r19
    23cc:	44 1f       	adc	r20, r20
    23ce:	55 1f       	adc	r21, r21
    23d0:	6a 95       	dec	r22
    23d2:	d1 f7       	brne	.-12     	; 0x23c8 <__unpack_f+0x54>
    23d4:	83 e0       	ldi	r24, 0x03	; 3
    23d6:	8c 93       	st	X, r24
    23d8:	0d c0       	rjmp	.+26     	; 0x23f4 <__unpack_f+0x80>
    23da:	22 0f       	add	r18, r18
    23dc:	33 1f       	adc	r19, r19
    23de:	44 1f       	adc	r20, r20
    23e0:	55 1f       	adc	r21, r21
    23e2:	12 96       	adiw	r26, 0x02	; 2
    23e4:	8d 91       	ld	r24, X+
    23e6:	9c 91       	ld	r25, X
    23e8:	13 97       	sbiw	r26, 0x03	; 3
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	13 96       	adiw	r26, 0x03	; 3
    23ee:	9c 93       	st	X, r25
    23f0:	8e 93       	st	-X, r24
    23f2:	12 97       	sbiw	r26, 0x02	; 2
    23f4:	20 30       	cpi	r18, 0x00	; 0
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	38 07       	cpc	r19, r24
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	48 07       	cpc	r20, r24
    23fe:	80 e4       	ldi	r24, 0x40	; 64
    2400:	58 07       	cpc	r21, r24
    2402:	58 f3       	brcs	.-42     	; 0x23da <__unpack_f+0x66>
    2404:	14 96       	adiw	r26, 0x04	; 4
    2406:	2d 93       	st	X+, r18
    2408:	3d 93       	st	X+, r19
    240a:	4d 93       	st	X+, r20
    240c:	5c 93       	st	X, r21
    240e:	17 97       	sbiw	r26, 0x07	; 7
    2410:	08 95       	ret
    2412:	2f 3f       	cpi	r18, 0xFF	; 255
    2414:	31 05       	cpc	r19, r1
    2416:	79 f4       	brne	.+30     	; 0x2436 <__unpack_f+0xc2>
    2418:	41 15       	cp	r20, r1
    241a:	51 05       	cpc	r21, r1
    241c:	61 05       	cpc	r22, r1
    241e:	71 05       	cpc	r23, r1
    2420:	19 f4       	brne	.+6      	; 0x2428 <__unpack_f+0xb4>
    2422:	84 e0       	ldi	r24, 0x04	; 4
    2424:	8c 93       	st	X, r24
    2426:	08 95       	ret
    2428:	64 ff       	sbrs	r22, 4
    242a:	03 c0       	rjmp	.+6      	; 0x2432 <__unpack_f+0xbe>
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	8c 93       	st	X, r24
    2430:	12 c0       	rjmp	.+36     	; 0x2456 <__unpack_f+0xe2>
    2432:	1c 92       	st	X, r1
    2434:	10 c0       	rjmp	.+32     	; 0x2456 <__unpack_f+0xe2>
    2436:	2f 57       	subi	r18, 0x7F	; 127
    2438:	30 40       	sbci	r19, 0x00	; 0
    243a:	13 96       	adiw	r26, 0x03	; 3
    243c:	3c 93       	st	X, r19
    243e:	2e 93       	st	-X, r18
    2440:	12 97       	sbiw	r26, 0x02	; 2
    2442:	83 e0       	ldi	r24, 0x03	; 3
    2444:	8c 93       	st	X, r24
    2446:	87 e0       	ldi	r24, 0x07	; 7
    2448:	44 0f       	add	r20, r20
    244a:	55 1f       	adc	r21, r21
    244c:	66 1f       	adc	r22, r22
    244e:	77 1f       	adc	r23, r23
    2450:	8a 95       	dec	r24
    2452:	d1 f7       	brne	.-12     	; 0x2448 <__unpack_f+0xd4>
    2454:	70 64       	ori	r23, 0x40	; 64
    2456:	14 96       	adiw	r26, 0x04	; 4
    2458:	4d 93       	st	X+, r20
    245a:	5d 93       	st	X+, r21
    245c:	6d 93       	st	X+, r22
    245e:	7c 93       	st	X, r23
    2460:	17 97       	sbiw	r26, 0x07	; 7
    2462:	08 95       	ret

00002464 <__fpcmp_parts_f>:
    2464:	1f 93       	push	r17
    2466:	dc 01       	movw	r26, r24
    2468:	fb 01       	movw	r30, r22
    246a:	9c 91       	ld	r25, X
    246c:	92 30       	cpi	r25, 0x02	; 2
    246e:	08 f4       	brcc	.+2      	; 0x2472 <__fpcmp_parts_f+0xe>
    2470:	47 c0       	rjmp	.+142    	; 0x2500 <__fpcmp_parts_f+0x9c>
    2472:	80 81       	ld	r24, Z
    2474:	82 30       	cpi	r24, 0x02	; 2
    2476:	08 f4       	brcc	.+2      	; 0x247a <__fpcmp_parts_f+0x16>
    2478:	43 c0       	rjmp	.+134    	; 0x2500 <__fpcmp_parts_f+0x9c>
    247a:	94 30       	cpi	r25, 0x04	; 4
    247c:	51 f4       	brne	.+20     	; 0x2492 <__fpcmp_parts_f+0x2e>
    247e:	11 96       	adiw	r26, 0x01	; 1
    2480:	1c 91       	ld	r17, X
    2482:	84 30       	cpi	r24, 0x04	; 4
    2484:	99 f5       	brne	.+102    	; 0x24ec <__fpcmp_parts_f+0x88>
    2486:	81 81       	ldd	r24, Z+1	; 0x01
    2488:	68 2f       	mov	r22, r24
    248a:	70 e0       	ldi	r23, 0x00	; 0
    248c:	61 1b       	sub	r22, r17
    248e:	71 09       	sbc	r23, r1
    2490:	3f c0       	rjmp	.+126    	; 0x2510 <__fpcmp_parts_f+0xac>
    2492:	84 30       	cpi	r24, 0x04	; 4
    2494:	21 f0       	breq	.+8      	; 0x249e <__fpcmp_parts_f+0x3a>
    2496:	92 30       	cpi	r25, 0x02	; 2
    2498:	31 f4       	brne	.+12     	; 0x24a6 <__fpcmp_parts_f+0x42>
    249a:	82 30       	cpi	r24, 0x02	; 2
    249c:	b9 f1       	breq	.+110    	; 0x250c <__fpcmp_parts_f+0xa8>
    249e:	81 81       	ldd	r24, Z+1	; 0x01
    24a0:	88 23       	and	r24, r24
    24a2:	89 f1       	breq	.+98     	; 0x2506 <__fpcmp_parts_f+0xa2>
    24a4:	2d c0       	rjmp	.+90     	; 0x2500 <__fpcmp_parts_f+0x9c>
    24a6:	11 96       	adiw	r26, 0x01	; 1
    24a8:	1c 91       	ld	r17, X
    24aa:	11 97       	sbiw	r26, 0x01	; 1
    24ac:	82 30       	cpi	r24, 0x02	; 2
    24ae:	f1 f0       	breq	.+60     	; 0x24ec <__fpcmp_parts_f+0x88>
    24b0:	81 81       	ldd	r24, Z+1	; 0x01
    24b2:	18 17       	cp	r17, r24
    24b4:	d9 f4       	brne	.+54     	; 0x24ec <__fpcmp_parts_f+0x88>
    24b6:	12 96       	adiw	r26, 0x02	; 2
    24b8:	2d 91       	ld	r18, X+
    24ba:	3c 91       	ld	r19, X
    24bc:	13 97       	sbiw	r26, 0x03	; 3
    24be:	82 81       	ldd	r24, Z+2	; 0x02
    24c0:	93 81       	ldd	r25, Z+3	; 0x03
    24c2:	82 17       	cp	r24, r18
    24c4:	93 07       	cpc	r25, r19
    24c6:	94 f0       	brlt	.+36     	; 0x24ec <__fpcmp_parts_f+0x88>
    24c8:	28 17       	cp	r18, r24
    24ca:	39 07       	cpc	r19, r25
    24cc:	bc f0       	brlt	.+46     	; 0x24fc <__fpcmp_parts_f+0x98>
    24ce:	14 96       	adiw	r26, 0x04	; 4
    24d0:	8d 91       	ld	r24, X+
    24d2:	9d 91       	ld	r25, X+
    24d4:	0d 90       	ld	r0, X+
    24d6:	bc 91       	ld	r27, X
    24d8:	a0 2d       	mov	r26, r0
    24da:	24 81       	ldd	r18, Z+4	; 0x04
    24dc:	35 81       	ldd	r19, Z+5	; 0x05
    24de:	46 81       	ldd	r20, Z+6	; 0x06
    24e0:	57 81       	ldd	r21, Z+7	; 0x07
    24e2:	28 17       	cp	r18, r24
    24e4:	39 07       	cpc	r19, r25
    24e6:	4a 07       	cpc	r20, r26
    24e8:	5b 07       	cpc	r21, r27
    24ea:	18 f4       	brcc	.+6      	; 0x24f2 <__fpcmp_parts_f+0x8e>
    24ec:	11 23       	and	r17, r17
    24ee:	41 f0       	breq	.+16     	; 0x2500 <__fpcmp_parts_f+0x9c>
    24f0:	0a c0       	rjmp	.+20     	; 0x2506 <__fpcmp_parts_f+0xa2>
    24f2:	82 17       	cp	r24, r18
    24f4:	93 07       	cpc	r25, r19
    24f6:	a4 07       	cpc	r26, r20
    24f8:	b5 07       	cpc	r27, r21
    24fa:	40 f4       	brcc	.+16     	; 0x250c <__fpcmp_parts_f+0xa8>
    24fc:	11 23       	and	r17, r17
    24fe:	19 f0       	breq	.+6      	; 0x2506 <__fpcmp_parts_f+0xa2>
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	05 c0       	rjmp	.+10     	; 0x2510 <__fpcmp_parts_f+0xac>
    2506:	6f ef       	ldi	r22, 0xFF	; 255
    2508:	7f ef       	ldi	r23, 0xFF	; 255
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <__fpcmp_parts_f+0xac>
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	cb 01       	movw	r24, r22
    2512:	1f 91       	pop	r17
    2514:	08 95       	ret

00002516 <__prologue_saves__>:
    2516:	2f 92       	push	r2
    2518:	3f 92       	push	r3
    251a:	4f 92       	push	r4
    251c:	5f 92       	push	r5
    251e:	6f 92       	push	r6
    2520:	7f 92       	push	r7
    2522:	8f 92       	push	r8
    2524:	9f 92       	push	r9
    2526:	af 92       	push	r10
    2528:	bf 92       	push	r11
    252a:	cf 92       	push	r12
    252c:	df 92       	push	r13
    252e:	ef 92       	push	r14
    2530:	ff 92       	push	r15
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	ca 1b       	sub	r28, r26
    2540:	db 0b       	sbc	r29, r27
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	cd bf       	out	0x3d, r28	; 61
    254c:	09 94       	ijmp

0000254e <__epilogue_restores__>:
    254e:	2a 88       	ldd	r2, Y+18	; 0x12
    2550:	39 88       	ldd	r3, Y+17	; 0x11
    2552:	48 88       	ldd	r4, Y+16	; 0x10
    2554:	5f 84       	ldd	r5, Y+15	; 0x0f
    2556:	6e 84       	ldd	r6, Y+14	; 0x0e
    2558:	7d 84       	ldd	r7, Y+13	; 0x0d
    255a:	8c 84       	ldd	r8, Y+12	; 0x0c
    255c:	9b 84       	ldd	r9, Y+11	; 0x0b
    255e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2560:	b9 84       	ldd	r11, Y+9	; 0x09
    2562:	c8 84       	ldd	r12, Y+8	; 0x08
    2564:	df 80       	ldd	r13, Y+7	; 0x07
    2566:	ee 80       	ldd	r14, Y+6	; 0x06
    2568:	fd 80       	ldd	r15, Y+5	; 0x05
    256a:	0c 81       	ldd	r16, Y+4	; 0x04
    256c:	1b 81       	ldd	r17, Y+3	; 0x03
    256e:	aa 81       	ldd	r26, Y+2	; 0x02
    2570:	b9 81       	ldd	r27, Y+1	; 0x01
    2572:	ce 0f       	add	r28, r30
    2574:	d1 1d       	adc	r29, r1
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	ed 01       	movw	r28, r26
    2582:	08 95       	ret

00002584 <memcpy>:
    2584:	fb 01       	movw	r30, r22
    2586:	dc 01       	movw	r26, r24
    2588:	02 c0       	rjmp	.+4      	; 0x258e <memcpy+0xa>
    258a:	01 90       	ld	r0, Z+
    258c:	0d 92       	st	X+, r0
    258e:	41 50       	subi	r20, 0x01	; 1
    2590:	50 40       	sbci	r21, 0x00	; 0
    2592:	d8 f7       	brcc	.-10     	; 0x258a <memcpy+0x6>
    2594:	08 95       	ret

00002596 <memset>:
    2596:	dc 01       	movw	r26, r24
    2598:	01 c0       	rjmp	.+2      	; 0x259c <memset+0x6>
    259a:	6d 93       	st	X+, r22
    259c:	41 50       	subi	r20, 0x01	; 1
    259e:	50 40       	sbci	r21, 0x00	; 0
    25a0:	e0 f7       	brcc	.-8      	; 0x259a <memset+0x4>
    25a2:	08 95       	ret

000025a4 <_exit>:
    25a4:	f8 94       	cli

000025a6 <__stop_program>:
    25a6:	ff cf       	rjmp	.-2      	; 0x25a6 <__stop_program>
