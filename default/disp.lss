
disp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00800100  000022c2  00002356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000806  00800266  00800266  000024bc  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000676  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002aec  00000000  00000000  00002cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001188  00000000  00000000  0000579e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018a3  00000000  00000000  00006926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  000081cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006eb  00000000  00000000  000084cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00008bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00009385  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ec       	ldi	r30, 0xC2	; 194
      a0:	f2 e2       	ldi	r31, 0x22	; 34
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 36       	cpi	r26, 0x66	; 102
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	1a e0       	ldi	r17, 0x0A	; 10
      b4:	a6 e6       	ldi	r26, 0x66	; 102
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 36       	cpi	r26, 0x6C	; 108
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 5f 11 	jmp	0x22be	; 0x22be <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define SCREEN_HEIGHT 64


int main(void)

{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	00 d0       	rcall	.+0      	; 0xd4 <main+0x6>
      d4:	00 d0       	rcall	.+0      	; 0xd6 <main+0x8>
      d6:	00 d0       	rcall	.+0      	; 0xd8 <main+0xa>
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~((1<<SW1)|(1<<SW2)|(1<<SW3)|(1<<SW4)|(1<<SW5));
      dc:	a1 e3       	ldi	r26, 0x31	; 49
      de:	b0 e0       	ldi	r27, 0x00	; 0
      e0:	e1 e3       	ldi	r30, 0x31	; 49
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 7e       	andi	r24, 0xE0	; 224
      e8:	8c 93       	st	X, r24

	// IO-port INIT
	DDRA = 0xE0;
      ea:	ea e3       	ldi	r30, 0x3A	; 58
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 ee       	ldi	r24, 0xE0	; 224
      f0:	80 83       	st	Z, r24
 
	LCD_Init_With_Flags(FLAG_LANDSCAPE | FLAG_IGNORE_WHITESPACE);
      f2:	85 e0       	ldi	r24, 0x05	; 5
      f4:	0e 94 a8 02 	call	0x550	; 0x550 <LCD_Init_With_Flags>
		{ 17, 30 },
		{ 16, 30 },
	};
	char food[2];
*/
	bool up,down,left,right = false;
      f8:	1b 82       	std	Y+3, r1	; 0x03

	DrawBox();
      fa:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DrawBox>

	while(true)
	{
		if(~Switch & (1<<SW4))
      fe:	e0 e3       	ldi	r30, 0x30	; 48
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	88 2f       	mov	r24, r24
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	88 70       	andi	r24, 0x08	; 8
     10a:	90 70       	andi	r25, 0x00	; 0
     10c:	00 97       	sbiw	r24, 0x00	; 0
     10e:	39 f4       	brne	.+14     	; 0x11e <main+0x50>
		{
			up = true;
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	8e 83       	std	Y+6, r24	; 0x06
			down = left = right = false;
     114:	1b 82       	std	Y+3, r1	; 0x03
     116:	8b 81       	ldd	r24, Y+3	; 0x03
     118:	8c 83       	std	Y+4, r24	; 0x04
     11a:	8c 81       	ldd	r24, Y+4	; 0x04
     11c:	8d 83       	std	Y+5, r24	; 0x05
		}
		if(~Switch & (1<<SW1))
     11e:	e0 e3       	ldi	r30, 0x30	; 48
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	88 2f       	mov	r24, r24
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	81 70       	andi	r24, 0x01	; 1
     12a:	90 70       	andi	r25, 0x00	; 0
     12c:	00 97       	sbiw	r24, 0x00	; 0
     12e:	39 f4       	brne	.+14     	; 0x13e <main+0x70>
		{
			left = true;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	8c 83       	std	Y+4, r24	; 0x04
			down = up = right = false;
     134:	1b 82       	std	Y+3, r1	; 0x03
     136:	8b 81       	ldd	r24, Y+3	; 0x03
     138:	8e 83       	std	Y+6, r24	; 0x06
     13a:	8e 81       	ldd	r24, Y+6	; 0x06
     13c:	8d 83       	std	Y+5, r24	; 0x05
		}
		if(~Switch & (1<<SW3))
     13e:	e0 e3       	ldi	r30, 0x30	; 48
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	88 2f       	mov	r24, r24
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	84 70       	andi	r24, 0x04	; 4
     14a:	90 70       	andi	r25, 0x00	; 0
     14c:	00 97       	sbiw	r24, 0x00	; 0
     14e:	39 f4       	brne	.+14     	; 0x15e <main+0x90>
		{
			right = true;
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	8b 83       	std	Y+3, r24	; 0x03
			down = left = up = false;
     154:	1e 82       	std	Y+6, r1	; 0x06
     156:	8e 81       	ldd	r24, Y+6	; 0x06
     158:	8c 83       	std	Y+4, r24	; 0x04
     15a:	8c 81       	ldd	r24, Y+4	; 0x04
     15c:	8d 83       	std	Y+5, r24	; 0x05
		}
		if(~Switch & (1<<SW2))
     15e:	e0 e3       	ldi	r30, 0x30	; 48
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	88 2f       	mov	r24, r24
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	82 70       	andi	r24, 0x02	; 2
     16a:	90 70       	andi	r25, 0x00	; 0
     16c:	00 97       	sbiw	r24, 0x00	; 0
     16e:	39 f4       	brne	.+14     	; 0x17e <main+0xb0>
		{
			down = true;
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	8d 83       	std	Y+5, r24	; 0x05
			up = left = right = false;
     174:	1b 82       	std	Y+3, r1	; 0x03
     176:	8b 81       	ldd	r24, Y+3	; 0x03
     178:	8c 83       	std	Y+4, r24	; 0x04
     17a:	8c 81       	ldd	r24, Y+4	; 0x04
     17c:	8e 83       	std	Y+6, r24	; 0x06
		{
			Move(snake, &num_snake_cells, 3);
		}
		
		DrawSnake(snake, num_snake_cells);*/
		for(int i = 20; i < 30; i++)
     17e:	84 e1       	ldi	r24, 0x14	; 20
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9a 83       	std	Y+2, r25	; 0x02
     184:	89 83       	std	Y+1, r24	; 0x01
     186:	0a c0       	rjmp	.+20     	; 0x19c <main+0xce>
		{
		LCD_DrawPixel(20,i);
     188:	99 81       	ldd	r25, Y+1	; 0x01
     18a:	84 e1       	ldi	r24, 0x14	; 20
     18c:	69 2f       	mov	r22, r25
     18e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_DrawPixel>
		{
			Move(snake, &num_snake_cells, 3);
		}
		
		DrawSnake(snake, num_snake_cells);*/
		for(int i = 20; i < 30; i++)
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	9a 81       	ldd	r25, Y+2	; 0x02
     196:	01 96       	adiw	r24, 0x01	; 1
     198:	9a 83       	std	Y+2, r25	; 0x02
     19a:	89 83       	std	Y+1, r24	; 0x01
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	9a 81       	ldd	r25, Y+2	; 0x02
     1a0:	8e 31       	cpi	r24, 0x1E	; 30
     1a2:	91 05       	cpc	r25, r1
     1a4:	8c f3       	brlt	.-30     	; 0x188 <main+0xba>
		{
		LCD_DrawPixel(20,i);
		}
		LCD_Display();
     1a6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <LCD_Display>
     1aa:	a9 cf       	rjmp	.-174    	; 0xfe <main+0x30>

000001ac <DrawBox>:
		LCD_FillRect(screen_x, screen_y, screen_x + 2, screen_y + 2);
	}
}
*/
void DrawBox()
{
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
	LCD_DrawLine(0,0,128,0); //bottom
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	40 e8       	ldi	r20, 0x80	; 128
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	0e 94 6b 05 	call	0xad6	; 0xad6 <LCD_DrawLine>
	LCD_DrawLine(127,1,127,63); //left
     1c0:	8f e7       	ldi	r24, 0x7F	; 127
     1c2:	61 e0       	ldi	r22, 0x01	; 1
     1c4:	4f e7       	ldi	r20, 0x7F	; 127
     1c6:	2f e3       	ldi	r18, 0x3F	; 63
     1c8:	0e 94 6b 05 	call	0xad6	; 0xad6 <LCD_DrawLine>
	LCD_DrawLine(0,1,0,63); //right
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	61 e0       	ldi	r22, 0x01	; 1
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	2f e3       	ldi	r18, 0x3F	; 63
     1d4:	0e 94 6b 05 	call	0xad6	; 0xad6 <LCD_DrawLine>
	LCD_DrawLine(0,63,128,63); //top
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	6f e3       	ldi	r22, 0x3F	; 63
     1dc:	40 e8       	ldi	r20, 0x80	; 128
     1de:	2f e3       	ldi	r18, 0x3F	; 63
     1e0:	0e 94 6b 05 	call	0xad6	; 0xad6 <LCD_DrawLine>
}
     1e4:	cf 91       	pop	r28
     1e6:	df 91       	pop	r29
     1e8:	08 95       	ret

000001ea <LCD_SetFlags>:
	Flips the values of the two arguments
*/
void flip(unsigned char* c1, unsigned char* c2);

void LCD_SetFlags(char flags)
{
     1ea:	df 93       	push	r29
     1ec:	cf 93       	push	r28
     1ee:	0f 92       	push	r0
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	89 83       	std	Y+1, r24	; 0x01
	FLAGS = flags;
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	80 93 66 02 	sts	0x0266, r24
}
     1fc:	0f 90       	pop	r0
     1fe:	cf 91       	pop	r28
     200:	df 91       	pop	r29
     202:	08 95       	ret

00000204 <LCD_Init>:

void LCD_Init()
{
     204:	df 93       	push	r29
     206:	cf 93       	push	r28
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	aa 97       	sbiw	r28, 0x2a	; 42
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	de bf       	out	0x3e, r29	; 62
     214:	0f be       	out	0x3f, r0	; 63
     216:	cd bf       	out	0x3d, r28	; 61
	LCD_DDR |= LCD_RESET_PIN | LCD_DATA_PIN | LCD_CD_PIN | LCD_CLK_PIN | LCD_SCE_PIN;
     218:	a4 e3       	ldi	r26, 0x34	; 52
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	e4 e3       	ldi	r30, 0x34	; 52
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	8f 61       	ori	r24, 0x1F	; 31
     224:	8c 93       	st	X, r24
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	a0 ef       	ldi	r26, 0xF0	; 240
     22c:	b1 e4       	ldi	r27, 0x41	; 65
     22e:	8f a3       	std	Y+39, r24	; 0x27
     230:	98 a7       	std	Y+40, r25	; 0x28
     232:	a9 a7       	std	Y+41, r26	; 0x29
     234:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     236:	6f a1       	ldd	r22, Y+39	; 0x27
     238:	78 a5       	ldd	r23, Y+40	; 0x28
     23a:	89 a5       	ldd	r24, Y+41	; 0x29
     23c:	9a a5       	ldd	r25, Y+42	; 0x2a
     23e:	20 e0       	ldi	r18, 0x00	; 0
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	4a ef       	ldi	r20, 0xFA	; 250
     244:	54 e4       	ldi	r21, 0x44	; 68
     246:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__mulsf3>
     24a:	dc 01       	movw	r26, r24
     24c:	cb 01       	movw	r24, r22
     24e:	8b a3       	std	Y+35, r24	; 0x23
     250:	9c a3       	std	Y+36, r25	; 0x24
     252:	ad a3       	std	Y+37, r26	; 0x25
     254:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     256:	6b a1       	ldd	r22, Y+35	; 0x23
     258:	7c a1       	ldd	r23, Y+36	; 0x24
     25a:	8d a1       	ldd	r24, Y+37	; 0x25
     25c:	9e a1       	ldd	r25, Y+38	; 0x26
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e8       	ldi	r20, 0x80	; 128
     264:	5f e3       	ldi	r21, 0x3F	; 63
     266:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__ltsf2>
     26a:	88 23       	and	r24, r24
     26c:	2c f4       	brge	.+10     	; 0x278 <LCD_Init+0x74>
		__ticks = 1;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	9a a3       	std	Y+34, r25	; 0x22
     274:	89 a3       	std	Y+33, r24	; 0x21
     276:	3f c0       	rjmp	.+126    	; 0x2f6 <LCD_Init+0xf2>
	else if (__tmp > 65535)
     278:	6b a1       	ldd	r22, Y+35	; 0x23
     27a:	7c a1       	ldd	r23, Y+36	; 0x24
     27c:	8d a1       	ldd	r24, Y+37	; 0x25
     27e:	9e a1       	ldd	r25, Y+38	; 0x26
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	3f ef       	ldi	r19, 0xFF	; 255
     284:	4f e7       	ldi	r20, 0x7F	; 127
     286:	57 e4       	ldi	r21, 0x47	; 71
     288:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__gtsf2>
     28c:	18 16       	cp	r1, r24
     28e:	4c f5       	brge	.+82     	; 0x2e2 <LCD_Init+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     290:	6f a1       	ldd	r22, Y+39	; 0x27
     292:	78 a5       	ldd	r23, Y+40	; 0x28
     294:	89 a5       	ldd	r24, Y+41	; 0x29
     296:	9a a5       	ldd	r25, Y+42	; 0x2a
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e2       	ldi	r20, 0x20	; 32
     29e:	51 e4       	ldi	r21, 0x41	; 65
     2a0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__mulsf3>
     2a4:	dc 01       	movw	r26, r24
     2a6:	cb 01       	movw	r24, r22
     2a8:	bc 01       	movw	r22, r24
     2aa:	cd 01       	movw	r24, r26
     2ac:	0e 94 be 0b 	call	0x177c	; 0x177c <__fixunssfsi>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	9a a3       	std	Y+34, r25	; 0x22
     2b6:	89 a3       	std	Y+33, r24	; 0x21
     2b8:	0f c0       	rjmp	.+30     	; 0x2d8 <LCD_Init+0xd4>
     2ba:	88 ec       	ldi	r24, 0xC8	; 200
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	98 a3       	std	Y+32, r25	; 0x20
     2c0:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2c4:	98 a1       	ldd	r25, Y+32	; 0x20
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_Init+0xc2>
     2ca:	98 a3       	std	Y+32, r25	; 0x20
     2cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ce:	89 a1       	ldd	r24, Y+33	; 0x21
     2d0:	9a a1       	ldd	r25, Y+34	; 0x22
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	9a a3       	std	Y+34, r25	; 0x22
     2d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d8:	89 a1       	ldd	r24, Y+33	; 0x21
     2da:	9a a1       	ldd	r25, Y+34	; 0x22
     2dc:	00 97       	sbiw	r24, 0x00	; 0
     2de:	69 f7       	brne	.-38     	; 0x2ba <LCD_Init+0xb6>
     2e0:	14 c0       	rjmp	.+40     	; 0x30a <LCD_Init+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2e2:	6b a1       	ldd	r22, Y+35	; 0x23
     2e4:	7c a1       	ldd	r23, Y+36	; 0x24
     2e6:	8d a1       	ldd	r24, Y+37	; 0x25
     2e8:	9e a1       	ldd	r25, Y+38	; 0x26
     2ea:	0e 94 be 0b 	call	0x177c	; 0x177c <__fixunssfsi>
     2ee:	dc 01       	movw	r26, r24
     2f0:	cb 01       	movw	r24, r22
     2f2:	9a a3       	std	Y+34, r25	; 0x22
     2f4:	89 a3       	std	Y+33, r24	; 0x21
     2f6:	89 a1       	ldd	r24, Y+33	; 0x21
     2f8:	9a a1       	ldd	r25, Y+34	; 0x22
     2fa:	9e 8f       	std	Y+30, r25	; 0x1e
     2fc:	8d 8f       	std	Y+29, r24	; 0x1d
     2fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     300:	9e 8d       	ldd	r25, Y+30	; 0x1e
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <LCD_Init+0xfe>
     306:	9e 8f       	std	Y+30, r25	; 0x1e
     308:	8d 8f       	std	Y+29, r24	; 0x1d

	/*
		RESET THE DISPLAY
	*/
	_delay_ms(30);
	LCD_PORT &= ~LCD_RESET_PIN; //Reset
     30a:	a5 e3       	ldi	r26, 0x35	; 53
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	e5 e3       	ldi	r30, 0x35	; 53
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	8e 7f       	andi	r24, 0xFE	; 254
     316:	8c 93       	st	X, r24
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	a0 ef       	ldi	r26, 0xF0	; 240
     31e:	b1 e4       	ldi	r27, 0x41	; 65
     320:	89 8f       	std	Y+25, r24	; 0x19
     322:	9a 8f       	std	Y+26, r25	; 0x1a
     324:	ab 8f       	std	Y+27, r26	; 0x1b
     326:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     328:	69 8d       	ldd	r22, Y+25	; 0x19
     32a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     32c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     32e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	4a ef       	ldi	r20, 0xFA	; 250
     336:	54 e4       	ldi	r21, 0x44	; 68
     338:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__mulsf3>
     33c:	dc 01       	movw	r26, r24
     33e:	cb 01       	movw	r24, r22
     340:	8d 8b       	std	Y+21, r24	; 0x15
     342:	9e 8b       	std	Y+22, r25	; 0x16
     344:	af 8b       	std	Y+23, r26	; 0x17
     346:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     348:	6d 89       	ldd	r22, Y+21	; 0x15
     34a:	7e 89       	ldd	r23, Y+22	; 0x16
     34c:	8f 89       	ldd	r24, Y+23	; 0x17
     34e:	98 8d       	ldd	r25, Y+24	; 0x18
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	40 e8       	ldi	r20, 0x80	; 128
     356:	5f e3       	ldi	r21, 0x3F	; 63
     358:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__ltsf2>
     35c:	88 23       	and	r24, r24
     35e:	2c f4       	brge	.+10     	; 0x36a <LCD_Init+0x166>
		__ticks = 1;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	9c 8b       	std	Y+20, r25	; 0x14
     366:	8b 8b       	std	Y+19, r24	; 0x13
     368:	3f c0       	rjmp	.+126    	; 0x3e8 <LCD_Init+0x1e4>
	else if (__tmp > 65535)
     36a:	6d 89       	ldd	r22, Y+21	; 0x15
     36c:	7e 89       	ldd	r23, Y+22	; 0x16
     36e:	8f 89       	ldd	r24, Y+23	; 0x17
     370:	98 8d       	ldd	r25, Y+24	; 0x18
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	3f ef       	ldi	r19, 0xFF	; 255
     376:	4f e7       	ldi	r20, 0x7F	; 127
     378:	57 e4       	ldi	r21, 0x47	; 71
     37a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__gtsf2>
     37e:	18 16       	cp	r1, r24
     380:	4c f5       	brge	.+82     	; 0x3d4 <LCD_Init+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     382:	69 8d       	ldd	r22, Y+25	; 0x19
     384:	7a 8d       	ldd	r23, Y+26	; 0x1a
     386:	8b 8d       	ldd	r24, Y+27	; 0x1b
     388:	9c 8d       	ldd	r25, Y+28	; 0x1c
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	40 e2       	ldi	r20, 0x20	; 32
     390:	51 e4       	ldi	r21, 0x41	; 65
     392:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__mulsf3>
     396:	dc 01       	movw	r26, r24
     398:	cb 01       	movw	r24, r22
     39a:	bc 01       	movw	r22, r24
     39c:	cd 01       	movw	r24, r26
     39e:	0e 94 be 0b 	call	0x177c	; 0x177c <__fixunssfsi>
     3a2:	dc 01       	movw	r26, r24
     3a4:	cb 01       	movw	r24, r22
     3a6:	9c 8b       	std	Y+20, r25	; 0x14
     3a8:	8b 8b       	std	Y+19, r24	; 0x13
     3aa:	0f c0       	rjmp	.+30     	; 0x3ca <LCD_Init+0x1c6>
     3ac:	88 ec       	ldi	r24, 0xC8	; 200
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	9a 8b       	std	Y+18, r25	; 0x12
     3b2:	89 8b       	std	Y+17, r24	; 0x11
     3b4:	89 89       	ldd	r24, Y+17	; 0x11
     3b6:	9a 89       	ldd	r25, Y+18	; 0x12
     3b8:	01 97       	sbiw	r24, 0x01	; 1
     3ba:	f1 f7       	brne	.-4      	; 0x3b8 <LCD_Init+0x1b4>
     3bc:	9a 8b       	std	Y+18, r25	; 0x12
     3be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3c0:	8b 89       	ldd	r24, Y+19	; 0x13
     3c2:	9c 89       	ldd	r25, Y+20	; 0x14
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	9c 8b       	std	Y+20, r25	; 0x14
     3c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ca:	8b 89       	ldd	r24, Y+19	; 0x13
     3cc:	9c 89       	ldd	r25, Y+20	; 0x14
     3ce:	00 97       	sbiw	r24, 0x00	; 0
     3d0:	69 f7       	brne	.-38     	; 0x3ac <LCD_Init+0x1a8>
     3d2:	14 c0       	rjmp	.+40     	; 0x3fc <LCD_Init+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3d4:	6d 89       	ldd	r22, Y+21	; 0x15
     3d6:	7e 89       	ldd	r23, Y+22	; 0x16
     3d8:	8f 89       	ldd	r24, Y+23	; 0x17
     3da:	98 8d       	ldd	r25, Y+24	; 0x18
     3dc:	0e 94 be 0b 	call	0x177c	; 0x177c <__fixunssfsi>
     3e0:	dc 01       	movw	r26, r24
     3e2:	cb 01       	movw	r24, r22
     3e4:	9c 8b       	std	Y+20, r25	; 0x14
     3e6:	8b 8b       	std	Y+19, r24	; 0x13
     3e8:	8b 89       	ldd	r24, Y+19	; 0x13
     3ea:	9c 89       	ldd	r25, Y+20	; 0x14
     3ec:	98 8b       	std	Y+16, r25	; 0x10
     3ee:	8f 87       	std	Y+15, r24	; 0x0f
     3f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     3f2:	98 89       	ldd	r25, Y+16	; 0x10
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_Init+0x1f0>
     3f8:	98 8b       	std	Y+16, r25	; 0x10
     3fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	LCD_PORT |= LCD_RESET_PIN;  //Disable Reset
     3fc:	a5 e3       	ldi	r26, 0x35	; 53
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	e5 e3       	ldi	r30, 0x35	; 53
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	81 60       	ori	r24, 0x01	; 1
     408:	8c 93       	st	X, r24
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	a0 ef       	ldi	r26, 0xF0	; 240
     410:	b1 e4       	ldi	r27, 0x41	; 65
     412:	8b 87       	std	Y+11, r24	; 0x0b
     414:	9c 87       	std	Y+12, r25	; 0x0c
     416:	ad 87       	std	Y+13, r26	; 0x0d
     418:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     41a:	6b 85       	ldd	r22, Y+11	; 0x0b
     41c:	7c 85       	ldd	r23, Y+12	; 0x0c
     41e:	8d 85       	ldd	r24, Y+13	; 0x0d
     420:	9e 85       	ldd	r25, Y+14	; 0x0e
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	4a ef       	ldi	r20, 0xFA	; 250
     428:	54 e4       	ldi	r21, 0x44	; 68
     42a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__mulsf3>
     42e:	dc 01       	movw	r26, r24
     430:	cb 01       	movw	r24, r22
     432:	8f 83       	std	Y+7, r24	; 0x07
     434:	98 87       	std	Y+8, r25	; 0x08
     436:	a9 87       	std	Y+9, r26	; 0x09
     438:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     43a:	6f 81       	ldd	r22, Y+7	; 0x07
     43c:	78 85       	ldd	r23, Y+8	; 0x08
     43e:	89 85       	ldd	r24, Y+9	; 0x09
     440:	9a 85       	ldd	r25, Y+10	; 0x0a
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	40 e8       	ldi	r20, 0x80	; 128
     448:	5f e3       	ldi	r21, 0x3F	; 63
     44a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__ltsf2>
     44e:	88 23       	and	r24, r24
     450:	2c f4       	brge	.+10     	; 0x45c <LCD_Init+0x258>
		__ticks = 1;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	9e 83       	std	Y+6, r25	; 0x06
     458:	8d 83       	std	Y+5, r24	; 0x05
     45a:	3f c0       	rjmp	.+126    	; 0x4da <LCD_Init+0x2d6>
	else if (__tmp > 65535)
     45c:	6f 81       	ldd	r22, Y+7	; 0x07
     45e:	78 85       	ldd	r23, Y+8	; 0x08
     460:	89 85       	ldd	r24, Y+9	; 0x09
     462:	9a 85       	ldd	r25, Y+10	; 0x0a
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	3f ef       	ldi	r19, 0xFF	; 255
     468:	4f e7       	ldi	r20, 0x7F	; 127
     46a:	57 e4       	ldi	r21, 0x47	; 71
     46c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__gtsf2>
     470:	18 16       	cp	r1, r24
     472:	4c f5       	brge	.+82     	; 0x4c6 <LCD_Init+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     474:	6b 85       	ldd	r22, Y+11	; 0x0b
     476:	7c 85       	ldd	r23, Y+12	; 0x0c
     478:	8d 85       	ldd	r24, Y+13	; 0x0d
     47a:	9e 85       	ldd	r25, Y+14	; 0x0e
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	40 e2       	ldi	r20, 0x20	; 32
     482:	51 e4       	ldi	r21, 0x41	; 65
     484:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__mulsf3>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	bc 01       	movw	r22, r24
     48e:	cd 01       	movw	r24, r26
     490:	0e 94 be 0b 	call	0x177c	; 0x177c <__fixunssfsi>
     494:	dc 01       	movw	r26, r24
     496:	cb 01       	movw	r24, r22
     498:	9e 83       	std	Y+6, r25	; 0x06
     49a:	8d 83       	std	Y+5, r24	; 0x05
     49c:	0f c0       	rjmp	.+30     	; 0x4bc <LCD_Init+0x2b8>
     49e:	88 ec       	ldi	r24, 0xC8	; 200
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	9c 83       	std	Y+4, r25	; 0x04
     4a4:	8b 83       	std	Y+3, r24	; 0x03
     4a6:	8b 81       	ldd	r24, Y+3	; 0x03
     4a8:	9c 81       	ldd	r25, Y+4	; 0x04
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCD_Init+0x2a6>
     4ae:	9c 83       	std	Y+4, r25	; 0x04
     4b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4b2:	8d 81       	ldd	r24, Y+5	; 0x05
     4b4:	9e 81       	ldd	r25, Y+6	; 0x06
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	9e 83       	std	Y+6, r25	; 0x06
     4ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4bc:	8d 81       	ldd	r24, Y+5	; 0x05
     4be:	9e 81       	ldd	r25, Y+6	; 0x06
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	69 f7       	brne	.-38     	; 0x49e <LCD_Init+0x29a>
     4c4:	14 c0       	rjmp	.+40     	; 0x4ee <LCD_Init+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4c6:	6f 81       	ldd	r22, Y+7	; 0x07
     4c8:	78 85       	ldd	r23, Y+8	; 0x08
     4ca:	89 85       	ldd	r24, Y+9	; 0x09
     4cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ce:	0e 94 be 0b 	call	0x177c	; 0x177c <__fixunssfsi>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	9e 83       	std	Y+6, r25	; 0x06
     4d8:	8d 83       	std	Y+5, r24	; 0x05
     4da:	8d 81       	ldd	r24, Y+5	; 0x05
     4dc:	9e 81       	ldd	r25, Y+6	; 0x06
     4de:	9a 83       	std	Y+2, r25	; 0x02
     4e0:	89 83       	std	Y+1, r24	; 0x01
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LCD_Init+0x2e2>
     4ea:	9a 83       	std	Y+2, r25	; 0x02
     4ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

	sendData(0xEB, CMD); // LCD-Bias
     4ee:	8b ee       	ldi	r24, 0xEB	; 235
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>
	sendData(0x23, CMD); // 64 rows
     4f6:	83 e2       	ldi	r24, 0x23	; 35
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>
	sendData(0x81, CMD); // Potentiometer
     4fe:	81 e8       	ldi	r24, 0x81	; 129
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>
	sendData(0x64, CMD); // Contrast
     506:	84 e6       	ldi	r24, 0x64	; 100
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>
	sendData(0xAF, CMD); // Enable display
     50e:	8f ea       	ldi	r24, 0xAF	; 175
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>
	sendData(0xCC, CMD); // RAM Mapping
     516:	8c ec       	ldi	r24, 0xCC	; 204
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>

	if(FLAGS & FLAG_INVERTED) sendData(0xA7, CMD); // Inversion
     51e:	80 91 66 02 	lds	r24, 0x0266
     522:	88 2f       	mov	r24, r24
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	82 70       	andi	r24, 0x02	; 2
     528:	90 70       	andi	r25, 0x00	; 0
     52a:	00 97       	sbiw	r24, 0x00	; 0
     52c:	21 f0       	breq	.+8      	; 0x536 <LCD_Init+0x332>
     52e:	87 ea       	ldi	r24, 0xA7	; 167
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>

	LCD_Clear(); // Clear the buffer
     536:	0e 94 b4 04 	call	0x968	; 0x968 <LCD_Clear>
	LCD_Display(); // Send the clear buffer to display
     53a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <LCD_Display>
}
     53e:	aa 96       	adiw	r28, 0x2a	; 42
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	cf 91       	pop	r28
     54c:	df 91       	pop	r29
     54e:	08 95       	ret

00000550 <LCD_Init_With_Flags>:

void LCD_Init_With_Flags(char flags)
{
     550:	df 93       	push	r29
     552:	cf 93       	push	r28
     554:	0f 92       	push	r0
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	89 83       	std	Y+1, r24	; 0x01
	LCD_SetFlags(flags);
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_SetFlags>
	LCD_Init();
     562:	0e 94 02 01 	call	0x204	; 0x204 <LCD_Init>
}
     566:	0f 90       	pop	r0
     568:	cf 91       	pop	r28
     56a:	df 91       	pop	r29
     56c:	08 95       	ret

0000056e <sendData>:
	sendData(uchar CD, uchar DATA)
	CD = Command/Data (0 = Command, 1 = Data)
	DATA = 8 bits of data
*/
void sendData(unsigned char data, unsigned char CD)
{
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	00 d0       	rcall	.+0      	; 0x574 <sendData+0x6>
     574:	00 d0       	rcall	.+0      	; 0x576 <sendData+0x8>
     576:	00 d0       	rcall	.+0      	; 0x578 <sendData+0xa>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	8d 83       	std	Y+5, r24	; 0x05
     57e:	6e 83       	std	Y+6, r22	; 0x06
	int j;

	// Enable display controller (LOW active)
	LCD_PORT &= ~LCD_SCE_PIN;
     580:	a5 e3       	ldi	r26, 0x35	; 53
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	e5 e3       	ldi	r30, 0x35	; 53
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	8d 7f       	andi	r24, 0xFD	; 253
     58c:	8c 93       	st	X, r24

	if(CD == 1) LCD_PORT |=  LCD_CD_PIN; // Data
     58e:	8e 81       	ldd	r24, Y+6	; 0x06
     590:	81 30       	cpi	r24, 0x01	; 1
     592:	41 f4       	brne	.+16     	; 0x5a4 <sendData+0x36>
     594:	a5 e3       	ldi	r26, 0x35	; 53
     596:	b0 e0       	ldi	r27, 0x00	; 0
     598:	e5 e3       	ldi	r30, 0x35	; 53
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	84 60       	ori	r24, 0x04	; 4
     5a0:	8c 93       	st	X, r24
     5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <sendData+0x44>
	else        LCD_PORT &= ~LCD_CD_PIN; // Command
     5a4:	a5 e3       	ldi	r26, 0x35	; 53
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	e5 e3       	ldi	r30, 0x35	; 53
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	8b 7f       	andi	r24, 0xFB	; 251
     5b0:	8c 93       	st	X, r24

	for(int i = 0;i < 8;i++) // Send all the bits to driver
     5b2:	1a 82       	std	Y+2, r1	; 0x02
     5b4:	19 82       	std	Y+1, r1	; 0x01
     5b6:	45 c0       	rjmp	.+138    	; 0x642 <sendData+0xd4>
	{
		if((data >> (7 - i)) & 1)     LCD_PORT |=  LCD_DATA_PIN; // If the data is 1
     5b8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ba:	48 2f       	mov	r20, r24
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	27 e0       	ldi	r18, 0x07	; 7
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	9a 81       	ldd	r25, Y+2	; 0x02
     5c6:	b9 01       	movw	r22, r18
     5c8:	68 1b       	sub	r22, r24
     5ca:	79 0b       	sbc	r23, r25
     5cc:	cb 01       	movw	r24, r22
     5ce:	9a 01       	movw	r18, r20
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <sendData+0x68>
     5d2:	35 95       	asr	r19
     5d4:	27 95       	ror	r18
     5d6:	8a 95       	dec	r24
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <sendData+0x64>
     5da:	c9 01       	movw	r24, r18
     5dc:	81 70       	andi	r24, 0x01	; 1
     5de:	90 70       	andi	r25, 0x00	; 0
     5e0:	88 23       	and	r24, r24
     5e2:	41 f0       	breq	.+16     	; 0x5f4 <sendData+0x86>
     5e4:	a5 e3       	ldi	r26, 0x35	; 53
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	e5 e3       	ldi	r30, 0x35	; 53
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 81       	ld	r24, Z
     5ee:	88 60       	ori	r24, 0x08	; 8
     5f0:	8c 93       	st	X, r24
     5f2:	07 c0       	rjmp	.+14     	; 0x602 <sendData+0x94>
		else                      LCD_PORT &= ~LCD_DATA_PIN; // If the data is 0
     5f4:	a5 e3       	ldi	r26, 0x35	; 53
     5f6:	b0 e0       	ldi	r27, 0x00	; 0
     5f8:	e5 e3       	ldi	r30, 0x35	; 53
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	87 7f       	andi	r24, 0xF7	; 247
     600:	8c 93       	st	X, r24
		// Toggle clock pin
		LCD_PORT |= LCD_CLK_PIN; 
     602:	a5 e3       	ldi	r26, 0x35	; 53
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	e5 e3       	ldi	r30, 0x35	; 53
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	80 61       	ori	r24, 0x10	; 16
     60e:	8c 93       	st	X, r24
		for(j = 0;j < 4;j++);
     610:	1c 82       	std	Y+4, r1	; 0x04
     612:	1b 82       	std	Y+3, r1	; 0x03
     614:	05 c0       	rjmp	.+10     	; 0x620 <sendData+0xb2>
     616:	8b 81       	ldd	r24, Y+3	; 0x03
     618:	9c 81       	ldd	r25, Y+4	; 0x04
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	9c 83       	std	Y+4, r25	; 0x04
     61e:	8b 83       	std	Y+3, r24	; 0x03
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	9c 81       	ldd	r25, Y+4	; 0x04
     624:	84 30       	cpi	r24, 0x04	; 4
     626:	91 05       	cpc	r25, r1
     628:	b4 f3       	brlt	.-20     	; 0x616 <sendData+0xa8>
		LCD_PORT &= ~LCD_CLK_PIN;
     62a:	a5 e3       	ldi	r26, 0x35	; 53
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	e5 e3       	ldi	r30, 0x35	; 53
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	8f 7e       	andi	r24, 0xEF	; 239
     636:	8c 93       	st	X, r24
	LCD_PORT &= ~LCD_SCE_PIN;

	if(CD == 1) LCD_PORT |=  LCD_CD_PIN; // Data
	else        LCD_PORT &= ~LCD_CD_PIN; // Command

	for(int i = 0;i < 8;i++) // Send all the bits to driver
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	9a 81       	ldd	r25, Y+2	; 0x02
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	9a 83       	std	Y+2, r25	; 0x02
     640:	89 83       	std	Y+1, r24	; 0x01
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	9a 81       	ldd	r25, Y+2	; 0x02
     646:	88 30       	cpi	r24, 0x08	; 8
     648:	91 05       	cpc	r25, r1
     64a:	0c f4       	brge	.+2      	; 0x64e <sendData+0xe0>
     64c:	b5 cf       	rjmp	.-150    	; 0x5b8 <sendData+0x4a>
		for(j = 0;j < 4;j++);
		LCD_PORT &= ~LCD_CLK_PIN;
	}

	// Disable display controller (LOW active)
	LCD_PORT |= LCD_SCE_PIN;
     64e:	a5 e3       	ldi	r26, 0x35	; 53
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	e5 e3       	ldi	r30, 0x35	; 53
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	80 81       	ld	r24, Z
     658:	82 60       	ori	r24, 0x02	; 2
     65a:	8c 93       	st	X, r24
}
     65c:	26 96       	adiw	r28, 0x06	; 6
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	cf 91       	pop	r28
     66a:	df 91       	pop	r29
     66c:	08 95       	ret

0000066e <LCD_Test>:

void LCD_Test()
{
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
	sendData(0xA5, CMD);
     676:	85 ea       	ldi	r24, 0xA5	; 165
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>
}
     67e:	cf 91       	pop	r28
     680:	df 91       	pop	r29
     682:	08 95       	ret

00000684 <LCD_Invert>:

void LCD_Invert()
{
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	0f 92       	push	r0
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
	if(FLAGS & FLAG_INVERTED) FLAGS &= ~(1 << FLAG_INVERTED);
     68e:	80 91 66 02 	lds	r24, 0x0266
     692:	88 2f       	mov	r24, r24
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	82 70       	andi	r24, 0x02	; 2
     698:	90 70       	andi	r25, 0x00	; 0
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	31 f0       	breq	.+12     	; 0x6aa <LCD_Invert+0x26>
     69e:	80 91 66 02 	lds	r24, 0x0266
     6a2:	8b 7f       	andi	r24, 0xFB	; 251
     6a4:	80 93 66 02 	sts	0x0266, r24
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <LCD_Invert+0x30>
	else FLAGS |= FLAG_INVERTED;
     6aa:	80 91 66 02 	lds	r24, 0x0266
     6ae:	82 60       	ori	r24, 0x02	; 2
     6b0:	80 93 66 02 	sts	0x0266, r24
	sendData(0xA6 + ((FLAGS & FLAG_INVERTED) > 0 ? 1 : 0), CMD);
     6b4:	80 91 66 02 	lds	r24, 0x0266
     6b8:	88 2f       	mov	r24, r24
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	82 70       	andi	r24, 0x02	; 2
     6be:	90 70       	andi	r25, 0x00	; 0
     6c0:	18 16       	cp	r1, r24
     6c2:	19 06       	cpc	r1, r25
     6c4:	1c f4       	brge	.+6      	; 0x6cc <LCD_Invert+0x48>
     6c6:	87 ea       	ldi	r24, 0xA7	; 167
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <LCD_Invert+0x4c>
     6cc:	86 ea       	ldi	r24, 0xA6	; 166
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>
}
     6d8:	0f 90       	pop	r0
     6da:	cf 91       	pop	r28
     6dc:	df 91       	pop	r29
     6de:	08 95       	ret

000006e0 <LCD_DrawPixel>:

void LCD_DrawPixel(unsigned char x, unsigned char y)
{
     6e0:	df 93       	push	r29
     6e2:	cf 93       	push	r28
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <LCD_DrawPixel+0x6>
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <LCD_DrawPixel+0x8>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	8b 83       	std	Y+3, r24	; 0x03
     6ee:	6c 83       	std	Y+4, r22	; 0x04
	if((FLAGS & FLAG_LANDSCAPE) == 0)
     6f0:	80 91 66 02 	lds	r24, 0x0266
     6f4:	88 2f       	mov	r24, r24
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	81 70       	andi	r24, 0x01	; 1
     6fa:	90 70       	andi	r25, 0x00	; 0
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	09 f0       	breq	.+2      	; 0x702 <LCD_DrawPixel+0x22>
     700:	43 c0       	rjmp	.+134    	; 0x788 <LCD_DrawPixel+0xa8>
	{
		if(x >= WIDTH || y >= HEIGHT) return;
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	80 34       	cpi	r24, 0x40	; 64
     706:	08 f0       	brcs	.+2      	; 0x70a <LCD_DrawPixel+0x2a>
     708:	85 c0       	rjmp	.+266    	; 0x814 <LCD_DrawPixel+0x134>
     70a:	8c 81       	ldd	r24, Y+4	; 0x04
     70c:	88 23       	and	r24, r24
     70e:	0c f4       	brge	.+2      	; 0x712 <LCD_DrawPixel+0x32>
     710:	81 c0       	rjmp	.+258    	; 0x814 <LCD_DrawPixel+0x134>
		buffer[(x / 8) * 128 + y] |= (1 << (7 - x % 8));
     712:	8b 81       	ldd	r24, Y+3	; 0x03
     714:	48 2f       	mov	r20, r24
     716:	46 95       	lsr	r20
     718:	46 95       	lsr	r20
     71a:	46 95       	lsr	r20
     71c:	84 2f       	mov	r24, r20
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	9c 01       	movw	r18, r24
     722:	36 95       	lsr	r19
     724:	32 2f       	mov	r19, r18
     726:	22 27       	eor	r18, r18
     728:	37 95       	ror	r19
     72a:	27 95       	ror	r18
     72c:	8c 81       	ldd	r24, Y+4	; 0x04
     72e:	88 2f       	mov	r24, r24
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	b9 01       	movw	r22, r18
     734:	68 0f       	add	r22, r24
     736:	79 1f       	adc	r23, r25
     738:	84 2f       	mov	r24, r20
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	9c 01       	movw	r18, r24
     73e:	36 95       	lsr	r19
     740:	32 2f       	mov	r19, r18
     742:	22 27       	eor	r18, r18
     744:	37 95       	ror	r19
     746:	27 95       	ror	r18
     748:	8c 81       	ldd	r24, Y+4	; 0x04
     74a:	88 2f       	mov	r24, r24
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	82 0f       	add	r24, r18
     750:	93 1f       	adc	r25, r19
     752:	fc 01       	movw	r30, r24
     754:	e4 59       	subi	r30, 0x94	; 148
     756:	f9 4f       	sbci	r31, 0xF9	; 249
     758:	80 81       	ld	r24, Z
     75a:	48 2f       	mov	r20, r24
     75c:	8b 81       	ldd	r24, Y+3	; 0x03
     75e:	88 2f       	mov	r24, r24
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	80 95       	com	r24
     764:	90 95       	com	r25
     766:	9c 01       	movw	r18, r24
     768:	27 70       	andi	r18, 0x07	; 7
     76a:	30 70       	andi	r19, 0x00	; 0
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	02 2e       	mov	r0, r18
     772:	02 c0       	rjmp	.+4      	; 0x778 <LCD_DrawPixel+0x98>
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	0a 94       	dec	r0
     77a:	e2 f7       	brpl	.-8      	; 0x774 <LCD_DrawPixel+0x94>
     77c:	84 2b       	or	r24, r20
     77e:	fb 01       	movw	r30, r22
     780:	e4 59       	subi	r30, 0x94	; 148
     782:	f9 4f       	sbci	r31, 0xF9	; 249
     784:	80 83       	st	Z, r24
     786:	46 c0       	rjmp	.+140    	; 0x814 <LCD_DrawPixel+0x134>
	}
	else
	{
		unsigned char tempX = x;
     788:	8b 81       	ldd	r24, Y+3	; 0x03
     78a:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char tempY = y;
     78c:	8c 81       	ldd	r24, Y+4	; 0x04
     78e:	89 83       	std	Y+1, r24	; 0x01
		x = 63 - tempY;
     790:	9f e3       	ldi	r25, 0x3F	; 63
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	29 2f       	mov	r18, r25
     796:	28 1b       	sub	r18, r24
     798:	82 2f       	mov	r24, r18
     79a:	8b 83       	std	Y+3, r24	; 0x03
		y = tempX;
     79c:	8a 81       	ldd	r24, Y+2	; 0x02
     79e:	8c 83       	std	Y+4, r24	; 0x04
		buffer[(x / 8) * 128 + y] |= (1 << (7 - x % 8));
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	48 2f       	mov	r20, r24
     7a4:	46 95       	lsr	r20
     7a6:	46 95       	lsr	r20
     7a8:	46 95       	lsr	r20
     7aa:	84 2f       	mov	r24, r20
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9c 01       	movw	r18, r24
     7b0:	36 95       	lsr	r19
     7b2:	32 2f       	mov	r19, r18
     7b4:	22 27       	eor	r18, r18
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	88 2f       	mov	r24, r24
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	b9 01       	movw	r22, r18
     7c2:	68 0f       	add	r22, r24
     7c4:	79 1f       	adc	r23, r25
     7c6:	84 2f       	mov	r24, r20
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	9c 01       	movw	r18, r24
     7cc:	36 95       	lsr	r19
     7ce:	32 2f       	mov	r19, r18
     7d0:	22 27       	eor	r18, r18
     7d2:	37 95       	ror	r19
     7d4:	27 95       	ror	r18
     7d6:	8c 81       	ldd	r24, Y+4	; 0x04
     7d8:	88 2f       	mov	r24, r24
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	82 0f       	add	r24, r18
     7de:	93 1f       	adc	r25, r19
     7e0:	fc 01       	movw	r30, r24
     7e2:	e4 59       	subi	r30, 0x94	; 148
     7e4:	f9 4f       	sbci	r31, 0xF9	; 249
     7e6:	80 81       	ld	r24, Z
     7e8:	48 2f       	mov	r20, r24
     7ea:	8b 81       	ldd	r24, Y+3	; 0x03
     7ec:	88 2f       	mov	r24, r24
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	80 95       	com	r24
     7f2:	90 95       	com	r25
     7f4:	9c 01       	movw	r18, r24
     7f6:	27 70       	andi	r18, 0x07	; 7
     7f8:	30 70       	andi	r19, 0x00	; 0
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	02 2e       	mov	r0, r18
     800:	02 c0       	rjmp	.+4      	; 0x806 <LCD_DrawPixel+0x126>
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	0a 94       	dec	r0
     808:	e2 f7       	brpl	.-8      	; 0x802 <LCD_DrawPixel+0x122>
     80a:	84 2b       	or	r24, r20
     80c:	fb 01       	movw	r30, r22
     80e:	e4 59       	subi	r30, 0x94	; 148
     810:	f9 4f       	sbci	r31, 0xF9	; 249
     812:	80 83       	st	Z, r24
	}
}
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	cf 91       	pop	r28
     81e:	df 91       	pop	r29
     820:	08 95       	ret

00000822 <LCD_ClearPixel>:

void LCD_ClearPixel(unsigned char x, unsigned char y)
{
     822:	df 93       	push	r29
     824:	cf 93       	push	r28
     826:	00 d0       	rcall	.+0      	; 0x828 <LCD_ClearPixel+0x6>
     828:	00 d0       	rcall	.+0      	; 0x82a <LCD_ClearPixel+0x8>
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	8b 83       	std	Y+3, r24	; 0x03
     830:	6c 83       	std	Y+4, r22	; 0x04
	if((FLAGS & FLAG_LANDSCAPE) == 0)
     832:	80 91 66 02 	lds	r24, 0x0266
     836:	88 2f       	mov	r24, r24
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	81 70       	andi	r24, 0x01	; 1
     83c:	90 70       	andi	r25, 0x00	; 0
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	09 f0       	breq	.+2      	; 0x844 <LCD_ClearPixel+0x22>
     842:	44 c0       	rjmp	.+136    	; 0x8cc <LCD_ClearPixel+0xaa>
	{
		if(x >= WIDTH || y >= HEIGHT) return;
     844:	8b 81       	ldd	r24, Y+3	; 0x03
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	08 f0       	brcs	.+2      	; 0x84c <LCD_ClearPixel+0x2a>
     84a:	87 c0       	rjmp	.+270    	; 0x95a <LCD_ClearPixel+0x138>
     84c:	8c 81       	ldd	r24, Y+4	; 0x04
     84e:	88 23       	and	r24, r24
     850:	0c f4       	brge	.+2      	; 0x854 <LCD_ClearPixel+0x32>
     852:	83 c0       	rjmp	.+262    	; 0x95a <LCD_ClearPixel+0x138>
		buffer[(x / 8) * 128 + y] &= ~(1 << (7 - x % 8));
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	48 2f       	mov	r20, r24
     858:	46 95       	lsr	r20
     85a:	46 95       	lsr	r20
     85c:	46 95       	lsr	r20
     85e:	84 2f       	mov	r24, r20
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9c 01       	movw	r18, r24
     864:	36 95       	lsr	r19
     866:	32 2f       	mov	r19, r18
     868:	22 27       	eor	r18, r18
     86a:	37 95       	ror	r19
     86c:	27 95       	ror	r18
     86e:	8c 81       	ldd	r24, Y+4	; 0x04
     870:	88 2f       	mov	r24, r24
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	b9 01       	movw	r22, r18
     876:	68 0f       	add	r22, r24
     878:	79 1f       	adc	r23, r25
     87a:	84 2f       	mov	r24, r20
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	9c 01       	movw	r18, r24
     880:	36 95       	lsr	r19
     882:	32 2f       	mov	r19, r18
     884:	22 27       	eor	r18, r18
     886:	37 95       	ror	r19
     888:	27 95       	ror	r18
     88a:	8c 81       	ldd	r24, Y+4	; 0x04
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	82 0f       	add	r24, r18
     892:	93 1f       	adc	r25, r19
     894:	fc 01       	movw	r30, r24
     896:	e4 59       	subi	r30, 0x94	; 148
     898:	f9 4f       	sbci	r31, 0xF9	; 249
     89a:	80 81       	ld	r24, Z
     89c:	48 2f       	mov	r20, r24
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	80 95       	com	r24
     8a6:	90 95       	com	r25
     8a8:	9c 01       	movw	r18, r24
     8aa:	27 70       	andi	r18, 0x07	; 7
     8ac:	30 70       	andi	r19, 0x00	; 0
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	02 2e       	mov	r0, r18
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <LCD_ClearPixel+0x98>
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	0a 94       	dec	r0
     8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <LCD_ClearPixel+0x94>
     8be:	80 95       	com	r24
     8c0:	84 23       	and	r24, r20
     8c2:	fb 01       	movw	r30, r22
     8c4:	e4 59       	subi	r30, 0x94	; 148
     8c6:	f9 4f       	sbci	r31, 0xF9	; 249
     8c8:	80 83       	st	Z, r24
     8ca:	47 c0       	rjmp	.+142    	; 0x95a <LCD_ClearPixel+0x138>
	}
	else
	{
		unsigned char tempX = x;
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char tempY = y;
     8d0:	8c 81       	ldd	r24, Y+4	; 0x04
     8d2:	89 83       	std	Y+1, r24	; 0x01
		x = 63 - tempY;
     8d4:	9f e3       	ldi	r25, 0x3F	; 63
     8d6:	89 81       	ldd	r24, Y+1	; 0x01
     8d8:	29 2f       	mov	r18, r25
     8da:	28 1b       	sub	r18, r24
     8dc:	82 2f       	mov	r24, r18
     8de:	8b 83       	std	Y+3, r24	; 0x03
		y = tempX;
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	8c 83       	std	Y+4, r24	; 0x04
		buffer[(x / 8) * 128 + y] &= ~(1 << (7 - x % 8));
     8e4:	8b 81       	ldd	r24, Y+3	; 0x03
     8e6:	48 2f       	mov	r20, r24
     8e8:	46 95       	lsr	r20
     8ea:	46 95       	lsr	r20
     8ec:	46 95       	lsr	r20
     8ee:	84 2f       	mov	r24, r20
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	9c 01       	movw	r18, r24
     8f4:	36 95       	lsr	r19
     8f6:	32 2f       	mov	r19, r18
     8f8:	22 27       	eor	r18, r18
     8fa:	37 95       	ror	r19
     8fc:	27 95       	ror	r18
     8fe:	8c 81       	ldd	r24, Y+4	; 0x04
     900:	88 2f       	mov	r24, r24
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	b9 01       	movw	r22, r18
     906:	68 0f       	add	r22, r24
     908:	79 1f       	adc	r23, r25
     90a:	84 2f       	mov	r24, r20
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	9c 01       	movw	r18, r24
     910:	36 95       	lsr	r19
     912:	32 2f       	mov	r19, r18
     914:	22 27       	eor	r18, r18
     916:	37 95       	ror	r19
     918:	27 95       	ror	r18
     91a:	8c 81       	ldd	r24, Y+4	; 0x04
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	82 0f       	add	r24, r18
     922:	93 1f       	adc	r25, r19
     924:	fc 01       	movw	r30, r24
     926:	e4 59       	subi	r30, 0x94	; 148
     928:	f9 4f       	sbci	r31, 0xF9	; 249
     92a:	80 81       	ld	r24, Z
     92c:	48 2f       	mov	r20, r24
     92e:	8b 81       	ldd	r24, Y+3	; 0x03
     930:	88 2f       	mov	r24, r24
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	80 95       	com	r24
     936:	90 95       	com	r25
     938:	9c 01       	movw	r18, r24
     93a:	27 70       	andi	r18, 0x07	; 7
     93c:	30 70       	andi	r19, 0x00	; 0
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	02 2e       	mov	r0, r18
     944:	02 c0       	rjmp	.+4      	; 0x94a <LCD_ClearPixel+0x128>
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	0a 94       	dec	r0
     94c:	e2 f7       	brpl	.-8      	; 0x946 <LCD_ClearPixel+0x124>
     94e:	80 95       	com	r24
     950:	84 23       	and	r24, r20
     952:	fb 01       	movw	r30, r22
     954:	e4 59       	subi	r30, 0x94	; 148
     956:	f9 4f       	sbci	r31, 0xF9	; 249
     958:	80 83       	st	Z, r24
	}
}
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	cf 91       	pop	r28
     964:	df 91       	pop	r29
     966:	08 95       	ret

00000968 <LCD_Clear>:

void LCD_Clear()
{
     968:	df 93       	push	r29
     96a:	cf 93       	push	r28
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
	memset(buffer, 0, sizeof(buffer));
     970:	8c e6       	ldi	r24, 0x6C	; 108
     972:	96 e0       	ldi	r25, 0x06	; 6
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	54 e0       	ldi	r21, 0x04	; 4
     97c:	0e 94 58 11 	call	0x22b0	; 0x22b0 <memset>
}
     980:	cf 91       	pop	r28
     982:	df 91       	pop	r29
     984:	08 95       	ret

00000986 <LCD_ClearArea>:

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     986:	df 93       	push	r29
     988:	cf 93       	push	r28
     98a:	00 d0       	rcall	.+0      	; 0x98c <LCD_ClearArea+0x6>
     98c:	00 d0       	rcall	.+0      	; 0x98e <LCD_ClearArea+0x8>
     98e:	00 d0       	rcall	.+0      	; 0x990 <LCD_ClearArea+0xa>
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	8b 83       	std	Y+3, r24	; 0x03
     996:	6c 83       	std	Y+4, r22	; 0x04
     998:	4d 83       	std	Y+5, r20	; 0x05
     99a:	2e 83       	std	Y+6, r18	; 0x06
	for(char y = y0;y < y1;y++)
     99c:	8c 81       	ldd	r24, Y+4	; 0x04
     99e:	8a 83       	std	Y+2, r24	; 0x02
     9a0:	11 c0       	rjmp	.+34     	; 0x9c4 <LCD_ClearArea+0x3e>
	{
		for(char x = x0;x < x1;x++)
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	89 83       	std	Y+1, r24	; 0x01
     9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <LCD_ClearArea+0x30>
		{
			LCD_ClearPixel(x, y);
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	6a 81       	ldd	r22, Y+2	; 0x02
     9ac:	0e 94 11 04 	call	0x822	; 0x822 <LCD_ClearPixel>

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(char y = y0;y < y1;y++)
	{
		for(char x = x0;x < x1;x++)
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	8f 5f       	subi	r24, 0xFF	; 255
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	99 81       	ldd	r25, Y+1	; 0x01
     9b8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ba:	98 17       	cp	r25, r24
     9bc:	a8 f3       	brcs	.-22     	; 0x9a8 <LCD_ClearArea+0x22>
	memset(buffer, 0, sizeof(buffer));
}

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(char y = y0;y < y1;y++)
     9be:	8a 81       	ldd	r24, Y+2	; 0x02
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	8a 83       	std	Y+2, r24	; 0x02
     9c4:	9a 81       	ldd	r25, Y+2	; 0x02
     9c6:	8e 81       	ldd	r24, Y+6	; 0x06
     9c8:	98 17       	cp	r25, r24
     9ca:	58 f3       	brcs	.-42     	; 0x9a2 <LCD_ClearArea+0x1c>
		for(char x = x0;x < x1;x++)
		{
			LCD_ClearPixel(x, y);
		}
	}
}
     9cc:	26 96       	adiw	r28, 0x06	; 6
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	cf 91       	pop	r28
     9da:	df 91       	pop	r29
     9dc:	08 95       	ret

000009de <LCD_DrawRect>:

void LCD_DrawRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     9de:	df 93       	push	r29
     9e0:	cf 93       	push	r28
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <LCD_DrawRect+0x6>
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <LCD_DrawRect+0x8>
     9e6:	00 d0       	rcall	.+0      	; 0x9e8 <LCD_DrawRect+0xa>
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	8b 83       	std	Y+3, r24	; 0x03
     9ee:	6c 83       	std	Y+4, r22	; 0x04
     9f0:	4d 83       	std	Y+5, r20	; 0x05
     9f2:	2e 83       	std	Y+6, r18	; 0x06
	for(unsigned char x = x0;x <= x1;x++)
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	8a 83       	std	Y+2, r24	; 0x02
     9f8:	0b c0       	rjmp	.+22     	; 0xa10 <LCD_DrawRect+0x32>
	{
		LCD_DrawPixel(x, y0);
     9fa:	8a 81       	ldd	r24, Y+2	; 0x02
     9fc:	6c 81       	ldd	r22, Y+4	; 0x04
     9fe:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_DrawPixel>
		LCD_DrawPixel(x, y1);
     a02:	8a 81       	ldd	r24, Y+2	; 0x02
     a04:	6e 81       	ldd	r22, Y+6	; 0x06
     a06:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_DrawPixel>
	}
}

void LCD_DrawRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(unsigned char x = x0;x <= x1;x++)
     a0a:	8a 81       	ldd	r24, Y+2	; 0x02
     a0c:	8f 5f       	subi	r24, 0xFF	; 255
     a0e:	8a 83       	std	Y+2, r24	; 0x02
     a10:	9a 81       	ldd	r25, Y+2	; 0x02
     a12:	8d 81       	ldd	r24, Y+5	; 0x05
     a14:	89 17       	cp	r24, r25
     a16:	88 f7       	brcc	.-30     	; 0x9fa <LCD_DrawRect+0x1c>
	{
		LCD_DrawPixel(x, y0);
		LCD_DrawPixel(x, y1);
	}
	for(unsigned char y = y0;y <= y1;y++)
     a18:	8c 81       	ldd	r24, Y+4	; 0x04
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	0b c0       	rjmp	.+22     	; 0xa34 <LCD_DrawRect+0x56>
	{
		LCD_DrawPixel(x0, y);
     a1e:	8b 81       	ldd	r24, Y+3	; 0x03
     a20:	69 81       	ldd	r22, Y+1	; 0x01
     a22:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_DrawPixel>
		LCD_DrawPixel(x1, y);
     a26:	8d 81       	ldd	r24, Y+5	; 0x05
     a28:	69 81       	ldd	r22, Y+1	; 0x01
     a2a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_DrawPixel>
	for(unsigned char x = x0;x <= x1;x++)
	{
		LCD_DrawPixel(x, y0);
		LCD_DrawPixel(x, y1);
	}
	for(unsigned char y = y0;y <= y1;y++)
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	8f 5f       	subi	r24, 0xFF	; 255
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	99 81       	ldd	r25, Y+1	; 0x01
     a36:	8e 81       	ldd	r24, Y+6	; 0x06
     a38:	89 17       	cp	r24, r25
     a3a:	88 f7       	brcc	.-30     	; 0xa1e <LCD_DrawRect+0x40>
	{
		LCD_DrawPixel(x0, y);
		LCD_DrawPixel(x1, y);
	}
}
     a3c:	26 96       	adiw	r28, 0x06	; 6
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	cf 91       	pop	r28
     a4a:	df 91       	pop	r29
     a4c:	08 95       	ret

00000a4e <LCD_FillRect>:

void LCD_FillRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     a4e:	df 93       	push	r29
     a50:	cf 93       	push	r28
     a52:	00 d0       	rcall	.+0      	; 0xa54 <LCD_FillRect+0x6>
     a54:	00 d0       	rcall	.+0      	; 0xa56 <LCD_FillRect+0x8>
     a56:	00 d0       	rcall	.+0      	; 0xa58 <LCD_FillRect+0xa>
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	8b 83       	std	Y+3, r24	; 0x03
     a5e:	6c 83       	std	Y+4, r22	; 0x04
     a60:	4d 83       	std	Y+5, r20	; 0x05
     a62:	2e 83       	std	Y+6, r18	; 0x06
	if(x0 > x1)flip(&x0, &x1);
     a64:	9b 81       	ldd	r25, Y+3	; 0x03
     a66:	8d 81       	ldd	r24, Y+5	; 0x05
     a68:	89 17       	cp	r24, r25
     a6a:	40 f4       	brcc	.+16     	; 0xa7c <LCD_FillRect+0x2e>
     a6c:	ce 01       	movw	r24, r28
     a6e:	03 96       	adiw	r24, 0x03	; 3
     a70:	9e 01       	movw	r18, r28
     a72:	2b 5f       	subi	r18, 0xFB	; 251
     a74:	3f 4f       	sbci	r19, 0xFF	; 255
     a76:	b9 01       	movw	r22, r18
     a78:	0e 94 9c 0b 	call	0x1738	; 0x1738 <flip>
	if(y0 > y1)flip(&y0, &y1);
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	8e 81       	ldd	r24, Y+6	; 0x06
     a80:	89 17       	cp	r24, r25
     a82:	40 f4       	brcc	.+16     	; 0xa94 <LCD_FillRect+0x46>
     a84:	ce 01       	movw	r24, r28
     a86:	04 96       	adiw	r24, 0x04	; 4
     a88:	9e 01       	movw	r18, r28
     a8a:	2a 5f       	subi	r18, 0xFA	; 250
     a8c:	3f 4f       	sbci	r19, 0xFF	; 255
     a8e:	b9 01       	movw	r22, r18
     a90:	0e 94 9c 0b 	call	0x1738	; 0x1738 <flip>
	for(unsigned char x = x0;x <= x1;x++)
     a94:	8b 81       	ldd	r24, Y+3	; 0x03
     a96:	8a 83       	std	Y+2, r24	; 0x02
     a98:	11 c0       	rjmp	.+34     	; 0xabc <LCD_FillRect+0x6e>
	{
		for(unsigned char y = y0;y <= y1;y++)
     a9a:	8c 81       	ldd	r24, Y+4	; 0x04
     a9c:	89 83       	std	Y+1, r24	; 0x01
     a9e:	07 c0       	rjmp	.+14     	; 0xaae <LCD_FillRect+0x60>
		{
			LCD_DrawPixel(x, y);
     aa0:	8a 81       	ldd	r24, Y+2	; 0x02
     aa2:	69 81       	ldd	r22, Y+1	; 0x01
     aa4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_DrawPixel>
{
	if(x0 > x1)flip(&x0, &x1);
	if(y0 > y1)flip(&y0, &y1);
	for(unsigned char x = x0;x <= x1;x++)
	{
		for(unsigned char y = y0;y <= y1;y++)
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	8f 5f       	subi	r24, 0xFF	; 255
     aac:	89 83       	std	Y+1, r24	; 0x01
     aae:	9e 81       	ldd	r25, Y+6	; 0x06
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	98 17       	cp	r25, r24
     ab4:	a8 f7       	brcc	.-22     	; 0xaa0 <LCD_FillRect+0x52>

void LCD_FillRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	if(x0 > x1)flip(&x0, &x1);
	if(y0 > y1)flip(&y0, &y1);
	for(unsigned char x = x0;x <= x1;x++)
     ab6:	8a 81       	ldd	r24, Y+2	; 0x02
     ab8:	8f 5f       	subi	r24, 0xFF	; 255
     aba:	8a 83       	std	Y+2, r24	; 0x02
     abc:	9d 81       	ldd	r25, Y+5	; 0x05
     abe:	8a 81       	ldd	r24, Y+2	; 0x02
     ac0:	98 17       	cp	r25, r24
     ac2:	58 f7       	brcc	.-42     	; 0xa9a <LCD_FillRect+0x4c>
		for(unsigned char y = y0;y <= y1;y++)
		{
			LCD_DrawPixel(x, y);
		}
	}
}
     ac4:	26 96       	adiw	r28, 0x06	; 6
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	cf 91       	pop	r28
     ad2:	df 91       	pop	r29
     ad4:	08 95       	ret

00000ad6 <LCD_DrawLine>:

void LCD_DrawLine(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     ad6:	df 93       	push	r29
     ad8:	cf 93       	push	r28
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	6a 97       	sbiw	r28, 0x1a	; 26
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
     aea:	8d 87       	std	Y+13, r24	; 0x0d
     aec:	6e 87       	std	Y+14, r22	; 0x0e
     aee:	4f 87       	std	Y+15, r20	; 0x0f
     af0:	28 8b       	std	Y+16, r18	; 0x10
	int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
     af2:	8f 85       	ldd	r24, Y+15	; 0x0f
     af4:	28 2f       	mov	r18, r24
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	8d 85       	ldd	r24, Y+13	; 0x0d
     afa:	88 2f       	mov	r24, r24
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a9 01       	movw	r20, r18
     b00:	48 1b       	sub	r20, r24
     b02:	59 0b       	sbc	r21, r25
     b04:	ca 01       	movw	r24, r20
     b06:	9c 87       	std	Y+12, r25	; 0x0c
     b08:	8b 87       	std	Y+11, r24	; 0x0b
     b0a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b0c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b0e:	99 23       	and	r25, r25
     b10:	3c f4       	brge	.+14     	; 0xb20 <LCD_DrawLine+0x4a>
     b12:	8b 85       	ldd	r24, Y+11	; 0x0b
     b14:	9c 85       	ldd	r25, Y+12	; 0x0c
     b16:	90 95       	com	r25
     b18:	81 95       	neg	r24
     b1a:	9f 4f       	sbci	r25, 0xFF	; 255
     b1c:	9c 87       	std	Y+12, r25	; 0x0c
     b1e:	8b 87       	std	Y+11, r24	; 0x0b
     b20:	9d 85       	ldd	r25, Y+13	; 0x0d
     b22:	8f 85       	ldd	r24, Y+15	; 0x0f
     b24:	98 17       	cp	r25, r24
     b26:	28 f4       	brcc	.+10     	; 0xb32 <LCD_DrawLine+0x5c>
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	9e 8b       	std	Y+22, r25	; 0x16
     b2e:	8d 8b       	std	Y+21, r24	; 0x15
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <LCD_DrawLine+0x64>
     b32:	4f ef       	ldi	r20, 0xFF	; 255
     b34:	5f ef       	ldi	r21, 0xFF	; 255
     b36:	5e 8b       	std	Y+22, r21	; 0x16
     b38:	4d 8b       	std	Y+21, r20	; 0x15
     b3a:	8d 89       	ldd	r24, Y+21	; 0x15
     b3c:	9e 89       	ldd	r25, Y+22	; 0x16
     b3e:	9a 87       	std	Y+10, r25	; 0x0a
     b40:	89 87       	std	Y+9, r24	; 0x09
	int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1; 
     b42:	88 89       	ldd	r24, Y+16	; 0x10
     b44:	28 2f       	mov	r18, r24
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	8e 85       	ldd	r24, Y+14	; 0x0e
     b4a:	88 2f       	mov	r24, r24
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	a9 01       	movw	r20, r18
     b50:	48 1b       	sub	r20, r24
     b52:	59 0b       	sbc	r21, r25
     b54:	ca 01       	movw	r24, r20
     b56:	98 87       	std	Y+8, r25	; 0x08
     b58:	8f 83       	std	Y+7, r24	; 0x07
     b5a:	8f 81       	ldd	r24, Y+7	; 0x07
     b5c:	98 85       	ldd	r25, Y+8	; 0x08
     b5e:	99 23       	and	r25, r25
     b60:	3c f4       	brge	.+14     	; 0xb70 <LCD_DrawLine+0x9a>
     b62:	8f 81       	ldd	r24, Y+7	; 0x07
     b64:	98 85       	ldd	r25, Y+8	; 0x08
     b66:	90 95       	com	r25
     b68:	81 95       	neg	r24
     b6a:	9f 4f       	sbci	r25, 0xFF	; 255
     b6c:	98 87       	std	Y+8, r25	; 0x08
     b6e:	8f 83       	std	Y+7, r24	; 0x07
     b70:	9e 85       	ldd	r25, Y+14	; 0x0e
     b72:	88 89       	ldd	r24, Y+16	; 0x10
     b74:	98 17       	cp	r25, r24
     b76:	28 f4       	brcc	.+10     	; 0xb82 <LCD_DrawLine+0xac>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	9c 8b       	std	Y+20, r25	; 0x14
     b7e:	8b 8b       	std	Y+19, r24	; 0x13
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <LCD_DrawLine+0xb4>
     b82:	4f ef       	ldi	r20, 0xFF	; 255
     b84:	5f ef       	ldi	r21, 0xFF	; 255
     b86:	5c 8b       	std	Y+20, r21	; 0x14
     b88:	4b 8b       	std	Y+19, r20	; 0x13
     b8a:	8b 89       	ldd	r24, Y+19	; 0x13
     b8c:	9c 89       	ldd	r25, Y+20	; 0x14
     b8e:	9e 83       	std	Y+6, r25	; 0x06
     b90:	8d 83       	std	Y+5, r24	; 0x05
	int err = (dx>dy ? dx : -dy)/2, e2;
     b92:	2b 85       	ldd	r18, Y+11	; 0x0b
     b94:	3c 85       	ldd	r19, Y+12	; 0x0c
     b96:	8f 81       	ldd	r24, Y+7	; 0x07
     b98:	98 85       	ldd	r25, Y+8	; 0x08
     b9a:	82 17       	cp	r24, r18
     b9c:	93 07       	cpc	r25, r19
     b9e:	bc f0       	brlt	.+46     	; 0xbce <LCD_DrawLine+0xf8>
     ba0:	8f 81       	ldd	r24, Y+7	; 0x07
     ba2:	98 85       	ldd	r25, Y+8	; 0x08
     ba4:	90 95       	com	r25
     ba6:	81 95       	neg	r24
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	98 8f       	std	Y+24, r25	; 0x18
     bac:	8f 8b       	std	Y+23, r24	; 0x17
     bae:	4f 89       	ldd	r20, Y+23	; 0x17
     bb0:	58 8d       	ldd	r21, Y+24	; 0x18
     bb2:	55 23       	and	r21, r21
     bb4:	2c f4       	brge	.+10     	; 0xbc0 <LCD_DrawLine+0xea>
     bb6:	8f 89       	ldd	r24, Y+23	; 0x17
     bb8:	98 8d       	ldd	r25, Y+24	; 0x18
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	98 8f       	std	Y+24, r25	; 0x18
     bbe:	8f 8b       	std	Y+23, r24	; 0x17
     bc0:	8f 89       	ldd	r24, Y+23	; 0x17
     bc2:	98 8d       	ldd	r25, Y+24	; 0x18
     bc4:	95 95       	asr	r25
     bc6:	87 95       	ror	r24
     bc8:	9a 8b       	std	Y+18, r25	; 0x12
     bca:	89 8b       	std	Y+17, r24	; 0x11
     bcc:	13 c0       	rjmp	.+38     	; 0xbf4 <LCD_DrawLine+0x11e>
     bce:	8b 85       	ldd	r24, Y+11	; 0x0b
     bd0:	9c 85       	ldd	r25, Y+12	; 0x0c
     bd2:	9a 8f       	std	Y+26, r25	; 0x1a
     bd4:	89 8f       	std	Y+25, r24	; 0x19
     bd6:	49 8d       	ldd	r20, Y+25	; 0x19
     bd8:	5a 8d       	ldd	r21, Y+26	; 0x1a
     bda:	55 23       	and	r21, r21
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <LCD_DrawLine+0x112>
     bde:	89 8d       	ldd	r24, Y+25	; 0x19
     be0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	9a 8f       	std	Y+26, r25	; 0x1a
     be6:	89 8f       	std	Y+25, r24	; 0x19
     be8:	89 8d       	ldd	r24, Y+25	; 0x19
     bea:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bec:	95 95       	asr	r25
     bee:	87 95       	ror	r24
     bf0:	9a 8b       	std	Y+18, r25	; 0x12
     bf2:	89 8b       	std	Y+17, r24	; 0x11
     bf4:	49 89       	ldd	r20, Y+17	; 0x11
     bf6:	5a 89       	ldd	r21, Y+18	; 0x12
     bf8:	5c 83       	std	Y+4, r21	; 0x04
     bfa:	4b 83       	std	Y+3, r20	; 0x03

  	for(;;)
	{
   		LCD_DrawPixel(x0,y0);
     bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfe:	6e 85       	ldd	r22, Y+14	; 0x0e
     c00:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_DrawPixel>
   		if (x0==x1 && y0==y1) break;
     c04:	9d 85       	ldd	r25, Y+13	; 0x0d
     c06:	8f 85       	ldd	r24, Y+15	; 0x0f
     c08:	98 17       	cp	r25, r24
     c0a:	21 f4       	brne	.+8      	; 0xc14 <LCD_DrawLine+0x13e>
     c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0e:	88 89       	ldd	r24, Y+16	; 0x10
     c10:	98 17       	cp	r25, r24
     c12:	89 f1       	breq	.+98     	; 0xc76 <LCD_DrawLine+0x1a0>
   		e2 = err;
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	9a 83       	std	Y+2, r25	; 0x02
     c1a:	89 83       	std	Y+1, r24	; 0x01
   		if (e2 >-dx) { err -= dy; x0 += sx; }
     c1c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c1e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c20:	22 27       	eor	r18, r18
     c22:	33 27       	eor	r19, r19
     c24:	28 1b       	sub	r18, r24
     c26:	39 0b       	sbc	r19, r25
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	28 17       	cp	r18, r24
     c2e:	39 07       	cpc	r19, r25
     c30:	74 f4       	brge	.+28     	; 0xc4e <LCD_DrawLine+0x178>
     c32:	2b 81       	ldd	r18, Y+3	; 0x03
     c34:	3c 81       	ldd	r19, Y+4	; 0x04
     c36:	8f 81       	ldd	r24, Y+7	; 0x07
     c38:	98 85       	ldd	r25, Y+8	; 0x08
     c3a:	a9 01       	movw	r20, r18
     c3c:	48 1b       	sub	r20, r24
     c3e:	59 0b       	sbc	r21, r25
     c40:	ca 01       	movw	r24, r20
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	8b 83       	std	Y+3, r24	; 0x03
     c46:	99 85       	ldd	r25, Y+9	; 0x09
     c48:	8d 85       	ldd	r24, Y+13	; 0x0d
     c4a:	89 0f       	add	r24, r25
     c4c:	8d 87       	std	Y+13, r24	; 0x0d
   		if (e2 < dy) { err += dx; y0 += sy; }
     c4e:	29 81       	ldd	r18, Y+1	; 0x01
     c50:	3a 81       	ldd	r19, Y+2	; 0x02
     c52:	8f 81       	ldd	r24, Y+7	; 0x07
     c54:	98 85       	ldd	r25, Y+8	; 0x08
     c56:	28 17       	cp	r18, r24
     c58:	39 07       	cpc	r19, r25
     c5a:	84 f6       	brge	.-96     	; 0xbfc <LCD_DrawLine+0x126>
     c5c:	2b 81       	ldd	r18, Y+3	; 0x03
     c5e:	3c 81       	ldd	r19, Y+4	; 0x04
     c60:	8b 85       	ldd	r24, Y+11	; 0x0b
     c62:	9c 85       	ldd	r25, Y+12	; 0x0c
     c64:	82 0f       	add	r24, r18
     c66:	93 1f       	adc	r25, r19
     c68:	9c 83       	std	Y+4, r25	; 0x04
     c6a:	8b 83       	std	Y+3, r24	; 0x03
     c6c:	9d 81       	ldd	r25, Y+5	; 0x05
     c6e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c70:	89 0f       	add	r24, r25
     c72:	8e 87       	std	Y+14, r24	; 0x0e
     c74:	c3 cf       	rjmp	.-122    	; 0xbfc <LCD_DrawLine+0x126>
  	}
}
     c76:	6a 96       	adiw	r28, 0x1a	; 26
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <LCD_PrintChar>:

int LCD_PrintChar(const char c, unsigned char x0, unsigned char y0)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	28 97       	sbiw	r28, 0x08	; 8
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	8e 83       	std	Y+6, r24	; 0x06
     c9e:	6f 83       	std	Y+7, r22	; 0x07
     ca0:	48 87       	std	Y+8, r20	; 0x08
	char whitespace = 0;
     ca2:	1d 82       	std	Y+5, r1	; 0x05
	char * CHAR = getChar(c);
     ca4:	8e 81       	ldd	r24, Y+6	; 0x06
     ca6:	0e 94 67 08 	call	0x10ce	; 0x10ce <getChar>
     caa:	9c 83       	std	Y+4, r25	; 0x04
     cac:	8b 83       	std	Y+3, r24	; 0x03
	for(unsigned char x = 0;x < 5;x++)
     cae:	1a 82       	std	Y+2, r1	; 0x02
     cb0:	50 c0       	rjmp	.+160    	; 0xd52 <LCD_PrintChar+0xca>
	{
		if(FLAGS & FLAG_IGNORE_WHITESPACE && CHAR[x] == 0) whitespace++;
     cb2:	80 91 66 02 	lds	r24, 0x0266
     cb6:	88 2f       	mov	r24, r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	84 70       	andi	r24, 0x04	; 4
     cbc:	90 70       	andi	r25, 0x00	; 0
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	71 f0       	breq	.+28     	; 0xcde <LCD_PrintChar+0x56>
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	9c 81       	ldd	r25, Y+4	; 0x04
     ccc:	fc 01       	movw	r30, r24
     cce:	e2 0f       	add	r30, r18
     cd0:	f3 1f       	adc	r31, r19
     cd2:	80 81       	ld	r24, Z
     cd4:	88 23       	and	r24, r24
     cd6:	19 f4       	brne	.+6      	; 0xcde <LCD_PrintChar+0x56>
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	8d 83       	std	Y+5, r24	; 0x05
		if(CHAR[x] == 0x00)continue;
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	fc 01       	movw	r30, r24
     cea:	e2 0f       	add	r30, r18
     cec:	f3 1f       	adc	r31, r19
     cee:	80 81       	ld	r24, Z
     cf0:	88 23       	and	r24, r24
     cf2:	61 f1       	breq	.+88     	; 0xd4c <LCD_PrintChar+0xc4>
		for(unsigned char y = 0;y < 8;y++)
     cf4:	19 82       	std	Y+1, r1	; 0x01
     cf6:	27 c0       	rjmp	.+78     	; 0xd46 <LCD_PrintChar+0xbe>
		{
			if(CHAR[x] & 1 << y)
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	fc 01       	movw	r30, r24
     d04:	e2 0f       	add	r30, r18
     d06:	f3 1f       	adc	r31, r19
     d08:	80 81       	ld	r24, Z
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	a9 01       	movw	r20, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <LCD_PrintChar+0x94>
     d18:	55 95       	asr	r21
     d1a:	47 95       	ror	r20
     d1c:	8a 95       	dec	r24
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <LCD_PrintChar+0x90>
     d20:	ca 01       	movw	r24, r20
     d22:	81 70       	andi	r24, 0x01	; 1
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	88 23       	and	r24, r24
     d28:	59 f0       	breq	.+22     	; 0xd40 <LCD_PrintChar+0xb8>
				LCD_DrawPixel(x + x0, y + y0);
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	8f 81       	ldd	r24, Y+7	; 0x07
     d2e:	29 2f       	mov	r18, r25
     d30:	28 0f       	add	r18, r24
     d32:	99 81       	ldd	r25, Y+1	; 0x01
     d34:	88 85       	ldd	r24, Y+8	; 0x08
     d36:	98 0f       	add	r25, r24
     d38:	82 2f       	mov	r24, r18
     d3a:	69 2f       	mov	r22, r25
     d3c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_DrawPixel>
	char * CHAR = getChar(c);
	for(unsigned char x = 0;x < 5;x++)
	{
		if(FLAGS & FLAG_IGNORE_WHITESPACE && CHAR[x] == 0) whitespace++;
		if(CHAR[x] == 0x00)continue;
		for(unsigned char y = 0;y < 8;y++)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	8f 5f       	subi	r24, 0xFF	; 255
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	88 30       	cpi	r24, 0x08	; 8
     d4a:	b0 f2       	brcs	.-84     	; 0xcf8 <LCD_PrintChar+0x70>

int LCD_PrintChar(const char c, unsigned char x0, unsigned char y0)
{
	char whitespace = 0;
	char * CHAR = getChar(c);
	for(unsigned char x = 0;x < 5;x++)
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	8f 5f       	subi	r24, 0xFF	; 255
     d50:	8a 83       	std	Y+2, r24	; 0x02
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	85 30       	cpi	r24, 0x05	; 5
     d56:	08 f4       	brcc	.+2      	; 0xd5a <LCD_PrintChar+0xd2>
     d58:	ac cf       	rjmp	.-168    	; 0xcb2 <LCD_PrintChar+0x2a>
		{
			if(CHAR[x] & 1 << y)
				LCD_DrawPixel(x + x0, y + y0);
		}
	}
	return whitespace;
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
}
     d60:	28 96       	adiw	r28, 0x08	; 8
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <LCD_PrintString>:

void LCD_PrintString(const char * str, unsigned char x0, unsigned char y0)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <LCD_PrintString+0x6>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <LCD_PrintString+0x8>
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <LCD_PrintString+0xa>
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	9c 83       	std	Y+4, r25	; 0x04
     d82:	8b 83       	std	Y+3, r24	; 0x03
     d84:	6d 83       	std	Y+5, r22	; 0x05
     d86:	4e 83       	std	Y+6, r20	; 0x06
	unsigned char xOff = 0;
     d88:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char yOff = 0;
     d8a:	19 82       	std	Y+1, r1	; 0x01
     d8c:	2c c0       	rjmp	.+88     	; 0xde6 <LCD_PrintString+0x74>
	while(*str != '\0')
	{
		if(*str == ' ') xOff += 3;
     d8e:	eb 81       	ldd	r30, Y+3	; 0x03
     d90:	fc 81       	ldd	r31, Y+4	; 0x04
     d92:	80 81       	ld	r24, Z
     d94:	80 32       	cpi	r24, 0x20	; 32
     d96:	21 f4       	brne	.+8      	; 0xda0 <LCD_PrintString+0x2e>
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	8d 5f       	subi	r24, 0xFD	; 253
     d9c:	8a 83       	std	Y+2, r24	; 0x02
     d9e:	1e c0       	rjmp	.+60     	; 0xddc <LCD_PrintString+0x6a>
		else if(*str == '\n') 
     da0:	eb 81       	ldd	r30, Y+3	; 0x03
     da2:	fc 81       	ldd	r31, Y+4	; 0x04
     da4:	80 81       	ld	r24, Z
     da6:	8a 30       	cpi	r24, 0x0A	; 10
     da8:	29 f4       	brne	.+10     	; 0xdb4 <LCD_PrintString+0x42>
		{
			xOff = 0;
     daa:	1a 82       	std	Y+2, r1	; 0x02
			yOff += 9;
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	87 5f       	subi	r24, 0xF7	; 247
     db0:	89 83       	std	Y+1, r24	; 0x01
     db2:	14 c0       	rjmp	.+40     	; 0xddc <LCD_PrintString+0x6a>
		}
		else xOff += 6 - LCD_PrintChar(*str, x0 + xOff, y0 + yOff);
     db4:	eb 81       	ldd	r30, Y+3	; 0x03
     db6:	fc 81       	ldd	r31, Y+4	; 0x04
     db8:	30 81       	ld	r19, Z
     dba:	9d 81       	ldd	r25, Y+5	; 0x05
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	29 2f       	mov	r18, r25
     dc0:	28 0f       	add	r18, r24
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	98 0f       	add	r25, r24
     dc8:	83 2f       	mov	r24, r19
     dca:	62 2f       	mov	r22, r18
     dcc:	49 2f       	mov	r20, r25
     dce:	0e 94 44 06 	call	0xc88	; 0xc88 <LCD_PrintChar>
     dd2:	98 2f       	mov	r25, r24
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	89 1b       	sub	r24, r25
     dd8:	8a 5f       	subi	r24, 0xFA	; 250
     dda:	8a 83       	std	Y+2, r24	; 0x02
		str++;
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	8b 83       	std	Y+3, r24	; 0x03

void LCD_PrintString(const char * str, unsigned char x0, unsigned char y0)
{
	unsigned char xOff = 0;
	unsigned char yOff = 0;
	while(*str != '\0')
     de6:	eb 81       	ldd	r30, Y+3	; 0x03
     de8:	fc 81       	ldd	r31, Y+4	; 0x04
     dea:	80 81       	ld	r24, Z
     dec:	88 23       	and	r24, r24
     dee:	79 f6       	brne	.-98     	; 0xd8e <LCD_PrintString+0x1c>
			yOff += 9;
		}
		else xOff += 6 - LCD_PrintChar(*str, x0 + xOff, y0 + yOff);
		str++;
	}
}
     df0:	26 96       	adiw	r28, 0x06	; 6
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <LCD_StringWidth>:

int LCD_StringWidth(const char * str)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	2c 97       	sbiw	r28, 0x0c	; 12
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	9a 87       	std	Y+10, r25	; 0x0a
     e18:	89 87       	std	Y+9, r24	; 0x09
	int length = 0;
     e1a:	18 86       	std	Y+8, r1	; 0x08
     e1c:	1f 82       	std	Y+7, r1	; 0x07
	const char * original = str;
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
     e20:	9a 85       	ldd	r25, Y+10	; 0x0a
     e22:	9e 83       	std	Y+6, r25	; 0x06
     e24:	8d 83       	std	Y+5, r24	; 0x05
     e26:	0a c0       	rjmp	.+20     	; 0xe3c <LCD_StringWidth+0x3a>
	while(*str != '\0')
	{
		length++;
     e28:	8f 81       	ldd	r24, Y+7	; 0x07
     e2a:	98 85       	ldd	r25, Y+8	; 0x08
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	98 87       	std	Y+8, r25	; 0x08
     e30:	8f 83       	std	Y+7, r24	; 0x07
		str++;
     e32:	89 85       	ldd	r24, Y+9	; 0x09
     e34:	9a 85       	ldd	r25, Y+10	; 0x0a
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	9a 87       	std	Y+10, r25	; 0x0a
     e3a:	89 87       	std	Y+9, r24	; 0x09

int LCD_StringWidth(const char * str)
{
	int length = 0;
	const char * original = str;
	while(*str != '\0')
     e3c:	e9 85       	ldd	r30, Y+9	; 0x09
     e3e:	fa 85       	ldd	r31, Y+10	; 0x0a
     e40:	80 81       	ld	r24, Z
     e42:	88 23       	and	r24, r24
     e44:	89 f7       	brne	.-30     	; 0xe28 <LCD_StringWidth+0x26>
	{
		length++;
		str++;
	}
	str = original;
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	9a 87       	std	Y+10, r25	; 0x0a
     e4c:	89 87       	std	Y+9, r24	; 0x09
	if(FLAGS & FLAG_IGNORE_WHITESPACE)
     e4e:	80 91 66 02 	lds	r24, 0x0266
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	84 70       	andi	r24, 0x04	; 4
     e58:	90 70       	andi	r25, 0x00	; 0
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	09 f4       	brne	.+2      	; 0xe60 <LCD_StringWidth+0x5e>
     e5e:	40 c0       	rjmp	.+128    	; 0xee0 <LCD_StringWidth+0xde>
	{
		length = 0;
     e60:	18 86       	std	Y+8, r1	; 0x08
     e62:	1f 82       	std	Y+7, r1	; 0x07
     e64:	2f c0       	rjmp	.+94     	; 0xec4 <LCD_StringWidth+0xc2>
		char * CHAR;
		int off;
		while(*str != '\0')
		{
			CHAR = getChar(*str);
     e66:	e9 85       	ldd	r30, Y+9	; 0x09
     e68:	fa 85       	ldd	r31, Y+10	; 0x0a
     e6a:	80 81       	ld	r24, Z
     e6c:	0e 94 67 08 	call	0x10ce	; 0x10ce <getChar>
     e70:	9c 83       	std	Y+4, r25	; 0x04
     e72:	8b 83       	std	Y+3, r24	; 0x03
			for(off = 4;off >= 0;off--)
     e74:	84 e0       	ldi	r24, 0x04	; 4
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	0f c0       	rjmp	.+30     	; 0xe9c <LCD_StringWidth+0x9a>
			{
				if(CHAR[off] != 0x00) break;
     e7e:	29 81       	ldd	r18, Y+1	; 0x01
     e80:	3a 81       	ldd	r19, Y+2	; 0x02
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	fc 01       	movw	r30, r24
     e88:	e2 0f       	add	r30, r18
     e8a:	f3 1f       	adc	r31, r19
     e8c:	80 81       	ld	r24, Z
     e8e:	88 23       	and	r24, r24
     e90:	49 f4       	brne	.+18     	; 0xea4 <LCD_StringWidth+0xa2>
		char * CHAR;
		int off;
		while(*str != '\0')
		{
			CHAR = getChar(*str);
			for(off = 4;off >= 0;off--)
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	99 23       	and	r25, r25
     ea2:	6c f7       	brge	.-38     	; 0xe7e <LCD_StringWidth+0x7c>
			{
				if(CHAR[off] != 0x00) break;
			}
			length += off + 2;
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	9c 01       	movw	r18, r24
     eaa:	2e 5f       	subi	r18, 0xFE	; 254
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	8f 81       	ldd	r24, Y+7	; 0x07
     eb0:	98 85       	ldd	r25, Y+8	; 0x08
     eb2:	82 0f       	add	r24, r18
     eb4:	93 1f       	adc	r25, r19
     eb6:	98 87       	std	Y+8, r25	; 0x08
     eb8:	8f 83       	std	Y+7, r24	; 0x07
			str++;
     eba:	89 85       	ldd	r24, Y+9	; 0x09
     ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	9a 87       	std	Y+10, r25	; 0x0a
     ec2:	89 87       	std	Y+9, r24	; 0x09
	if(FLAGS & FLAG_IGNORE_WHITESPACE)
	{
		length = 0;
		char * CHAR;
		int off;
		while(*str != '\0')
     ec4:	e9 85       	ldd	r30, Y+9	; 0x09
     ec6:	fa 85       	ldd	r31, Y+10	; 0x0a
     ec8:	80 81       	ld	r24, Z
     eca:	88 23       	and	r24, r24
     ecc:	61 f6       	brne	.-104    	; 0xe66 <LCD_StringWidth+0x64>
				if(CHAR[off] != 0x00) break;
			}
			length += off + 2;
			str++;
		}
		str = original;
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	9e 81       	ldd	r25, Y+6	; 0x06
     ed2:	9a 87       	std	Y+10, r25	; 0x0a
     ed4:	89 87       	std	Y+9, r24	; 0x09
		return length;
     ed6:	4f 81       	ldd	r20, Y+7	; 0x07
     ed8:	58 85       	ldd	r21, Y+8	; 0x08
     eda:	5c 87       	std	Y+12, r21	; 0x0c
     edc:	4b 87       	std	Y+11, r20	; 0x0b
     ede:	0c c0       	rjmp	.+24     	; 0xef8 <LCD_StringWidth+0xf6>
	}
	else return 5 * length;
     ee0:	8f 81       	ldd	r24, Y+7	; 0x07
     ee2:	98 85       	ldd	r25, Y+8	; 0x08
     ee4:	9c 01       	movw	r18, r24
     ee6:	22 0f       	add	r18, r18
     ee8:	33 1f       	adc	r19, r19
     eea:	22 0f       	add	r18, r18
     eec:	33 1f       	adc	r19, r19
     eee:	a9 01       	movw	r20, r18
     ef0:	48 0f       	add	r20, r24
     ef2:	59 1f       	adc	r21, r25
     ef4:	5c 87       	std	Y+12, r21	; 0x0c
     ef6:	4b 87       	std	Y+11, r20	; 0x0b
     ef8:	8b 85       	ldd	r24, Y+11	; 0x0b
     efa:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     efc:	2c 96       	adiw	r28, 0x0c	; 12
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <LCD_PrintSpecial>:

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
     f0e:	0f 93       	push	r16
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	28 97       	sbiw	r28, 0x08	; 8
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	8b 83       	std	Y+3, r24	; 0x03
     f28:	6d 83       	std	Y+5, r22	; 0x05
     f2a:	4e 83       	std	Y+6, r20	; 0x06
     f2c:	2f 83       	std	Y+7, r18	; 0x07
     f2e:	08 87       	std	Y+8, r16	; 0x08
	for(unsigned char x = 0;x < width;x++)
     f30:	1a 82       	std	Y+2, r1	; 0x02
     f32:	30 c0       	rjmp	.+96     	; 0xf94 <LCD_PrintSpecial+0x86>
	{
		for(unsigned char y = 0;y < height;y++)
     f34:	19 82       	std	Y+1, r1	; 0x01
     f36:	27 c0       	rjmp	.+78     	; 0xf86 <LCD_PrintSpecial+0x78>
		{
			if(SPECIAL[x] & (1 << y))
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	fc 01       	movw	r30, r24
     f44:	e2 0f       	add	r30, r18
     f46:	f3 1f       	adc	r31, r19
     f48:	80 81       	ld	r24, Z
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a9 01       	movw	r20, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <LCD_PrintSpecial+0x4e>
     f58:	55 95       	asr	r21
     f5a:	47 95       	ror	r20
     f5c:	8a 95       	dec	r24
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <LCD_PrintSpecial+0x4a>
     f60:	ca 01       	movw	r24, r20
     f62:	81 70       	andi	r24, 0x01	; 1
     f64:	90 70       	andi	r25, 0x00	; 0
     f66:	88 23       	and	r24, r24
     f68:	59 f0       	breq	.+22     	; 0xf80 <LCD_PrintSpecial+0x72>
			{
				LCD_DrawPixel(x + x0, y + y0);
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	8d 81       	ldd	r24, Y+5	; 0x05
     f6e:	29 2f       	mov	r18, r25
     f70:	28 0f       	add	r18, r24
     f72:	99 81       	ldd	r25, Y+1	; 0x01
     f74:	8e 81       	ldd	r24, Y+6	; 0x06
     f76:	98 0f       	add	r25, r24
     f78:	82 2f       	mov	r24, r18
     f7a:	69 2f       	mov	r22, r25
     f7c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_DrawPixel>

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
	for(unsigned char x = 0;x < width;x++)
	{
		for(unsigned char y = 0;y < height;y++)
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	8f 5f       	subi	r24, 0xFF	; 255
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	99 81       	ldd	r25, Y+1	; 0x01
     f88:	88 85       	ldd	r24, Y+8	; 0x08
     f8a:	98 17       	cp	r25, r24
     f8c:	a8 f2       	brcs	.-86     	; 0xf38 <LCD_PrintSpecial+0x2a>
	else return 5 * length;
}

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
	for(unsigned char x = 0;x < width;x++)
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	8f 81       	ldd	r24, Y+7	; 0x07
     f98:	98 17       	cp	r25, r24
     f9a:	60 f2       	brcs	.-104    	; 0xf34 <LCD_PrintSpecial+0x26>
			{
				LCD_DrawPixel(x + x0, y + y0);
			}
		}
	}
}
     f9c:	28 96       	adiw	r28, 0x08	; 8
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	0f 91       	pop	r16
     fae:	08 95       	ret

00000fb0 <LCD_Display>:

void LCD_Display()
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <LCD_Display+0x6>
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <LCD_Display+0x8>
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	int page, column;
	for(page = 7;page >= 0;page--)
     fbc:	87 e0       	ldi	r24, 0x07	; 7
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	34 c0       	rjmp	.+104    	; 0x102e <LCD_Display+0x7e>
	{
		sendData(0xB0 | (7 - page), CMD); // Page address
     fc6:	9b 81       	ldd	r25, Y+3	; 0x03
     fc8:	87 e0       	ldi	r24, 0x07	; 7
     fca:	89 1b       	sub	r24, r25
     fcc:	80 6b       	ori	r24, 0xB0	; 176
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>
		sendData(0x10, CMD); // Column addres MSB (0)
     fd4:	80 e1       	ldi	r24, 0x10	; 16
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>
		sendData(0x04, CMD); // Column address LSB (4)
     fdc:	84 e0       	ldi	r24, 0x04	; 4
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>
		for(column = 0;column < 128;column++)
     fe4:	1a 82       	std	Y+2, r1	; 0x02
     fe6:	19 82       	std	Y+1, r1	; 0x01
     fe8:	18 c0       	rjmp	.+48     	; 0x101a <LCD_Display+0x6a>
		{
			sendData(buffer[page * 128 + column], DATA); // Data
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	9c 01       	movw	r18, r24
     ff0:	36 95       	lsr	r19
     ff2:	32 2f       	mov	r19, r18
     ff4:	22 27       	eor	r18, r18
     ff6:	37 95       	ror	r19
     ff8:	27 95       	ror	r18
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	82 0f       	add	r24, r18
    1000:	93 1f       	adc	r25, r19
    1002:	fc 01       	movw	r30, r24
    1004:	e4 59       	subi	r30, 0x94	; 148
    1006:	f9 4f       	sbci	r31, 0xF9	; 249
    1008:	80 81       	ld	r24, Z
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	0e 94 b7 02 	call	0x56e	; 0x56e <sendData>
	for(page = 7;page >= 0;page--)
	{
		sendData(0xB0 | (7 - page), CMD); // Page address
		sendData(0x10, CMD); // Column addres MSB (0)
		sendData(0x04, CMD); // Column address LSB (4)
		for(column = 0;column < 128;column++)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	80 38       	cpi	r24, 0x80	; 128
    1020:	91 05       	cpc	r25, r1
    1022:	1c f3       	brlt	.-58     	; 0xfea <LCD_Display+0x3a>
}

void LCD_Display()
{
	int page, column;
	for(page = 7;page >= 0;page--)
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	9c 83       	std	Y+4, r25	; 0x04
    102c:	8b 83       	std	Y+3, r24	; 0x03
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	99 23       	and	r25, r25
    1034:	44 f6       	brge	.-112    	; 0xfc6 <LCD_Display+0x16>
		for(column = 0;column < 128;column++)
		{
			sendData(buffer[page * 128 + column], DATA); // Data
		}
	}
	memcpy(pixels, buffer, sizeof(pixels));
    1036:	8c e6       	ldi	r24, 0x6C	; 108
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	2c e6       	ldi	r18, 0x6C	; 108
    103c:	36 e0       	ldi	r19, 0x06	; 6
    103e:	b9 01       	movw	r22, r18
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	54 e0       	ldi	r21, 0x04	; 4
    1044:	0e 94 4f 11 	call	0x229e	; 0x229e <memcpy>
}
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <LCD_GetWidth>:

int LCD_GetWidth()
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <LCD_GetWidth+0x6>
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	return ((FLAGS & FLAG_LANDSCAPE) > 0 ? 128 : 64);
    1060:	80 91 66 02 	lds	r24, 0x0266
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	81 70       	andi	r24, 0x01	; 1
    106a:	90 70       	andi	r25, 0x00	; 0
    106c:	18 16       	cp	r1, r24
    106e:	19 06       	cpc	r1, r25
    1070:	2c f4       	brge	.+10     	; 0x107c <LCD_GetWidth+0x26>
    1072:	80 e8       	ldi	r24, 0x80	; 128
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <LCD_GetWidth+0x2e>
    107c:	80 e4       	ldi	r24, 0x40	; 64
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <LCD_GetHeight>:

int LCD_GetHeight()
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <LCD_GetHeight+0x6>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
	return ((FLAGS & FLAG_LANDSCAPE) > 0 ? 64 : 128);
    109c:	80 91 66 02 	lds	r24, 0x0266
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	81 70       	andi	r24, 0x01	; 1
    10a6:	90 70       	andi	r25, 0x00	; 0
    10a8:	18 16       	cp	r1, r24
    10aa:	19 06       	cpc	r1, r25
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <LCD_GetHeight+0x26>
    10ae:	80 e4       	ldi	r24, 0x40	; 64
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	04 c0       	rjmp	.+8      	; 0x10c0 <LCD_GetHeight+0x2e>
    10b8:	80 e8       	ldi	r24, 0x80	; 128
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	9a 83       	std	Y+2, r25	; 0x02
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <getChar>:

char * getChar(char c)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <getChar+0x6>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <getChar+0x8>
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	89 83       	std	Y+1, r24	; 0x01
	switch(c)
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3d 83       	std	Y+5, r19	; 0x05
    10e6:	2c 83       	std	Y+4, r18	; 0x04
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	84 35       	cpi	r24, 0x54	; 84
    10ee:	91 05       	cpc	r25, r1
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <getChar+0x26>
    10f2:	79 c2       	rjmp	.+1266   	; 0x15e6 <__stack+0x4e7>
    10f4:	2c 81       	ldd	r18, Y+4	; 0x04
    10f6:	3d 81       	ldd	r19, Y+5	; 0x05
    10f8:	25 35       	cpi	r18, 0x55	; 85
    10fa:	31 05       	cpc	r19, r1
    10fc:	0c f0       	brlt	.+2      	; 0x1100 <__stack+0x1>
    10fe:	ed c0       	rjmp	.+474    	; 0x12da <__stack+0x1db>
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	83 34       	cpi	r24, 0x43	; 67
    1106:	91 05       	cpc	r25, r1
    1108:	09 f4       	brne	.+2      	; 0x110c <__stack+0xd>
    110a:	c3 c1       	rjmp	.+902    	; 0x1492 <__stack+0x393>
    110c:	2c 81       	ldd	r18, Y+4	; 0x04
    110e:	3d 81       	ldd	r19, Y+5	; 0x05
    1110:	24 34       	cpi	r18, 0x44	; 68
    1112:	31 05       	cpc	r19, r1
    1114:	0c f0       	brlt	.+2      	; 0x1118 <__stack+0x19>
    1116:	80 c0       	rjmp	.+256    	; 0x1218 <__stack+0x119>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	85 33       	cpi	r24, 0x35	; 53
    111e:	91 05       	cpc	r25, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <__stack+0x25>
    1122:	c0 c2       	rjmp	.+1408   	; 0x16a4 <__stack+0x5a5>
    1124:	2c 81       	ldd	r18, Y+4	; 0x04
    1126:	3d 81       	ldd	r19, Y+5	; 0x05
    1128:	26 33       	cpi	r18, 0x36	; 54
    112a:	31 05       	cpc	r19, r1
    112c:	0c f0       	brlt	.+2      	; 0x1130 <__stack+0x31>
    112e:	43 c0       	rjmp	.+134    	; 0x11b6 <__stack+0xb7>
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	9d 81       	ldd	r25, Y+5	; 0x05
    1134:	81 33       	cpi	r24, 0x31	; 49
    1136:	91 05       	cpc	r25, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <__stack+0x3d>
    113a:	a0 c2       	rjmp	.+1344   	; 0x167c <__stack+0x57d>
    113c:	2c 81       	ldd	r18, Y+4	; 0x04
    113e:	3d 81       	ldd	r19, Y+5	; 0x05
    1140:	22 33       	cpi	r18, 0x32	; 50
    1142:	31 05       	cpc	r19, r1
    1144:	5c f5       	brge	.+86     	; 0x119c <__stack+0x9d>
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	8d 32       	cpi	r24, 0x2D	; 45
    114c:	91 05       	cpc	r25, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <__stack+0x53>
    1150:	cc c2       	rjmp	.+1432   	; 0x16ea <__stack+0x5eb>
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	2e 32       	cpi	r18, 0x2E	; 46
    1158:	31 05       	cpc	r19, r1
    115a:	9c f4       	brge	.+38     	; 0x1182 <__stack+0x83>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	82 32       	cpi	r24, 0x22	; 34
    1162:	91 05       	cpc	r25, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <__stack+0x69>
    1166:	c6 c2       	rjmp	.+1420   	; 0x16f4 <__stack+0x5f5>
    1168:	2c 81       	ldd	r18, Y+4	; 0x04
    116a:	3d 81       	ldd	r19, Y+5	; 0x05
    116c:	2c 32       	cpi	r18, 0x2C	; 44
    116e:	31 05       	cpc	r19, r1
    1170:	09 f4       	brne	.+2      	; 0x1174 <__stack+0x75>
    1172:	b6 c2       	rjmp	.+1388   	; 0x16e0 <__stack+0x5e1>
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	9d 81       	ldd	r25, Y+5	; 0x05
    1178:	81 32       	cpi	r24, 0x21	; 33
    117a:	91 05       	cpc	r25, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <__stack+0x81>
    117e:	bf c2       	rjmp	.+1406   	; 0x16fe <__stack+0x5ff>
    1180:	cd c2       	rjmp	.+1434   	; 0x171c <__stack+0x61d>
    1182:	2c 81       	ldd	r18, Y+4	; 0x04
    1184:	3d 81       	ldd	r19, Y+5	; 0x05
    1186:	2e 32       	cpi	r18, 0x2E	; 46
    1188:	31 05       	cpc	r19, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <__stack+0x8f>
    118c:	a4 c2       	rjmp	.+1352   	; 0x16d6 <__stack+0x5d7>
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	80 33       	cpi	r24, 0x30	; 48
    1194:	91 05       	cpc	r25, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <__stack+0x9b>
    1198:	6c c2       	rjmp	.+1240   	; 0x1672 <__stack+0x573>
    119a:	c0 c2       	rjmp	.+1408   	; 0x171c <__stack+0x61d>
    119c:	2c 81       	ldd	r18, Y+4	; 0x04
    119e:	3d 81       	ldd	r19, Y+5	; 0x05
    11a0:	23 33       	cpi	r18, 0x33	; 51
    11a2:	31 05       	cpc	r19, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <__stack+0xa9>
    11a6:	74 c2       	rjmp	.+1256   	; 0x1690 <__stack+0x591>
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	84 33       	cpi	r24, 0x34	; 52
    11ae:	91 05       	cpc	r25, r1
    11b0:	0c f0       	brlt	.+2      	; 0x11b4 <__stack+0xb5>
    11b2:	73 c2       	rjmp	.+1254   	; 0x169a <__stack+0x59b>
    11b4:	68 c2       	rjmp	.+1232   	; 0x1686 <__stack+0x587>
    11b6:	2c 81       	ldd	r18, Y+4	; 0x04
    11b8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ba:	29 33       	cpi	r18, 0x39	; 57
    11bc:	31 05       	cpc	r19, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <__stack+0xc3>
    11c0:	85 c2       	rjmp	.+1290   	; 0x16cc <__stack+0x5cd>
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	8a 33       	cpi	r24, 0x3A	; 58
    11c8:	91 05       	cpc	r25, r1
    11ca:	6c f4       	brge	.+26     	; 0x11e6 <__stack+0xe7>
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	27 33       	cpi	r18, 0x37	; 55
    11d2:	31 05       	cpc	r19, r1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <__stack+0xd9>
    11d6:	70 c2       	rjmp	.+1248   	; 0x16b8 <__stack+0x5b9>
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	9d 81       	ldd	r25, Y+5	; 0x05
    11dc:	88 33       	cpi	r24, 0x38	; 56
    11de:	91 05       	cpc	r25, r1
    11e0:	0c f0       	brlt	.+2      	; 0x11e4 <__stack+0xe5>
    11e2:	6f c2       	rjmp	.+1246   	; 0x16c2 <__stack+0x5c3>
    11e4:	64 c2       	rjmp	.+1224   	; 0x16ae <__stack+0x5af>
    11e6:	2c 81       	ldd	r18, Y+4	; 0x04
    11e8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ea:	21 34       	cpi	r18, 0x41	; 65
    11ec:	31 05       	cpc	r19, r1
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <__stack+0xf3>
    11f0:	3c c1       	rjmp	.+632    	; 0x146a <__stack+0x36b>
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	82 34       	cpi	r24, 0x42	; 66
    11f8:	91 05       	cpc	r25, r1
    11fa:	0c f0       	brlt	.+2      	; 0x11fe <__stack+0xff>
    11fc:	40 c1       	rjmp	.+640    	; 0x147e <__stack+0x37f>
    11fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1200:	3d 81       	ldd	r19, Y+5	; 0x05
    1202:	2a 33       	cpi	r18, 0x3A	; 58
    1204:	31 05       	cpc	r19, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <__stack+0x10b>
    1208:	84 c2       	rjmp	.+1288   	; 0x1712 <__stack+0x613>
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	9d 81       	ldd	r25, Y+5	; 0x05
    120e:	8f 33       	cpi	r24, 0x3F	; 63
    1210:	91 05       	cpc	r25, r1
    1212:	09 f4       	brne	.+2      	; 0x1216 <__stack+0x117>
    1214:	79 c2       	rjmp	.+1266   	; 0x1708 <__stack+0x609>
    1216:	82 c2       	rjmp	.+1284   	; 0x171c <__stack+0x61d>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	2b 34       	cpi	r18, 0x4B	; 75
    121e:	31 05       	cpc	r19, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <__stack+0x125>
    1222:	87 c1       	rjmp	.+782    	; 0x1532 <__stack+0x433>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	8c 34       	cpi	r24, 0x4C	; 76
    122a:	91 05       	cpc	r25, r1
    122c:	2c f5       	brge	.+74     	; 0x1278 <__stack+0x179>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	27 34       	cpi	r18, 0x47	; 71
    1234:	31 05       	cpc	r19, r1
    1236:	09 f4       	brne	.+2      	; 0x123a <__stack+0x13b>
    1238:	54 c1       	rjmp	.+680    	; 0x14e2 <__stack+0x3e3>
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	88 34       	cpi	r24, 0x48	; 72
    1240:	91 05       	cpc	r25, r1
    1242:	6c f4       	brge	.+26     	; 0x125e <__stack+0x15f>
    1244:	2c 81       	ldd	r18, Y+4	; 0x04
    1246:	3d 81       	ldd	r19, Y+5	; 0x05
    1248:	25 34       	cpi	r18, 0x45	; 69
    124a:	31 05       	cpc	r19, r1
    124c:	09 f4       	brne	.+2      	; 0x1250 <__stack+0x151>
    124e:	35 c1       	rjmp	.+618    	; 0x14ba <__stack+0x3bb>
    1250:	8c 81       	ldd	r24, Y+4	; 0x04
    1252:	9d 81       	ldd	r25, Y+5	; 0x05
    1254:	86 34       	cpi	r24, 0x46	; 70
    1256:	91 05       	cpc	r25, r1
    1258:	0c f0       	brlt	.+2      	; 0x125c <__stack+0x15d>
    125a:	39 c1       	rjmp	.+626    	; 0x14ce <__stack+0x3cf>
    125c:	24 c1       	rjmp	.+584    	; 0x14a6 <__stack+0x3a7>
    125e:	2c 81       	ldd	r18, Y+4	; 0x04
    1260:	3d 81       	ldd	r19, Y+5	; 0x05
    1262:	29 34       	cpi	r18, 0x49	; 73
    1264:	31 05       	cpc	r19, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <__stack+0x16b>
    1268:	50 c1       	rjmp	.+672    	; 0x150a <__stack+0x40b>
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	8a 34       	cpi	r24, 0x4A	; 74
    1270:	91 05       	cpc	r25, r1
    1272:	0c f0       	brlt	.+2      	; 0x1276 <__stack+0x177>
    1274:	54 c1       	rjmp	.+680    	; 0x151e <__stack+0x41f>
    1276:	3f c1       	rjmp	.+638    	; 0x14f6 <__stack+0x3f7>
    1278:	2c 81       	ldd	r18, Y+4	; 0x04
    127a:	3d 81       	ldd	r19, Y+5	; 0x05
    127c:	2f 34       	cpi	r18, 0x4F	; 79
    127e:	31 05       	cpc	r19, r1
    1280:	09 f4       	brne	.+2      	; 0x1284 <__stack+0x185>
    1282:	7f c1       	rjmp	.+766    	; 0x1582 <__stack+0x483>
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	80 35       	cpi	r24, 0x50	; 80
    128a:	91 05       	cpc	r25, r1
    128c:	6c f4       	brge	.+26     	; 0x12a8 <__stack+0x1a9>
    128e:	2c 81       	ldd	r18, Y+4	; 0x04
    1290:	3d 81       	ldd	r19, Y+5	; 0x05
    1292:	2d 34       	cpi	r18, 0x4D	; 77
    1294:	31 05       	cpc	r19, r1
    1296:	09 f4       	brne	.+2      	; 0x129a <__stack+0x19b>
    1298:	60 c1       	rjmp	.+704    	; 0x155a <__stack+0x45b>
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	9d 81       	ldd	r25, Y+5	; 0x05
    129e:	8e 34       	cpi	r24, 0x4E	; 78
    12a0:	91 05       	cpc	r25, r1
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <__stack+0x1a7>
    12a4:	64 c1       	rjmp	.+712    	; 0x156e <__stack+0x46f>
    12a6:	4f c1       	rjmp	.+670    	; 0x1546 <__stack+0x447>
    12a8:	2c 81       	ldd	r18, Y+4	; 0x04
    12aa:	3d 81       	ldd	r19, Y+5	; 0x05
    12ac:	21 35       	cpi	r18, 0x51	; 81
    12ae:	31 05       	cpc	r19, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <__stack+0x1b5>
    12b2:	7b c1       	rjmp	.+758    	; 0x15aa <__stack+0x4ab>
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	81 35       	cpi	r24, 0x51	; 81
    12ba:	91 05       	cpc	r25, r1
    12bc:	0c f4       	brge	.+2      	; 0x12c0 <__stack+0x1c1>
    12be:	6b c1       	rjmp	.+726    	; 0x1596 <__stack+0x497>
    12c0:	2c 81       	ldd	r18, Y+4	; 0x04
    12c2:	3d 81       	ldd	r19, Y+5	; 0x05
    12c4:	22 35       	cpi	r18, 0x52	; 82
    12c6:	31 05       	cpc	r19, r1
    12c8:	09 f4       	brne	.+2      	; 0x12cc <__stack+0x1cd>
    12ca:	79 c1       	rjmp	.+754    	; 0x15be <__stack+0x4bf>
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	9d 81       	ldd	r25, Y+5	; 0x05
    12d0:	83 35       	cpi	r24, 0x53	; 83
    12d2:	91 05       	cpc	r25, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <__stack+0x1d9>
    12d6:	7d c1       	rjmp	.+762    	; 0x15d2 <__stack+0x4d3>
    12d8:	21 c2       	rjmp	.+1090   	; 0x171c <__stack+0x61d>
    12da:	2c 81       	ldd	r18, Y+4	; 0x04
    12dc:	3d 81       	ldd	r19, Y+5	; 0x05
    12de:	2a 36       	cpi	r18, 0x6A	; 106
    12e0:	31 05       	cpc	r19, r1
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <__stack+0x1e7>
    12e4:	21 c1       	rjmp	.+578    	; 0x1528 <__stack+0x429>
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	8b 36       	cpi	r24, 0x6B	; 107
    12ec:	91 05       	cpc	r25, r1
    12ee:	0c f0       	brlt	.+2      	; 0x12f2 <__stack+0x1f3>
    12f0:	5b c0       	rjmp	.+182    	; 0x13a8 <__stack+0x2a9>
    12f2:	2c 81       	ldd	r18, Y+4	; 0x04
    12f4:	3d 81       	ldd	r19, Y+5	; 0x05
    12f6:	22 36       	cpi	r18, 0x62	; 98
    12f8:	31 05       	cpc	r19, r1
    12fa:	09 f4       	brne	.+2      	; 0x12fe <__stack+0x1ff>
    12fc:	c5 c0       	rjmp	.+394    	; 0x1488 <__stack+0x389>
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	9d 81       	ldd	r25, Y+5	; 0x05
    1302:	83 36       	cpi	r24, 0x63	; 99
    1304:	91 05       	cpc	r25, r1
    1306:	5c f5       	brge	.+86     	; 0x135e <__stack+0x25f>
    1308:	2c 81       	ldd	r18, Y+4	; 0x04
    130a:	3d 81       	ldd	r19, Y+5	; 0x05
    130c:	28 35       	cpi	r18, 0x58	; 88
    130e:	31 05       	cpc	r19, r1
    1310:	09 f4       	brne	.+2      	; 0x1314 <__stack+0x215>
    1312:	91 c1       	rjmp	.+802    	; 0x1636 <__stack+0x537>
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	89 35       	cpi	r24, 0x59	; 89
    131a:	91 05       	cpc	r25, r1
    131c:	6c f4       	brge	.+26     	; 0x1338 <__stack+0x239>
    131e:	2c 81       	ldd	r18, Y+4	; 0x04
    1320:	3d 81       	ldd	r19, Y+5	; 0x05
    1322:	26 35       	cpi	r18, 0x56	; 86
    1324:	31 05       	cpc	r19, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <__stack+0x22b>
    1328:	72 c1       	rjmp	.+740    	; 0x160e <__stack+0x50f>
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	87 35       	cpi	r24, 0x57	; 87
    1330:	91 05       	cpc	r25, r1
    1332:	0c f0       	brlt	.+2      	; 0x1336 <__stack+0x237>
    1334:	76 c1       	rjmp	.+748    	; 0x1622 <__stack+0x523>
    1336:	61 c1       	rjmp	.+706    	; 0x15fa <__stack+0x4fb>
    1338:	2c 81       	ldd	r18, Y+4	; 0x04
    133a:	3d 81       	ldd	r19, Y+5	; 0x05
    133c:	2a 35       	cpi	r18, 0x5A	; 90
    133e:	31 05       	cpc	r19, r1
    1340:	09 f4       	brne	.+2      	; 0x1344 <__stack+0x245>
    1342:	8d c1       	rjmp	.+794    	; 0x165e <__stack+0x55f>
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	9d 81       	ldd	r25, Y+5	; 0x05
    1348:	8a 35       	cpi	r24, 0x5A	; 90
    134a:	91 05       	cpc	r25, r1
    134c:	0c f4       	brge	.+2      	; 0x1350 <__stack+0x251>
    134e:	7d c1       	rjmp	.+762    	; 0x164a <__stack+0x54b>
    1350:	2c 81       	ldd	r18, Y+4	; 0x04
    1352:	3d 81       	ldd	r19, Y+5	; 0x05
    1354:	21 36       	cpi	r18, 0x61	; 97
    1356:	31 05       	cpc	r19, r1
    1358:	09 f4       	brne	.+2      	; 0x135c <__stack+0x25d>
    135a:	8c c0       	rjmp	.+280    	; 0x1474 <__stack+0x375>
    135c:	df c1       	rjmp	.+958    	; 0x171c <__stack+0x61d>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	86 36       	cpi	r24, 0x66	; 102
    1364:	91 05       	cpc	r25, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <__stack+0x26b>
    1368:	b7 c0       	rjmp	.+366    	; 0x14d8 <__stack+0x3d9>
    136a:	2c 81       	ldd	r18, Y+4	; 0x04
    136c:	3d 81       	ldd	r19, Y+5	; 0x05
    136e:	27 36       	cpi	r18, 0x67	; 103
    1370:	31 05       	cpc	r19, r1
    1372:	6c f4       	brge	.+26     	; 0x138e <__stack+0x28f>
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	84 36       	cpi	r24, 0x64	; 100
    137a:	91 05       	cpc	r25, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <__stack+0x281>
    137e:	98 c0       	rjmp	.+304    	; 0x14b0 <__stack+0x3b1>
    1380:	2c 81       	ldd	r18, Y+4	; 0x04
    1382:	3d 81       	ldd	r19, Y+5	; 0x05
    1384:	25 36       	cpi	r18, 0x65	; 101
    1386:	31 05       	cpc	r19, r1
    1388:	0c f0       	brlt	.+2      	; 0x138c <__stack+0x28d>
    138a:	9c c0       	rjmp	.+312    	; 0x14c4 <__stack+0x3c5>
    138c:	87 c0       	rjmp	.+270    	; 0x149c <__stack+0x39d>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	88 36       	cpi	r24, 0x68	; 104
    1394:	91 05       	cpc	r25, r1
    1396:	09 f4       	brne	.+2      	; 0x139a <__stack+0x29b>
    1398:	b3 c0       	rjmp	.+358    	; 0x1500 <__stack+0x401>
    139a:	2c 81       	ldd	r18, Y+4	; 0x04
    139c:	3d 81       	ldd	r19, Y+5	; 0x05
    139e:	29 36       	cpi	r18, 0x69	; 105
    13a0:	31 05       	cpc	r19, r1
    13a2:	0c f0       	brlt	.+2      	; 0x13a6 <__stack+0x2a7>
    13a4:	b7 c0       	rjmp	.+366    	; 0x1514 <__stack+0x415>
    13a6:	a2 c0       	rjmp	.+324    	; 0x14ec <__stack+0x3ed>
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	82 37       	cpi	r24, 0x72	; 114
    13ae:	91 05       	cpc	r25, r1
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <__stack+0x2b5>
    13b2:	0a c1       	rjmp	.+532    	; 0x15c8 <__stack+0x4c9>
    13b4:	2c 81       	ldd	r18, Y+4	; 0x04
    13b6:	3d 81       	ldd	r19, Y+5	; 0x05
    13b8:	23 37       	cpi	r18, 0x73	; 115
    13ba:	31 05       	cpc	r19, r1
    13bc:	2c f5       	brge	.+74     	; 0x1408 <__stack+0x309>
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	9d 81       	ldd	r25, Y+5	; 0x05
    13c2:	8e 36       	cpi	r24, 0x6E	; 110
    13c4:	91 05       	cpc	r25, r1
    13c6:	09 f4       	brne	.+2      	; 0x13ca <__stack+0x2cb>
    13c8:	d7 c0       	rjmp	.+430    	; 0x1578 <__stack+0x479>
    13ca:	2c 81       	ldd	r18, Y+4	; 0x04
    13cc:	3d 81       	ldd	r19, Y+5	; 0x05
    13ce:	2f 36       	cpi	r18, 0x6F	; 111
    13d0:	31 05       	cpc	r19, r1
    13d2:	6c f4       	brge	.+26     	; 0x13ee <__stack+0x2ef>
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	8c 36       	cpi	r24, 0x6C	; 108
    13da:	91 05       	cpc	r25, r1
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <__stack+0x2e1>
    13de:	b8 c0       	rjmp	.+368    	; 0x1550 <__stack+0x451>
    13e0:	2c 81       	ldd	r18, Y+4	; 0x04
    13e2:	3d 81       	ldd	r19, Y+5	; 0x05
    13e4:	2d 36       	cpi	r18, 0x6D	; 109
    13e6:	31 05       	cpc	r19, r1
    13e8:	0c f0       	brlt	.+2      	; 0x13ec <__stack+0x2ed>
    13ea:	bc c0       	rjmp	.+376    	; 0x1564 <__stack+0x465>
    13ec:	a7 c0       	rjmp	.+334    	; 0x153c <__stack+0x43d>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	80 37       	cpi	r24, 0x70	; 112
    13f4:	91 05       	cpc	r25, r1
    13f6:	09 f4       	brne	.+2      	; 0x13fa <__stack+0x2fb>
    13f8:	d3 c0       	rjmp	.+422    	; 0x15a0 <__stack+0x4a1>
    13fa:	2c 81       	ldd	r18, Y+4	; 0x04
    13fc:	3d 81       	ldd	r19, Y+5	; 0x05
    13fe:	21 37       	cpi	r18, 0x71	; 113
    1400:	31 05       	cpc	r19, r1
    1402:	0c f0       	brlt	.+2      	; 0x1406 <__stack+0x307>
    1404:	d7 c0       	rjmp	.+430    	; 0x15b4 <__stack+0x4b5>
    1406:	c2 c0       	rjmp	.+388    	; 0x158c <__stack+0x48d>
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	9d 81       	ldd	r25, Y+5	; 0x05
    140c:	86 37       	cpi	r24, 0x76	; 118
    140e:	91 05       	cpc	r25, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <__stack+0x315>
    1412:	02 c1       	rjmp	.+516    	; 0x1618 <__stack+0x519>
    1414:	2c 81       	ldd	r18, Y+4	; 0x04
    1416:	3d 81       	ldd	r19, Y+5	; 0x05
    1418:	27 37       	cpi	r18, 0x77	; 119
    141a:	31 05       	cpc	r19, r1
    141c:	6c f4       	brge	.+26     	; 0x1438 <__stack+0x339>
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	9d 81       	ldd	r25, Y+5	; 0x05
    1422:	84 37       	cpi	r24, 0x74	; 116
    1424:	91 05       	cpc	r25, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <__stack+0x32b>
    1428:	e3 c0       	rjmp	.+454    	; 0x15f0 <__stack+0x4f1>
    142a:	2c 81       	ldd	r18, Y+4	; 0x04
    142c:	3d 81       	ldd	r19, Y+5	; 0x05
    142e:	25 37       	cpi	r18, 0x75	; 117
    1430:	31 05       	cpc	r19, r1
    1432:	0c f0       	brlt	.+2      	; 0x1436 <__stack+0x337>
    1434:	e7 c0       	rjmp	.+462    	; 0x1604 <__stack+0x505>
    1436:	d2 c0       	rjmp	.+420    	; 0x15dc <__stack+0x4dd>
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	88 37       	cpi	r24, 0x78	; 120
    143e:	91 05       	cpc	r25, r1
    1440:	09 f4       	brne	.+2      	; 0x1444 <__stack+0x345>
    1442:	fe c0       	rjmp	.+508    	; 0x1640 <__stack+0x541>
    1444:	2c 81       	ldd	r18, Y+4	; 0x04
    1446:	3d 81       	ldd	r19, Y+5	; 0x05
    1448:	28 37       	cpi	r18, 0x78	; 120
    144a:	31 05       	cpc	r19, r1
    144c:	0c f4       	brge	.+2      	; 0x1450 <__stack+0x351>
    144e:	ee c0       	rjmp	.+476    	; 0x162c <__stack+0x52d>
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	89 37       	cpi	r24, 0x79	; 121
    1456:	91 05       	cpc	r25, r1
    1458:	09 f4       	brne	.+2      	; 0x145c <__stack+0x35d>
    145a:	fc c0       	rjmp	.+504    	; 0x1654 <__stack+0x555>
    145c:	2c 81       	ldd	r18, Y+4	; 0x04
    145e:	3d 81       	ldd	r19, Y+5	; 0x05
    1460:	2a 37       	cpi	r18, 0x7A	; 122
    1462:	31 05       	cpc	r19, r1
    1464:	09 f4       	brne	.+2      	; 0x1468 <__stack+0x369>
    1466:	00 c1       	rjmp	.+512    	; 0x1668 <__stack+0x569>
    1468:	59 c1       	rjmp	.+690    	; 0x171c <__stack+0x61d>
	{
		case 'A': return CHAR_A;
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	9b 83       	std	Y+3, r25	; 0x03
    1470:	8a 83       	std	Y+2, r24	; 0x02
    1472:	58 c1       	rjmp	.+688    	; 0x1724 <__stack+0x625>
		case 'a': return CHAR_a;
    1474:	25 e0       	ldi	r18, 0x05	; 5
    1476:	31 e0       	ldi	r19, 0x01	; 1
    1478:	3b 83       	std	Y+3, r19	; 0x03
    147a:	2a 83       	std	Y+2, r18	; 0x02
    147c:	53 c1       	rjmp	.+678    	; 0x1724 <__stack+0x625>
		case 'B': return CHAR_B;
    147e:	8a e0       	ldi	r24, 0x0A	; 10
    1480:	91 e0       	ldi	r25, 0x01	; 1
    1482:	9b 83       	std	Y+3, r25	; 0x03
    1484:	8a 83       	std	Y+2, r24	; 0x02
    1486:	4e c1       	rjmp	.+668    	; 0x1724 <__stack+0x625>
		case 'b': return CHAR_b;
    1488:	2f e0       	ldi	r18, 0x0F	; 15
    148a:	31 e0       	ldi	r19, 0x01	; 1
    148c:	3b 83       	std	Y+3, r19	; 0x03
    148e:	2a 83       	std	Y+2, r18	; 0x02
    1490:	49 c1       	rjmp	.+658    	; 0x1724 <__stack+0x625>
		case 'C': return CHAR_C;
    1492:	84 e1       	ldi	r24, 0x14	; 20
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	9b 83       	std	Y+3, r25	; 0x03
    1498:	8a 83       	std	Y+2, r24	; 0x02
    149a:	44 c1       	rjmp	.+648    	; 0x1724 <__stack+0x625>
		case 'c': return CHAR_c;
    149c:	29 e1       	ldi	r18, 0x19	; 25
    149e:	31 e0       	ldi	r19, 0x01	; 1
    14a0:	3b 83       	std	Y+3, r19	; 0x03
    14a2:	2a 83       	std	Y+2, r18	; 0x02
    14a4:	3f c1       	rjmp	.+638    	; 0x1724 <__stack+0x625>
		case 'D': return CHAR_D;
    14a6:	8e e1       	ldi	r24, 0x1E	; 30
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	9b 83       	std	Y+3, r25	; 0x03
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    14ae:	3a c1       	rjmp	.+628    	; 0x1724 <__stack+0x625>
		case 'd': return CHAR_d;
    14b0:	23 e2       	ldi	r18, 0x23	; 35
    14b2:	31 e0       	ldi	r19, 0x01	; 1
    14b4:	3b 83       	std	Y+3, r19	; 0x03
    14b6:	2a 83       	std	Y+2, r18	; 0x02
    14b8:	35 c1       	rjmp	.+618    	; 0x1724 <__stack+0x625>
		case 'E': return CHAR_E;
    14ba:	88 e2       	ldi	r24, 0x28	; 40
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	9b 83       	std	Y+3, r25	; 0x03
    14c0:	8a 83       	std	Y+2, r24	; 0x02
    14c2:	30 c1       	rjmp	.+608    	; 0x1724 <__stack+0x625>
		case 'e': return CHAR_e;
    14c4:	2d e2       	ldi	r18, 0x2D	; 45
    14c6:	31 e0       	ldi	r19, 0x01	; 1
    14c8:	3b 83       	std	Y+3, r19	; 0x03
    14ca:	2a 83       	std	Y+2, r18	; 0x02
    14cc:	2b c1       	rjmp	.+598    	; 0x1724 <__stack+0x625>
		case 'F': return CHAR_F;
    14ce:	82 e3       	ldi	r24, 0x32	; 50
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	9b 83       	std	Y+3, r25	; 0x03
    14d4:	8a 83       	std	Y+2, r24	; 0x02
    14d6:	26 c1       	rjmp	.+588    	; 0x1724 <__stack+0x625>
		case 'f': return CHAR_f;
    14d8:	27 e3       	ldi	r18, 0x37	; 55
    14da:	31 e0       	ldi	r19, 0x01	; 1
    14dc:	3b 83       	std	Y+3, r19	; 0x03
    14de:	2a 83       	std	Y+2, r18	; 0x02
    14e0:	21 c1       	rjmp	.+578    	; 0x1724 <__stack+0x625>
		case 'G': return CHAR_G;
    14e2:	8c e3       	ldi	r24, 0x3C	; 60
    14e4:	91 e0       	ldi	r25, 0x01	; 1
    14e6:	9b 83       	std	Y+3, r25	; 0x03
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	1c c1       	rjmp	.+568    	; 0x1724 <__stack+0x625>
		case 'g': return CHAR_g;
    14ec:	21 e4       	ldi	r18, 0x41	; 65
    14ee:	31 e0       	ldi	r19, 0x01	; 1
    14f0:	3b 83       	std	Y+3, r19	; 0x03
    14f2:	2a 83       	std	Y+2, r18	; 0x02
    14f4:	17 c1       	rjmp	.+558    	; 0x1724 <__stack+0x625>
		case 'H': return CHAR_H;
    14f6:	86 e4       	ldi	r24, 0x46	; 70
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	9b 83       	std	Y+3, r25	; 0x03
    14fc:	8a 83       	std	Y+2, r24	; 0x02
    14fe:	12 c1       	rjmp	.+548    	; 0x1724 <__stack+0x625>
		case 'h': return CHAR_h;
    1500:	2b e4       	ldi	r18, 0x4B	; 75
    1502:	31 e0       	ldi	r19, 0x01	; 1
    1504:	3b 83       	std	Y+3, r19	; 0x03
    1506:	2a 83       	std	Y+2, r18	; 0x02
    1508:	0d c1       	rjmp	.+538    	; 0x1724 <__stack+0x625>
		case 'I': return CHAR_I;
    150a:	80 e5       	ldi	r24, 0x50	; 80
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	9b 83       	std	Y+3, r25	; 0x03
    1510:	8a 83       	std	Y+2, r24	; 0x02
    1512:	08 c1       	rjmp	.+528    	; 0x1724 <__stack+0x625>
		case 'i': return CHAR_i;
    1514:	25 e5       	ldi	r18, 0x55	; 85
    1516:	31 e0       	ldi	r19, 0x01	; 1
    1518:	3b 83       	std	Y+3, r19	; 0x03
    151a:	2a 83       	std	Y+2, r18	; 0x02
    151c:	03 c1       	rjmp	.+518    	; 0x1724 <__stack+0x625>
		case 'J': return CHAR_J;
    151e:	8a e5       	ldi	r24, 0x5A	; 90
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	9b 83       	std	Y+3, r25	; 0x03
    1524:	8a 83       	std	Y+2, r24	; 0x02
    1526:	fe c0       	rjmp	.+508    	; 0x1724 <__stack+0x625>
		case 'j': return CHAR_j;
    1528:	2f e5       	ldi	r18, 0x5F	; 95
    152a:	31 e0       	ldi	r19, 0x01	; 1
    152c:	3b 83       	std	Y+3, r19	; 0x03
    152e:	2a 83       	std	Y+2, r18	; 0x02
    1530:	f9 c0       	rjmp	.+498    	; 0x1724 <__stack+0x625>
		case 'K': return CHAR_K;
    1532:	84 e6       	ldi	r24, 0x64	; 100
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	9b 83       	std	Y+3, r25	; 0x03
    1538:	8a 83       	std	Y+2, r24	; 0x02
    153a:	f4 c0       	rjmp	.+488    	; 0x1724 <__stack+0x625>
		case 'k': return CHAR_k;
    153c:	29 e6       	ldi	r18, 0x69	; 105
    153e:	31 e0       	ldi	r19, 0x01	; 1
    1540:	3b 83       	std	Y+3, r19	; 0x03
    1542:	2a 83       	std	Y+2, r18	; 0x02
    1544:	ef c0       	rjmp	.+478    	; 0x1724 <__stack+0x625>
		case 'L': return CHAR_L;
    1546:	8e e6       	ldi	r24, 0x6E	; 110
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	9b 83       	std	Y+3, r25	; 0x03
    154c:	8a 83       	std	Y+2, r24	; 0x02
    154e:	ea c0       	rjmp	.+468    	; 0x1724 <__stack+0x625>
		case 'l': return CHAR_l;
    1550:	23 e7       	ldi	r18, 0x73	; 115
    1552:	31 e0       	ldi	r19, 0x01	; 1
    1554:	3b 83       	std	Y+3, r19	; 0x03
    1556:	2a 83       	std	Y+2, r18	; 0x02
    1558:	e5 c0       	rjmp	.+458    	; 0x1724 <__stack+0x625>
		case 'M': return CHAR_M;
    155a:	88 e7       	ldi	r24, 0x78	; 120
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	9b 83       	std	Y+3, r25	; 0x03
    1560:	8a 83       	std	Y+2, r24	; 0x02
    1562:	e0 c0       	rjmp	.+448    	; 0x1724 <__stack+0x625>
		case 'm': return CHAR_m;
    1564:	2d e7       	ldi	r18, 0x7D	; 125
    1566:	31 e0       	ldi	r19, 0x01	; 1
    1568:	3b 83       	std	Y+3, r19	; 0x03
    156a:	2a 83       	std	Y+2, r18	; 0x02
    156c:	db c0       	rjmp	.+438    	; 0x1724 <__stack+0x625>
		case 'N': return CHAR_N;
    156e:	82 e8       	ldi	r24, 0x82	; 130
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	9b 83       	std	Y+3, r25	; 0x03
    1574:	8a 83       	std	Y+2, r24	; 0x02
    1576:	d6 c0       	rjmp	.+428    	; 0x1724 <__stack+0x625>
		case 'n': return CHAR_n;
    1578:	27 e8       	ldi	r18, 0x87	; 135
    157a:	31 e0       	ldi	r19, 0x01	; 1
    157c:	3b 83       	std	Y+3, r19	; 0x03
    157e:	2a 83       	std	Y+2, r18	; 0x02
    1580:	d1 c0       	rjmp	.+418    	; 0x1724 <__stack+0x625>
		case 'O': return CHAR_O;
    1582:	8c e8       	ldi	r24, 0x8C	; 140
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	9b 83       	std	Y+3, r25	; 0x03
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	cc c0       	rjmp	.+408    	; 0x1724 <__stack+0x625>
		case 'o': return CHAR_o;
    158c:	21 e9       	ldi	r18, 0x91	; 145
    158e:	31 e0       	ldi	r19, 0x01	; 1
    1590:	3b 83       	std	Y+3, r19	; 0x03
    1592:	2a 83       	std	Y+2, r18	; 0x02
    1594:	c7 c0       	rjmp	.+398    	; 0x1724 <__stack+0x625>
		case 'P': return CHAR_P;
    1596:	86 e9       	ldi	r24, 0x96	; 150
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	9b 83       	std	Y+3, r25	; 0x03
    159c:	8a 83       	std	Y+2, r24	; 0x02
    159e:	c2 c0       	rjmp	.+388    	; 0x1724 <__stack+0x625>
		case 'p': return CHAR_p;
    15a0:	2b e9       	ldi	r18, 0x9B	; 155
    15a2:	31 e0       	ldi	r19, 0x01	; 1
    15a4:	3b 83       	std	Y+3, r19	; 0x03
    15a6:	2a 83       	std	Y+2, r18	; 0x02
    15a8:	bd c0       	rjmp	.+378    	; 0x1724 <__stack+0x625>
		case 'Q': return CHAR_Q;
    15aa:	80 ea       	ldi	r24, 0xA0	; 160
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	9b 83       	std	Y+3, r25	; 0x03
    15b0:	8a 83       	std	Y+2, r24	; 0x02
    15b2:	b8 c0       	rjmp	.+368    	; 0x1724 <__stack+0x625>
		case 'q': return CHAR_q;
    15b4:	25 ea       	ldi	r18, 0xA5	; 165
    15b6:	31 e0       	ldi	r19, 0x01	; 1
    15b8:	3b 83       	std	Y+3, r19	; 0x03
    15ba:	2a 83       	std	Y+2, r18	; 0x02
    15bc:	b3 c0       	rjmp	.+358    	; 0x1724 <__stack+0x625>
		case 'R': return CHAR_R;
    15be:	8a ea       	ldi	r24, 0xAA	; 170
    15c0:	91 e0       	ldi	r25, 0x01	; 1
    15c2:	9b 83       	std	Y+3, r25	; 0x03
    15c4:	8a 83       	std	Y+2, r24	; 0x02
    15c6:	ae c0       	rjmp	.+348    	; 0x1724 <__stack+0x625>
		case 'r': return CHAR_r;
    15c8:	2f ea       	ldi	r18, 0xAF	; 175
    15ca:	31 e0       	ldi	r19, 0x01	; 1
    15cc:	3b 83       	std	Y+3, r19	; 0x03
    15ce:	2a 83       	std	Y+2, r18	; 0x02
    15d0:	a9 c0       	rjmp	.+338    	; 0x1724 <__stack+0x625>
		case 'S': return CHAR_S;
    15d2:	84 eb       	ldi	r24, 0xB4	; 180
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	9b 83       	std	Y+3, r25	; 0x03
    15d8:	8a 83       	std	Y+2, r24	; 0x02
    15da:	a4 c0       	rjmp	.+328    	; 0x1724 <__stack+0x625>
		case 's': return CHAR_s;
    15dc:	29 eb       	ldi	r18, 0xB9	; 185
    15de:	31 e0       	ldi	r19, 0x01	; 1
    15e0:	3b 83       	std	Y+3, r19	; 0x03
    15e2:	2a 83       	std	Y+2, r18	; 0x02
    15e4:	9f c0       	rjmp	.+318    	; 0x1724 <__stack+0x625>
		case 'T': return CHAR_T;
    15e6:	8e eb       	ldi	r24, 0xBE	; 190
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	9b 83       	std	Y+3, r25	; 0x03
    15ec:	8a 83       	std	Y+2, r24	; 0x02
    15ee:	9a c0       	rjmp	.+308    	; 0x1724 <__stack+0x625>
		case 't': return CHAR_t;
    15f0:	23 ec       	ldi	r18, 0xC3	; 195
    15f2:	31 e0       	ldi	r19, 0x01	; 1
    15f4:	3b 83       	std	Y+3, r19	; 0x03
    15f6:	2a 83       	std	Y+2, r18	; 0x02
    15f8:	95 c0       	rjmp	.+298    	; 0x1724 <__stack+0x625>
		case 'U': return CHAR_U;
    15fa:	88 ec       	ldi	r24, 0xC8	; 200
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	9b 83       	std	Y+3, r25	; 0x03
    1600:	8a 83       	std	Y+2, r24	; 0x02
    1602:	90 c0       	rjmp	.+288    	; 0x1724 <__stack+0x625>
		case 'u': return CHAR_u;
    1604:	2d ec       	ldi	r18, 0xCD	; 205
    1606:	31 e0       	ldi	r19, 0x01	; 1
    1608:	3b 83       	std	Y+3, r19	; 0x03
    160a:	2a 83       	std	Y+2, r18	; 0x02
    160c:	8b c0       	rjmp	.+278    	; 0x1724 <__stack+0x625>
		case 'V': return CHAR_V;
    160e:	82 ed       	ldi	r24, 0xD2	; 210
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	9b 83       	std	Y+3, r25	; 0x03
    1614:	8a 83       	std	Y+2, r24	; 0x02
    1616:	86 c0       	rjmp	.+268    	; 0x1724 <__stack+0x625>
		case 'v': return CHAR_v;
    1618:	27 ed       	ldi	r18, 0xD7	; 215
    161a:	31 e0       	ldi	r19, 0x01	; 1
    161c:	3b 83       	std	Y+3, r19	; 0x03
    161e:	2a 83       	std	Y+2, r18	; 0x02
    1620:	81 c0       	rjmp	.+258    	; 0x1724 <__stack+0x625>
		case 'W': return CHAR_W;
    1622:	8c ed       	ldi	r24, 0xDC	; 220
    1624:	91 e0       	ldi	r25, 0x01	; 1
    1626:	9b 83       	std	Y+3, r25	; 0x03
    1628:	8a 83       	std	Y+2, r24	; 0x02
    162a:	7c c0       	rjmp	.+248    	; 0x1724 <__stack+0x625>
		case 'w': return CHAR_w;
    162c:	21 ee       	ldi	r18, 0xE1	; 225
    162e:	31 e0       	ldi	r19, 0x01	; 1
    1630:	3b 83       	std	Y+3, r19	; 0x03
    1632:	2a 83       	std	Y+2, r18	; 0x02
    1634:	77 c0       	rjmp	.+238    	; 0x1724 <__stack+0x625>
		case 'X': return CHAR_X;
    1636:	86 ee       	ldi	r24, 0xE6	; 230
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	9b 83       	std	Y+3, r25	; 0x03
    163c:	8a 83       	std	Y+2, r24	; 0x02
    163e:	72 c0       	rjmp	.+228    	; 0x1724 <__stack+0x625>
		case 'x': return CHAR_x;
    1640:	2b ee       	ldi	r18, 0xEB	; 235
    1642:	31 e0       	ldi	r19, 0x01	; 1
    1644:	3b 83       	std	Y+3, r19	; 0x03
    1646:	2a 83       	std	Y+2, r18	; 0x02
    1648:	6d c0       	rjmp	.+218    	; 0x1724 <__stack+0x625>
		case 'Y': return CHAR_Y;
    164a:	80 ef       	ldi	r24, 0xF0	; 240
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	9b 83       	std	Y+3, r25	; 0x03
    1650:	8a 83       	std	Y+2, r24	; 0x02
    1652:	68 c0       	rjmp	.+208    	; 0x1724 <__stack+0x625>
		case 'y': return CHAR_y;
    1654:	25 ef       	ldi	r18, 0xF5	; 245
    1656:	31 e0       	ldi	r19, 0x01	; 1
    1658:	3b 83       	std	Y+3, r19	; 0x03
    165a:	2a 83       	std	Y+2, r18	; 0x02
    165c:	63 c0       	rjmp	.+198    	; 0x1724 <__stack+0x625>
		case 'Z': return CHAR_Z;
    165e:	8a ef       	ldi	r24, 0xFA	; 250
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	9b 83       	std	Y+3, r25	; 0x03
    1664:	8a 83       	std	Y+2, r24	; 0x02
    1666:	5e c0       	rjmp	.+188    	; 0x1724 <__stack+0x625>
		case 'z': return CHAR_z;
    1668:	2f ef       	ldi	r18, 0xFF	; 255
    166a:	31 e0       	ldi	r19, 0x01	; 1
    166c:	3b 83       	std	Y+3, r19	; 0x03
    166e:	2a 83       	std	Y+2, r18	; 0x02
    1670:	59 c0       	rjmp	.+178    	; 0x1724 <__stack+0x625>

		case '0': return CHAR_0;
    1672:	84 e0       	ldi	r24, 0x04	; 4
    1674:	92 e0       	ldi	r25, 0x02	; 2
    1676:	9b 83       	std	Y+3, r25	; 0x03
    1678:	8a 83       	std	Y+2, r24	; 0x02
    167a:	54 c0       	rjmp	.+168    	; 0x1724 <__stack+0x625>
		case '1': return CHAR_1;
    167c:	29 e0       	ldi	r18, 0x09	; 9
    167e:	32 e0       	ldi	r19, 0x02	; 2
    1680:	3b 83       	std	Y+3, r19	; 0x03
    1682:	2a 83       	std	Y+2, r18	; 0x02
    1684:	4f c0       	rjmp	.+158    	; 0x1724 <__stack+0x625>
		case '2': return CHAR_2;
    1686:	8e e0       	ldi	r24, 0x0E	; 14
    1688:	92 e0       	ldi	r25, 0x02	; 2
    168a:	9b 83       	std	Y+3, r25	; 0x03
    168c:	8a 83       	std	Y+2, r24	; 0x02
    168e:	4a c0       	rjmp	.+148    	; 0x1724 <__stack+0x625>
		case '3': return CHAR_3;
    1690:	23 e1       	ldi	r18, 0x13	; 19
    1692:	32 e0       	ldi	r19, 0x02	; 2
    1694:	3b 83       	std	Y+3, r19	; 0x03
    1696:	2a 83       	std	Y+2, r18	; 0x02
    1698:	45 c0       	rjmp	.+138    	; 0x1724 <__stack+0x625>
		case '4': return CHAR_4;
    169a:	88 e1       	ldi	r24, 0x18	; 24
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	9b 83       	std	Y+3, r25	; 0x03
    16a0:	8a 83       	std	Y+2, r24	; 0x02
    16a2:	40 c0       	rjmp	.+128    	; 0x1724 <__stack+0x625>
		case '5': return CHAR_5;
    16a4:	2d e1       	ldi	r18, 0x1D	; 29
    16a6:	32 e0       	ldi	r19, 0x02	; 2
    16a8:	3b 83       	std	Y+3, r19	; 0x03
    16aa:	2a 83       	std	Y+2, r18	; 0x02
    16ac:	3b c0       	rjmp	.+118    	; 0x1724 <__stack+0x625>
		case '6': return CHAR_6;
    16ae:	82 e2       	ldi	r24, 0x22	; 34
    16b0:	92 e0       	ldi	r25, 0x02	; 2
    16b2:	9b 83       	std	Y+3, r25	; 0x03
    16b4:	8a 83       	std	Y+2, r24	; 0x02
    16b6:	36 c0       	rjmp	.+108    	; 0x1724 <__stack+0x625>
		case '7': return CHAR_7;
    16b8:	27 e2       	ldi	r18, 0x27	; 39
    16ba:	32 e0       	ldi	r19, 0x02	; 2
    16bc:	3b 83       	std	Y+3, r19	; 0x03
    16be:	2a 83       	std	Y+2, r18	; 0x02
    16c0:	31 c0       	rjmp	.+98     	; 0x1724 <__stack+0x625>
		case '8': return CHAR_8;
    16c2:	8c e2       	ldi	r24, 0x2C	; 44
    16c4:	92 e0       	ldi	r25, 0x02	; 2
    16c6:	9b 83       	std	Y+3, r25	; 0x03
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	2c c0       	rjmp	.+88     	; 0x1724 <__stack+0x625>
		case '9': return CHAR_9;
    16cc:	21 e3       	ldi	r18, 0x31	; 49
    16ce:	32 e0       	ldi	r19, 0x02	; 2
    16d0:	3b 83       	std	Y+3, r19	; 0x03
    16d2:	2a 83       	std	Y+2, r18	; 0x02
    16d4:	27 c0       	rjmp	.+78     	; 0x1724 <__stack+0x625>

		case '.': return CHAR_DOT;
    16d6:	86 e3       	ldi	r24, 0x36	; 54
    16d8:	92 e0       	ldi	r25, 0x02	; 2
    16da:	9b 83       	std	Y+3, r25	; 0x03
    16dc:	8a 83       	std	Y+2, r24	; 0x02
    16de:	22 c0       	rjmp	.+68     	; 0x1724 <__stack+0x625>
		case ',': return CHAR_COMMA;
    16e0:	2b e3       	ldi	r18, 0x3B	; 59
    16e2:	32 e0       	ldi	r19, 0x02	; 2
    16e4:	3b 83       	std	Y+3, r19	; 0x03
    16e6:	2a 83       	std	Y+2, r18	; 0x02
    16e8:	1d c0       	rjmp	.+58     	; 0x1724 <__stack+0x625>
		case '-': return CHAR_DASH;
    16ea:	80 e4       	ldi	r24, 0x40	; 64
    16ec:	92 e0       	ldi	r25, 0x02	; 2
    16ee:	9b 83       	std	Y+3, r25	; 0x03
    16f0:	8a 83       	std	Y+2, r24	; 0x02
    16f2:	18 c0       	rjmp	.+48     	; 0x1724 <__stack+0x625>
		case '"': return CHAR_CITATION;
    16f4:	25 e4       	ldi	r18, 0x45	; 69
    16f6:	32 e0       	ldi	r19, 0x02	; 2
    16f8:	3b 83       	std	Y+3, r19	; 0x03
    16fa:	2a 83       	std	Y+2, r18	; 0x02
    16fc:	13 c0       	rjmp	.+38     	; 0x1724 <__stack+0x625>
		case '!': return CHAR_EXCLAMATION;
    16fe:	8f e4       	ldi	r24, 0x4F	; 79
    1700:	92 e0       	ldi	r25, 0x02	; 2
    1702:	9b 83       	std	Y+3, r25	; 0x03
    1704:	8a 83       	std	Y+2, r24	; 0x02
    1706:	0e c0       	rjmp	.+28     	; 0x1724 <__stack+0x625>
		case '?': return CHAR_QUESTION;
    1708:	24 e5       	ldi	r18, 0x54	; 84
    170a:	32 e0       	ldi	r19, 0x02	; 2
    170c:	3b 83       	std	Y+3, r19	; 0x03
    170e:	2a 83       	std	Y+2, r18	; 0x02
    1710:	09 c0       	rjmp	.+18     	; 0x1724 <__stack+0x625>
		case ':': return CHAR_COLON;
    1712:	89 e5       	ldi	r24, 0x59	; 89
    1714:	92 e0       	ldi	r25, 0x02	; 2
    1716:	9b 83       	std	Y+3, r25	; 0x03
    1718:	8a 83       	std	Y+2, r24	; 0x02
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <__stack+0x625>
		default: return CHAR_SPACE;
    171c:	27 e6       	ldi	r18, 0x67	; 103
    171e:	32 e0       	ldi	r19, 0x02	; 2
    1720:	3b 83       	std	Y+3, r19	; 0x03
    1722:	2a 83       	std	Y+2, r18	; 0x02
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <flip>:

void flip(unsigned char* c1, unsigned char* c2)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <flip+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <flip+0x8>
    1740:	0f 92       	push	r0
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	9b 83       	std	Y+3, r25	; 0x03
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	7d 83       	std	Y+5, r23	; 0x05
    174c:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char temp = *c1;
    174e:	ea 81       	ldd	r30, Y+2	; 0x02
    1750:	fb 81       	ldd	r31, Y+3	; 0x03
    1752:	80 81       	ld	r24, Z
    1754:	89 83       	std	Y+1, r24	; 0x01
	*c1 = *c2;
    1756:	ec 81       	ldd	r30, Y+4	; 0x04
    1758:	fd 81       	ldd	r31, Y+5	; 0x05
    175a:	80 81       	ld	r24, Z
    175c:	ea 81       	ldd	r30, Y+2	; 0x02
    175e:	fb 81       	ldd	r31, Y+3	; 0x03
    1760:	80 83       	st	Z, r24
	*c2 = temp;
    1762:	ec 81       	ldd	r30, Y+4	; 0x04
    1764:	fd 81       	ldd	r31, Y+5	; 0x05
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	80 83       	st	Z, r24
	temp = 0;
    176a:	19 82       	std	Y+1, r1	; 0x01
}
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <__fixunssfsi>:
    177c:	ef 92       	push	r14
    177e:	ff 92       	push	r15
    1780:	0f 93       	push	r16
    1782:	1f 93       	push	r17
    1784:	7b 01       	movw	r14, r22
    1786:	8c 01       	movw	r16, r24
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	5f e4       	ldi	r21, 0x4F	; 79
    1790:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gesf2>
    1794:	88 23       	and	r24, r24
    1796:	8c f0       	brlt	.+34     	; 0x17ba <__fixunssfsi+0x3e>
    1798:	c8 01       	movw	r24, r16
    179a:	b7 01       	movw	r22, r14
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	5f e4       	ldi	r21, 0x4F	; 79
    17a4:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__subsf3>
    17a8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__fixsfsi>
    17ac:	9b 01       	movw	r18, r22
    17ae:	ac 01       	movw	r20, r24
    17b0:	20 50       	subi	r18, 0x00	; 0
    17b2:	30 40       	sbci	r19, 0x00	; 0
    17b4:	40 40       	sbci	r20, 0x00	; 0
    17b6:	50 48       	sbci	r21, 0x80	; 128
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <__fixunssfsi+0x4a>
    17ba:	c8 01       	movw	r24, r16
    17bc:	b7 01       	movw	r22, r14
    17be:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__fixsfsi>
    17c2:	9b 01       	movw	r18, r22
    17c4:	ac 01       	movw	r20, r24
    17c6:	b9 01       	movw	r22, r18
    17c8:	ca 01       	movw	r24, r20
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	08 95       	ret

000017d4 <_fpadd_parts>:
    17d4:	a0 e0       	ldi	r26, 0x00	; 0
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e0 ef       	ldi	r30, 0xF0	; 240
    17da:	fb e0       	ldi	r31, 0x0B	; 11
    17dc:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__prologue_saves__>
    17e0:	dc 01       	movw	r26, r24
    17e2:	2b 01       	movw	r4, r22
    17e4:	fa 01       	movw	r30, r20
    17e6:	9c 91       	ld	r25, X
    17e8:	92 30       	cpi	r25, 0x02	; 2
    17ea:	08 f4       	brcc	.+2      	; 0x17ee <_fpadd_parts+0x1a>
    17ec:	39 c1       	rjmp	.+626    	; 0x1a60 <_fpadd_parts+0x28c>
    17ee:	eb 01       	movw	r28, r22
    17f0:	88 81       	ld	r24, Y
    17f2:	82 30       	cpi	r24, 0x02	; 2
    17f4:	08 f4       	brcc	.+2      	; 0x17f8 <_fpadd_parts+0x24>
    17f6:	33 c1       	rjmp	.+614    	; 0x1a5e <_fpadd_parts+0x28a>
    17f8:	94 30       	cpi	r25, 0x04	; 4
    17fa:	69 f4       	brne	.+26     	; 0x1816 <_fpadd_parts+0x42>
    17fc:	84 30       	cpi	r24, 0x04	; 4
    17fe:	09 f0       	breq	.+2      	; 0x1802 <_fpadd_parts+0x2e>
    1800:	2f c1       	rjmp	.+606    	; 0x1a60 <_fpadd_parts+0x28c>
    1802:	11 96       	adiw	r26, 0x01	; 1
    1804:	9c 91       	ld	r25, X
    1806:	11 97       	sbiw	r26, 0x01	; 1
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	98 17       	cp	r25, r24
    180c:	09 f4       	brne	.+2      	; 0x1810 <_fpadd_parts+0x3c>
    180e:	28 c1       	rjmp	.+592    	; 0x1a60 <_fpadd_parts+0x28c>
    1810:	ae e5       	ldi	r26, 0x5E	; 94
    1812:	b2 e0       	ldi	r27, 0x02	; 2
    1814:	25 c1       	rjmp	.+586    	; 0x1a60 <_fpadd_parts+0x28c>
    1816:	84 30       	cpi	r24, 0x04	; 4
    1818:	09 f4       	brne	.+2      	; 0x181c <_fpadd_parts+0x48>
    181a:	21 c1       	rjmp	.+578    	; 0x1a5e <_fpadd_parts+0x28a>
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	a9 f4       	brne	.+42     	; 0x184a <_fpadd_parts+0x76>
    1820:	92 30       	cpi	r25, 0x02	; 2
    1822:	09 f0       	breq	.+2      	; 0x1826 <_fpadd_parts+0x52>
    1824:	1d c1       	rjmp	.+570    	; 0x1a60 <_fpadd_parts+0x28c>
    1826:	9a 01       	movw	r18, r20
    1828:	ad 01       	movw	r20, r26
    182a:	88 e0       	ldi	r24, 0x08	; 8
    182c:	ea 01       	movw	r28, r20
    182e:	09 90       	ld	r0, Y+
    1830:	ae 01       	movw	r20, r28
    1832:	e9 01       	movw	r28, r18
    1834:	09 92       	st	Y+, r0
    1836:	9e 01       	movw	r18, r28
    1838:	81 50       	subi	r24, 0x01	; 1
    183a:	c1 f7       	brne	.-16     	; 0x182c <_fpadd_parts+0x58>
    183c:	e2 01       	movw	r28, r4
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	11 96       	adiw	r26, 0x01	; 1
    1842:	9c 91       	ld	r25, X
    1844:	89 23       	and	r24, r25
    1846:	81 83       	std	Z+1, r24	; 0x01
    1848:	08 c1       	rjmp	.+528    	; 0x1a5a <_fpadd_parts+0x286>
    184a:	92 30       	cpi	r25, 0x02	; 2
    184c:	09 f4       	brne	.+2      	; 0x1850 <_fpadd_parts+0x7c>
    184e:	07 c1       	rjmp	.+526    	; 0x1a5e <_fpadd_parts+0x28a>
    1850:	12 96       	adiw	r26, 0x02	; 2
    1852:	2d 90       	ld	r2, X+
    1854:	3c 90       	ld	r3, X
    1856:	13 97       	sbiw	r26, 0x03	; 3
    1858:	eb 01       	movw	r28, r22
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	9b 81       	ldd	r25, Y+3	; 0x03
    185e:	14 96       	adiw	r26, 0x04	; 4
    1860:	ad 90       	ld	r10, X+
    1862:	bd 90       	ld	r11, X+
    1864:	cd 90       	ld	r12, X+
    1866:	dc 90       	ld	r13, X
    1868:	17 97       	sbiw	r26, 0x07	; 7
    186a:	ec 80       	ldd	r14, Y+4	; 0x04
    186c:	fd 80       	ldd	r15, Y+5	; 0x05
    186e:	0e 81       	ldd	r16, Y+6	; 0x06
    1870:	1f 81       	ldd	r17, Y+7	; 0x07
    1872:	91 01       	movw	r18, r2
    1874:	28 1b       	sub	r18, r24
    1876:	39 0b       	sbc	r19, r25
    1878:	b9 01       	movw	r22, r18
    187a:	37 ff       	sbrs	r19, 7
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <_fpadd_parts+0xb2>
    187e:	66 27       	eor	r22, r22
    1880:	77 27       	eor	r23, r23
    1882:	62 1b       	sub	r22, r18
    1884:	73 0b       	sbc	r23, r19
    1886:	60 32       	cpi	r22, 0x20	; 32
    1888:	71 05       	cpc	r23, r1
    188a:	0c f0       	brlt	.+2      	; 0x188e <_fpadd_parts+0xba>
    188c:	61 c0       	rjmp	.+194    	; 0x1950 <_fpadd_parts+0x17c>
    188e:	12 16       	cp	r1, r18
    1890:	13 06       	cpc	r1, r19
    1892:	6c f5       	brge	.+90     	; 0x18ee <_fpadd_parts+0x11a>
    1894:	37 01       	movw	r6, r14
    1896:	48 01       	movw	r8, r16
    1898:	06 2e       	mov	r0, r22
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <_fpadd_parts+0xd0>
    189c:	96 94       	lsr	r9
    189e:	87 94       	ror	r8
    18a0:	77 94       	ror	r7
    18a2:	67 94       	ror	r6
    18a4:	0a 94       	dec	r0
    18a6:	d2 f7       	brpl	.-12     	; 0x189c <_fpadd_parts+0xc8>
    18a8:	21 e0       	ldi	r18, 0x01	; 1
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	04 c0       	rjmp	.+8      	; 0x18ba <_fpadd_parts+0xe6>
    18b2:	22 0f       	add	r18, r18
    18b4:	33 1f       	adc	r19, r19
    18b6:	44 1f       	adc	r20, r20
    18b8:	55 1f       	adc	r21, r21
    18ba:	6a 95       	dec	r22
    18bc:	d2 f7       	brpl	.-12     	; 0x18b2 <_fpadd_parts+0xde>
    18be:	21 50       	subi	r18, 0x01	; 1
    18c0:	30 40       	sbci	r19, 0x00	; 0
    18c2:	40 40       	sbci	r20, 0x00	; 0
    18c4:	50 40       	sbci	r21, 0x00	; 0
    18c6:	2e 21       	and	r18, r14
    18c8:	3f 21       	and	r19, r15
    18ca:	40 23       	and	r20, r16
    18cc:	51 23       	and	r21, r17
    18ce:	21 15       	cp	r18, r1
    18d0:	31 05       	cpc	r19, r1
    18d2:	41 05       	cpc	r20, r1
    18d4:	51 05       	cpc	r21, r1
    18d6:	21 f0       	breq	.+8      	; 0x18e0 <_fpadd_parts+0x10c>
    18d8:	21 e0       	ldi	r18, 0x01	; 1
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	79 01       	movw	r14, r18
    18e2:	8a 01       	movw	r16, r20
    18e4:	e6 28       	or	r14, r6
    18e6:	f7 28       	or	r15, r7
    18e8:	08 29       	or	r16, r8
    18ea:	19 29       	or	r17, r9
    18ec:	3c c0       	rjmp	.+120    	; 0x1966 <_fpadd_parts+0x192>
    18ee:	23 2b       	or	r18, r19
    18f0:	d1 f1       	breq	.+116    	; 0x1966 <_fpadd_parts+0x192>
    18f2:	26 0e       	add	r2, r22
    18f4:	37 1e       	adc	r3, r23
    18f6:	35 01       	movw	r6, r10
    18f8:	46 01       	movw	r8, r12
    18fa:	06 2e       	mov	r0, r22
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <_fpadd_parts+0x132>
    18fe:	96 94       	lsr	r9
    1900:	87 94       	ror	r8
    1902:	77 94       	ror	r7
    1904:	67 94       	ror	r6
    1906:	0a 94       	dec	r0
    1908:	d2 f7       	brpl	.-12     	; 0x18fe <_fpadd_parts+0x12a>
    190a:	21 e0       	ldi	r18, 0x01	; 1
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	04 c0       	rjmp	.+8      	; 0x191c <_fpadd_parts+0x148>
    1914:	22 0f       	add	r18, r18
    1916:	33 1f       	adc	r19, r19
    1918:	44 1f       	adc	r20, r20
    191a:	55 1f       	adc	r21, r21
    191c:	6a 95       	dec	r22
    191e:	d2 f7       	brpl	.-12     	; 0x1914 <_fpadd_parts+0x140>
    1920:	21 50       	subi	r18, 0x01	; 1
    1922:	30 40       	sbci	r19, 0x00	; 0
    1924:	40 40       	sbci	r20, 0x00	; 0
    1926:	50 40       	sbci	r21, 0x00	; 0
    1928:	2a 21       	and	r18, r10
    192a:	3b 21       	and	r19, r11
    192c:	4c 21       	and	r20, r12
    192e:	5d 21       	and	r21, r13
    1930:	21 15       	cp	r18, r1
    1932:	31 05       	cpc	r19, r1
    1934:	41 05       	cpc	r20, r1
    1936:	51 05       	cpc	r21, r1
    1938:	21 f0       	breq	.+8      	; 0x1942 <_fpadd_parts+0x16e>
    193a:	21 e0       	ldi	r18, 0x01	; 1
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	59 01       	movw	r10, r18
    1944:	6a 01       	movw	r12, r20
    1946:	a6 28       	or	r10, r6
    1948:	b7 28       	or	r11, r7
    194a:	c8 28       	or	r12, r8
    194c:	d9 28       	or	r13, r9
    194e:	0b c0       	rjmp	.+22     	; 0x1966 <_fpadd_parts+0x192>
    1950:	82 15       	cp	r24, r2
    1952:	93 05       	cpc	r25, r3
    1954:	2c f0       	brlt	.+10     	; 0x1960 <_fpadd_parts+0x18c>
    1956:	1c 01       	movw	r2, r24
    1958:	aa 24       	eor	r10, r10
    195a:	bb 24       	eor	r11, r11
    195c:	65 01       	movw	r12, r10
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <_fpadd_parts+0x192>
    1960:	ee 24       	eor	r14, r14
    1962:	ff 24       	eor	r15, r15
    1964:	87 01       	movw	r16, r14
    1966:	11 96       	adiw	r26, 0x01	; 1
    1968:	9c 91       	ld	r25, X
    196a:	d2 01       	movw	r26, r4
    196c:	11 96       	adiw	r26, 0x01	; 1
    196e:	8c 91       	ld	r24, X
    1970:	98 17       	cp	r25, r24
    1972:	09 f4       	brne	.+2      	; 0x1976 <_fpadd_parts+0x1a2>
    1974:	45 c0       	rjmp	.+138    	; 0x1a00 <_fpadd_parts+0x22c>
    1976:	99 23       	and	r25, r25
    1978:	39 f0       	breq	.+14     	; 0x1988 <_fpadd_parts+0x1b4>
    197a:	a8 01       	movw	r20, r16
    197c:	97 01       	movw	r18, r14
    197e:	2a 19       	sub	r18, r10
    1980:	3b 09       	sbc	r19, r11
    1982:	4c 09       	sbc	r20, r12
    1984:	5d 09       	sbc	r21, r13
    1986:	06 c0       	rjmp	.+12     	; 0x1994 <_fpadd_parts+0x1c0>
    1988:	a6 01       	movw	r20, r12
    198a:	95 01       	movw	r18, r10
    198c:	2e 19       	sub	r18, r14
    198e:	3f 09       	sbc	r19, r15
    1990:	40 0b       	sbc	r20, r16
    1992:	51 0b       	sbc	r21, r17
    1994:	57 fd       	sbrc	r21, 7
    1996:	08 c0       	rjmp	.+16     	; 0x19a8 <_fpadd_parts+0x1d4>
    1998:	11 82       	std	Z+1, r1	; 0x01
    199a:	33 82       	std	Z+3, r3	; 0x03
    199c:	22 82       	std	Z+2, r2	; 0x02
    199e:	24 83       	std	Z+4, r18	; 0x04
    19a0:	35 83       	std	Z+5, r19	; 0x05
    19a2:	46 83       	std	Z+6, r20	; 0x06
    19a4:	57 83       	std	Z+7, r21	; 0x07
    19a6:	1d c0       	rjmp	.+58     	; 0x19e2 <_fpadd_parts+0x20e>
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	81 83       	std	Z+1, r24	; 0x01
    19ac:	33 82       	std	Z+3, r3	; 0x03
    19ae:	22 82       	std	Z+2, r2	; 0x02
    19b0:	88 27       	eor	r24, r24
    19b2:	99 27       	eor	r25, r25
    19b4:	dc 01       	movw	r26, r24
    19b6:	82 1b       	sub	r24, r18
    19b8:	93 0b       	sbc	r25, r19
    19ba:	a4 0b       	sbc	r26, r20
    19bc:	b5 0b       	sbc	r27, r21
    19be:	84 83       	std	Z+4, r24	; 0x04
    19c0:	95 83       	std	Z+5, r25	; 0x05
    19c2:	a6 83       	std	Z+6, r26	; 0x06
    19c4:	b7 83       	std	Z+7, r27	; 0x07
    19c6:	0d c0       	rjmp	.+26     	; 0x19e2 <_fpadd_parts+0x20e>
    19c8:	22 0f       	add	r18, r18
    19ca:	33 1f       	adc	r19, r19
    19cc:	44 1f       	adc	r20, r20
    19ce:	55 1f       	adc	r21, r21
    19d0:	24 83       	std	Z+4, r18	; 0x04
    19d2:	35 83       	std	Z+5, r19	; 0x05
    19d4:	46 83       	std	Z+6, r20	; 0x06
    19d6:	57 83       	std	Z+7, r21	; 0x07
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	93 83       	std	Z+3, r25	; 0x03
    19e0:	82 83       	std	Z+2, r24	; 0x02
    19e2:	24 81       	ldd	r18, Z+4	; 0x04
    19e4:	35 81       	ldd	r19, Z+5	; 0x05
    19e6:	46 81       	ldd	r20, Z+6	; 0x06
    19e8:	57 81       	ldd	r21, Z+7	; 0x07
    19ea:	da 01       	movw	r26, r20
    19ec:	c9 01       	movw	r24, r18
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	a1 09       	sbc	r26, r1
    19f2:	b1 09       	sbc	r27, r1
    19f4:	8f 5f       	subi	r24, 0xFF	; 255
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	af 4f       	sbci	r26, 0xFF	; 255
    19fa:	bf 43       	sbci	r27, 0x3F	; 63
    19fc:	28 f3       	brcs	.-54     	; 0x19c8 <_fpadd_parts+0x1f4>
    19fe:	0b c0       	rjmp	.+22     	; 0x1a16 <_fpadd_parts+0x242>
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	33 82       	std	Z+3, r3	; 0x03
    1a04:	22 82       	std	Z+2, r2	; 0x02
    1a06:	ea 0c       	add	r14, r10
    1a08:	fb 1c       	adc	r15, r11
    1a0a:	0c 1d       	adc	r16, r12
    1a0c:	1d 1d       	adc	r17, r13
    1a0e:	e4 82       	std	Z+4, r14	; 0x04
    1a10:	f5 82       	std	Z+5, r15	; 0x05
    1a12:	06 83       	std	Z+6, r16	; 0x06
    1a14:	17 83       	std	Z+7, r17	; 0x07
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	80 83       	st	Z, r24
    1a1a:	24 81       	ldd	r18, Z+4	; 0x04
    1a1c:	35 81       	ldd	r19, Z+5	; 0x05
    1a1e:	46 81       	ldd	r20, Z+6	; 0x06
    1a20:	57 81       	ldd	r21, Z+7	; 0x07
    1a22:	57 ff       	sbrs	r21, 7
    1a24:	1a c0       	rjmp	.+52     	; 0x1a5a <_fpadd_parts+0x286>
    1a26:	c9 01       	movw	r24, r18
    1a28:	aa 27       	eor	r26, r26
    1a2a:	97 fd       	sbrc	r25, 7
    1a2c:	a0 95       	com	r26
    1a2e:	ba 2f       	mov	r27, r26
    1a30:	81 70       	andi	r24, 0x01	; 1
    1a32:	90 70       	andi	r25, 0x00	; 0
    1a34:	a0 70       	andi	r26, 0x00	; 0
    1a36:	b0 70       	andi	r27, 0x00	; 0
    1a38:	56 95       	lsr	r21
    1a3a:	47 95       	ror	r20
    1a3c:	37 95       	ror	r19
    1a3e:	27 95       	ror	r18
    1a40:	82 2b       	or	r24, r18
    1a42:	93 2b       	or	r25, r19
    1a44:	a4 2b       	or	r26, r20
    1a46:	b5 2b       	or	r27, r21
    1a48:	84 83       	std	Z+4, r24	; 0x04
    1a4a:	95 83       	std	Z+5, r25	; 0x05
    1a4c:	a6 83       	std	Z+6, r26	; 0x06
    1a4e:	b7 83       	std	Z+7, r27	; 0x07
    1a50:	82 81       	ldd	r24, Z+2	; 0x02
    1a52:	93 81       	ldd	r25, Z+3	; 0x03
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	93 83       	std	Z+3, r25	; 0x03
    1a58:	82 83       	std	Z+2, r24	; 0x02
    1a5a:	df 01       	movw	r26, r30
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <_fpadd_parts+0x28c>
    1a5e:	d2 01       	movw	r26, r4
    1a60:	cd 01       	movw	r24, r26
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	e2 e1       	ldi	r30, 0x12	; 18
    1a68:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__epilogue_restores__>

00001a6c <__subsf3>:
    1a6c:	a0 e2       	ldi	r26, 0x20	; 32
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ec e3       	ldi	r30, 0x3C	; 60
    1a72:	fd e0       	ldi	r31, 0x0D	; 13
    1a74:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x18>
    1a78:	69 83       	std	Y+1, r22	; 0x01
    1a7a:	7a 83       	std	Y+2, r23	; 0x02
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
    1a7e:	9c 83       	std	Y+4, r25	; 0x04
    1a80:	2d 83       	std	Y+5, r18	; 0x05
    1a82:	3e 83       	std	Y+6, r19	; 0x06
    1a84:	4f 83       	std	Y+7, r20	; 0x07
    1a86:	58 87       	std	Y+8, r21	; 0x08
    1a88:	e9 e0       	ldi	r30, 0x09	; 9
    1a8a:	ee 2e       	mov	r14, r30
    1a8c:	f1 2c       	mov	r15, r1
    1a8e:	ec 0e       	add	r14, r28
    1a90:	fd 1e       	adc	r15, r29
    1a92:	ce 01       	movw	r24, r28
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	b7 01       	movw	r22, r14
    1a98:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1a9c:	8e 01       	movw	r16, r28
    1a9e:	0f 5e       	subi	r16, 0xEF	; 239
    1aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	05 96       	adiw	r24, 0x05	; 5
    1aa6:	b8 01       	movw	r22, r16
    1aa8:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1aac:	8a 89       	ldd	r24, Y+18	; 0x12
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	89 27       	eor	r24, r25
    1ab2:	8a 8b       	std	Y+18, r24	; 0x12
    1ab4:	c7 01       	movw	r24, r14
    1ab6:	b8 01       	movw	r22, r16
    1ab8:	ae 01       	movw	r20, r28
    1aba:	47 5e       	subi	r20, 0xE7	; 231
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_fpadd_parts>
    1ac2:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__pack_f>
    1ac6:	a0 96       	adiw	r28, 0x20	; 32
    1ac8:	e6 e0       	ldi	r30, 0x06	; 6
    1aca:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x18>

00001ace <__addsf3>:
    1ace:	a0 e2       	ldi	r26, 0x20	; 32
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	ed e6       	ldi	r30, 0x6D	; 109
    1ad4:	fd e0       	ldi	r31, 0x0D	; 13
    1ad6:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x18>
    1ada:	69 83       	std	Y+1, r22	; 0x01
    1adc:	7a 83       	std	Y+2, r23	; 0x02
    1ade:	8b 83       	std	Y+3, r24	; 0x03
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	2d 83       	std	Y+5, r18	; 0x05
    1ae4:	3e 83       	std	Y+6, r19	; 0x06
    1ae6:	4f 83       	std	Y+7, r20	; 0x07
    1ae8:	58 87       	std	Y+8, r21	; 0x08
    1aea:	f9 e0       	ldi	r31, 0x09	; 9
    1aec:	ef 2e       	mov	r14, r31
    1aee:	f1 2c       	mov	r15, r1
    1af0:	ec 0e       	add	r14, r28
    1af2:	fd 1e       	adc	r15, r29
    1af4:	ce 01       	movw	r24, r28
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	b7 01       	movw	r22, r14
    1afa:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1afe:	8e 01       	movw	r16, r28
    1b00:	0f 5e       	subi	r16, 0xEF	; 239
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	ce 01       	movw	r24, r28
    1b06:	05 96       	adiw	r24, 0x05	; 5
    1b08:	b8 01       	movw	r22, r16
    1b0a:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1b0e:	c7 01       	movw	r24, r14
    1b10:	b8 01       	movw	r22, r16
    1b12:	ae 01       	movw	r20, r28
    1b14:	47 5e       	subi	r20, 0xE7	; 231
    1b16:	5f 4f       	sbci	r21, 0xFF	; 255
    1b18:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_fpadd_parts>
    1b1c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__pack_f>
    1b20:	a0 96       	adiw	r28, 0x20	; 32
    1b22:	e6 e0       	ldi	r30, 0x06	; 6
    1b24:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x18>

00001b28 <__mulsf3>:
    1b28:	a0 e2       	ldi	r26, 0x20	; 32
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ea e9       	ldi	r30, 0x9A	; 154
    1b2e:	fd e0       	ldi	r31, 0x0D	; 13
    1b30:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__prologue_saves__>
    1b34:	69 83       	std	Y+1, r22	; 0x01
    1b36:	7a 83       	std	Y+2, r23	; 0x02
    1b38:	8b 83       	std	Y+3, r24	; 0x03
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	2d 83       	std	Y+5, r18	; 0x05
    1b3e:	3e 83       	std	Y+6, r19	; 0x06
    1b40:	4f 83       	std	Y+7, r20	; 0x07
    1b42:	58 87       	std	Y+8, r21	; 0x08
    1b44:	ce 01       	movw	r24, r28
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	be 01       	movw	r22, r28
    1b4a:	67 5f       	subi	r22, 0xF7	; 247
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1b52:	ce 01       	movw	r24, r28
    1b54:	05 96       	adiw	r24, 0x05	; 5
    1b56:	be 01       	movw	r22, r28
    1b58:	6f 5e       	subi	r22, 0xEF	; 239
    1b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5c:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1b60:	99 85       	ldd	r25, Y+9	; 0x09
    1b62:	92 30       	cpi	r25, 0x02	; 2
    1b64:	88 f0       	brcs	.+34     	; 0x1b88 <__mulsf3+0x60>
    1b66:	89 89       	ldd	r24, Y+17	; 0x11
    1b68:	82 30       	cpi	r24, 0x02	; 2
    1b6a:	c8 f0       	brcs	.+50     	; 0x1b9e <__mulsf3+0x76>
    1b6c:	94 30       	cpi	r25, 0x04	; 4
    1b6e:	19 f4       	brne	.+6      	; 0x1b76 <__mulsf3+0x4e>
    1b70:	82 30       	cpi	r24, 0x02	; 2
    1b72:	51 f4       	brne	.+20     	; 0x1b88 <__mulsf3+0x60>
    1b74:	04 c0       	rjmp	.+8      	; 0x1b7e <__mulsf3+0x56>
    1b76:	84 30       	cpi	r24, 0x04	; 4
    1b78:	29 f4       	brne	.+10     	; 0x1b84 <__mulsf3+0x5c>
    1b7a:	92 30       	cpi	r25, 0x02	; 2
    1b7c:	81 f4       	brne	.+32     	; 0x1b9e <__mulsf3+0x76>
    1b7e:	8e e5       	ldi	r24, 0x5E	; 94
    1b80:	92 e0       	ldi	r25, 0x02	; 2
    1b82:	c6 c0       	rjmp	.+396    	; 0x1d10 <__mulsf3+0x1e8>
    1b84:	92 30       	cpi	r25, 0x02	; 2
    1b86:	49 f4       	brne	.+18     	; 0x1b9a <__mulsf3+0x72>
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b8e:	98 13       	cpse	r25, r24
    1b90:	21 e0       	ldi	r18, 0x01	; 1
    1b92:	2a 87       	std	Y+10, r18	; 0x0a
    1b94:	ce 01       	movw	r24, r28
    1b96:	09 96       	adiw	r24, 0x09	; 9
    1b98:	bb c0       	rjmp	.+374    	; 0x1d10 <__mulsf3+0x1e8>
    1b9a:	82 30       	cpi	r24, 0x02	; 2
    1b9c:	49 f4       	brne	.+18     	; 0x1bb0 <__mulsf3+0x88>
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ba4:	98 13       	cpse	r25, r24
    1ba6:	21 e0       	ldi	r18, 0x01	; 1
    1ba8:	2a 8b       	std	Y+18, r18	; 0x12
    1baa:	ce 01       	movw	r24, r28
    1bac:	41 96       	adiw	r24, 0x11	; 17
    1bae:	b0 c0       	rjmp	.+352    	; 0x1d10 <__mulsf3+0x1e8>
    1bb0:	2d 84       	ldd	r2, Y+13	; 0x0d
    1bb2:	3e 84       	ldd	r3, Y+14	; 0x0e
    1bb4:	4f 84       	ldd	r4, Y+15	; 0x0f
    1bb6:	58 88       	ldd	r5, Y+16	; 0x10
    1bb8:	6d 88       	ldd	r6, Y+21	; 0x15
    1bba:	7e 88       	ldd	r7, Y+22	; 0x16
    1bbc:	8f 88       	ldd	r8, Y+23	; 0x17
    1bbe:	98 8c       	ldd	r9, Y+24	; 0x18
    1bc0:	ee 24       	eor	r14, r14
    1bc2:	ff 24       	eor	r15, r15
    1bc4:	87 01       	movw	r16, r14
    1bc6:	aa 24       	eor	r10, r10
    1bc8:	bb 24       	eor	r11, r11
    1bca:	65 01       	movw	r12, r10
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	e0 e0       	ldi	r30, 0x00	; 0
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	c1 01       	movw	r24, r2
    1bda:	81 70       	andi	r24, 0x01	; 1
    1bdc:	90 70       	andi	r25, 0x00	; 0
    1bde:	89 2b       	or	r24, r25
    1be0:	e9 f0       	breq	.+58     	; 0x1c1c <__mulsf3+0xf4>
    1be2:	e6 0c       	add	r14, r6
    1be4:	f7 1c       	adc	r15, r7
    1be6:	08 1d       	adc	r16, r8
    1be8:	19 1d       	adc	r17, r9
    1bea:	9a 01       	movw	r18, r20
    1bec:	ab 01       	movw	r20, r22
    1bee:	2a 0d       	add	r18, r10
    1bf0:	3b 1d       	adc	r19, r11
    1bf2:	4c 1d       	adc	r20, r12
    1bf4:	5d 1d       	adc	r21, r13
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a0 e0       	ldi	r26, 0x00	; 0
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e6 14       	cp	r14, r6
    1c00:	f7 04       	cpc	r15, r7
    1c02:	08 05       	cpc	r16, r8
    1c04:	19 05       	cpc	r17, r9
    1c06:	20 f4       	brcc	.+8      	; 0x1c10 <__mulsf3+0xe8>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	a0 e0       	ldi	r26, 0x00	; 0
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	ba 01       	movw	r22, r20
    1c12:	a9 01       	movw	r20, r18
    1c14:	48 0f       	add	r20, r24
    1c16:	59 1f       	adc	r21, r25
    1c18:	6a 1f       	adc	r22, r26
    1c1a:	7b 1f       	adc	r23, r27
    1c1c:	aa 0c       	add	r10, r10
    1c1e:	bb 1c       	adc	r11, r11
    1c20:	cc 1c       	adc	r12, r12
    1c22:	dd 1c       	adc	r13, r13
    1c24:	97 fe       	sbrs	r9, 7
    1c26:	08 c0       	rjmp	.+16     	; 0x1c38 <__mulsf3+0x110>
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 e0       	ldi	r26, 0x00	; 0
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	a8 2a       	or	r10, r24
    1c32:	b9 2a       	or	r11, r25
    1c34:	ca 2a       	or	r12, r26
    1c36:	db 2a       	or	r13, r27
    1c38:	31 96       	adiw	r30, 0x01	; 1
    1c3a:	e0 32       	cpi	r30, 0x20	; 32
    1c3c:	f1 05       	cpc	r31, r1
    1c3e:	49 f0       	breq	.+18     	; 0x1c52 <__mulsf3+0x12a>
    1c40:	66 0c       	add	r6, r6
    1c42:	77 1c       	adc	r7, r7
    1c44:	88 1c       	adc	r8, r8
    1c46:	99 1c       	adc	r9, r9
    1c48:	56 94       	lsr	r5
    1c4a:	47 94       	ror	r4
    1c4c:	37 94       	ror	r3
    1c4e:	27 94       	ror	r2
    1c50:	c3 cf       	rjmp	.-122    	; 0x1bd8 <__mulsf3+0xb0>
    1c52:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c54:	ea 89       	ldd	r30, Y+18	; 0x12
    1c56:	2b 89       	ldd	r18, Y+19	; 0x13
    1c58:	3c 89       	ldd	r19, Y+20	; 0x14
    1c5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c5e:	28 0f       	add	r18, r24
    1c60:	39 1f       	adc	r19, r25
    1c62:	2e 5f       	subi	r18, 0xFE	; 254
    1c64:	3f 4f       	sbci	r19, 0xFF	; 255
    1c66:	17 c0       	rjmp	.+46     	; 0x1c96 <__mulsf3+0x16e>
    1c68:	ca 01       	movw	r24, r20
    1c6a:	81 70       	andi	r24, 0x01	; 1
    1c6c:	90 70       	andi	r25, 0x00	; 0
    1c6e:	89 2b       	or	r24, r25
    1c70:	61 f0       	breq	.+24     	; 0x1c8a <__mulsf3+0x162>
    1c72:	16 95       	lsr	r17
    1c74:	07 95       	ror	r16
    1c76:	f7 94       	ror	r15
    1c78:	e7 94       	ror	r14
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a0 e0       	ldi	r26, 0x00	; 0
    1c80:	b0 e8       	ldi	r27, 0x80	; 128
    1c82:	e8 2a       	or	r14, r24
    1c84:	f9 2a       	or	r15, r25
    1c86:	0a 2b       	or	r16, r26
    1c88:	1b 2b       	or	r17, r27
    1c8a:	76 95       	lsr	r23
    1c8c:	67 95       	ror	r22
    1c8e:	57 95       	ror	r21
    1c90:	47 95       	ror	r20
    1c92:	2f 5f       	subi	r18, 0xFF	; 255
    1c94:	3f 4f       	sbci	r19, 0xFF	; 255
    1c96:	77 fd       	sbrc	r23, 7
    1c98:	e7 cf       	rjmp	.-50     	; 0x1c68 <__mulsf3+0x140>
    1c9a:	0c c0       	rjmp	.+24     	; 0x1cb4 <__mulsf3+0x18c>
    1c9c:	44 0f       	add	r20, r20
    1c9e:	55 1f       	adc	r21, r21
    1ca0:	66 1f       	adc	r22, r22
    1ca2:	77 1f       	adc	r23, r23
    1ca4:	17 fd       	sbrc	r17, 7
    1ca6:	41 60       	ori	r20, 0x01	; 1
    1ca8:	ee 0c       	add	r14, r14
    1caa:	ff 1c       	adc	r15, r15
    1cac:	00 1f       	adc	r16, r16
    1cae:	11 1f       	adc	r17, r17
    1cb0:	21 50       	subi	r18, 0x01	; 1
    1cb2:	30 40       	sbci	r19, 0x00	; 0
    1cb4:	40 30       	cpi	r20, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	59 07       	cpc	r21, r25
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	69 07       	cpc	r22, r25
    1cbe:	90 e4       	ldi	r25, 0x40	; 64
    1cc0:	79 07       	cpc	r23, r25
    1cc2:	60 f3       	brcs	.-40     	; 0x1c9c <__mulsf3+0x174>
    1cc4:	2b 8f       	std	Y+27, r18	; 0x1b
    1cc6:	3c 8f       	std	Y+28, r19	; 0x1c
    1cc8:	db 01       	movw	r26, r22
    1cca:	ca 01       	movw	r24, r20
    1ccc:	8f 77       	andi	r24, 0x7F	; 127
    1cce:	90 70       	andi	r25, 0x00	; 0
    1cd0:	a0 70       	andi	r26, 0x00	; 0
    1cd2:	b0 70       	andi	r27, 0x00	; 0
    1cd4:	80 34       	cpi	r24, 0x40	; 64
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	a1 05       	cpc	r26, r1
    1cda:	b1 05       	cpc	r27, r1
    1cdc:	61 f4       	brne	.+24     	; 0x1cf6 <__mulsf3+0x1ce>
    1cde:	47 fd       	sbrc	r20, 7
    1ce0:	0a c0       	rjmp	.+20     	; 0x1cf6 <__mulsf3+0x1ce>
    1ce2:	e1 14       	cp	r14, r1
    1ce4:	f1 04       	cpc	r15, r1
    1ce6:	01 05       	cpc	r16, r1
    1ce8:	11 05       	cpc	r17, r1
    1cea:	29 f0       	breq	.+10     	; 0x1cf6 <__mulsf3+0x1ce>
    1cec:	40 5c       	subi	r20, 0xC0	; 192
    1cee:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf0:	6f 4f       	sbci	r22, 0xFF	; 255
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	40 78       	andi	r20, 0x80	; 128
    1cf6:	1a 8e       	std	Y+26, r1	; 0x1a
    1cf8:	fe 17       	cp	r31, r30
    1cfa:	11 f0       	breq	.+4      	; 0x1d00 <__mulsf3+0x1d8>
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	8a 8f       	std	Y+26, r24	; 0x1a
    1d00:	4d 8f       	std	Y+29, r20	; 0x1d
    1d02:	5e 8f       	std	Y+30, r21	; 0x1e
    1d04:	6f 8f       	std	Y+31, r22	; 0x1f
    1d06:	78 a3       	std	Y+32, r23	; 0x20
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	89 8f       	std	Y+25, r24	; 0x19
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	49 96       	adiw	r24, 0x19	; 25
    1d10:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__pack_f>
    1d14:	a0 96       	adiw	r28, 0x20	; 32
    1d16:	e2 e1       	ldi	r30, 0x12	; 18
    1d18:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__epilogue_restores__>

00001d1c <__gtsf2>:
    1d1c:	a8 e1       	ldi	r26, 0x18	; 24
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e4 e9       	ldi	r30, 0x94	; 148
    1d22:	fe e0       	ldi	r31, 0x0E	; 14
    1d24:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x18>
    1d28:	69 83       	std	Y+1, r22	; 0x01
    1d2a:	7a 83       	std	Y+2, r23	; 0x02
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	2d 83       	std	Y+5, r18	; 0x05
    1d32:	3e 83       	std	Y+6, r19	; 0x06
    1d34:	4f 83       	std	Y+7, r20	; 0x07
    1d36:	58 87       	std	Y+8, r21	; 0x08
    1d38:	89 e0       	ldi	r24, 0x09	; 9
    1d3a:	e8 2e       	mov	r14, r24
    1d3c:	f1 2c       	mov	r15, r1
    1d3e:	ec 0e       	add	r14, r28
    1d40:	fd 1e       	adc	r15, r29
    1d42:	ce 01       	movw	r24, r28
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	b7 01       	movw	r22, r14
    1d48:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1d4c:	8e 01       	movw	r16, r28
    1d4e:	0f 5e       	subi	r16, 0xEF	; 239
    1d50:	1f 4f       	sbci	r17, 0xFF	; 255
    1d52:	ce 01       	movw	r24, r28
    1d54:	05 96       	adiw	r24, 0x05	; 5
    1d56:	b8 01       	movw	r22, r16
    1d58:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	82 30       	cpi	r24, 0x02	; 2
    1d60:	40 f0       	brcs	.+16     	; 0x1d72 <__gtsf2+0x56>
    1d62:	89 89       	ldd	r24, Y+17	; 0x11
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	28 f0       	brcs	.+10     	; 0x1d72 <__gtsf2+0x56>
    1d68:	c7 01       	movw	r24, r14
    1d6a:	b8 01       	movw	r22, r16
    1d6c:	0e 94 bf 10 	call	0x217e	; 0x217e <__fpcmp_parts_f>
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <__gtsf2+0x58>
    1d72:	8f ef       	ldi	r24, 0xFF	; 255
    1d74:	68 96       	adiw	r28, 0x18	; 24
    1d76:	e6 e0       	ldi	r30, 0x06	; 6
    1d78:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x18>

00001d7c <__gesf2>:
    1d7c:	a8 e1       	ldi	r26, 0x18	; 24
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e4 ec       	ldi	r30, 0xC4	; 196
    1d82:	fe e0       	ldi	r31, 0x0E	; 14
    1d84:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x18>
    1d88:	69 83       	std	Y+1, r22	; 0x01
    1d8a:	7a 83       	std	Y+2, r23	; 0x02
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
    1d8e:	9c 83       	std	Y+4, r25	; 0x04
    1d90:	2d 83       	std	Y+5, r18	; 0x05
    1d92:	3e 83       	std	Y+6, r19	; 0x06
    1d94:	4f 83       	std	Y+7, r20	; 0x07
    1d96:	58 87       	std	Y+8, r21	; 0x08
    1d98:	89 e0       	ldi	r24, 0x09	; 9
    1d9a:	e8 2e       	mov	r14, r24
    1d9c:	f1 2c       	mov	r15, r1
    1d9e:	ec 0e       	add	r14, r28
    1da0:	fd 1e       	adc	r15, r29
    1da2:	ce 01       	movw	r24, r28
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	b7 01       	movw	r22, r14
    1da8:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1dac:	8e 01       	movw	r16, r28
    1dae:	0f 5e       	subi	r16, 0xEF	; 239
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	ce 01       	movw	r24, r28
    1db4:	05 96       	adiw	r24, 0x05	; 5
    1db6:	b8 01       	movw	r22, r16
    1db8:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1dbc:	89 85       	ldd	r24, Y+9	; 0x09
    1dbe:	82 30       	cpi	r24, 0x02	; 2
    1dc0:	40 f0       	brcs	.+16     	; 0x1dd2 <__gesf2+0x56>
    1dc2:	89 89       	ldd	r24, Y+17	; 0x11
    1dc4:	82 30       	cpi	r24, 0x02	; 2
    1dc6:	28 f0       	brcs	.+10     	; 0x1dd2 <__gesf2+0x56>
    1dc8:	c7 01       	movw	r24, r14
    1dca:	b8 01       	movw	r22, r16
    1dcc:	0e 94 bf 10 	call	0x217e	; 0x217e <__fpcmp_parts_f>
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <__gesf2+0x58>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	68 96       	adiw	r28, 0x18	; 24
    1dd6:	e6 e0       	ldi	r30, 0x06	; 6
    1dd8:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x18>

00001ddc <__ltsf2>:
    1ddc:	a8 e1       	ldi	r26, 0x18	; 24
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e4 ef       	ldi	r30, 0xF4	; 244
    1de2:	fe e0       	ldi	r31, 0x0E	; 14
    1de4:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x18>
    1de8:	69 83       	std	Y+1, r22	; 0x01
    1dea:	7a 83       	std	Y+2, r23	; 0x02
    1dec:	8b 83       	std	Y+3, r24	; 0x03
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	2d 83       	std	Y+5, r18	; 0x05
    1df2:	3e 83       	std	Y+6, r19	; 0x06
    1df4:	4f 83       	std	Y+7, r20	; 0x07
    1df6:	58 87       	std	Y+8, r21	; 0x08
    1df8:	89 e0       	ldi	r24, 0x09	; 9
    1dfa:	e8 2e       	mov	r14, r24
    1dfc:	f1 2c       	mov	r15, r1
    1dfe:	ec 0e       	add	r14, r28
    1e00:	fd 1e       	adc	r15, r29
    1e02:	ce 01       	movw	r24, r28
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	b7 01       	movw	r22, r14
    1e08:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1e0c:	8e 01       	movw	r16, r28
    1e0e:	0f 5e       	subi	r16, 0xEF	; 239
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	ce 01       	movw	r24, r28
    1e14:	05 96       	adiw	r24, 0x05	; 5
    1e16:	b8 01       	movw	r22, r16
    1e18:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	82 30       	cpi	r24, 0x02	; 2
    1e20:	40 f0       	brcs	.+16     	; 0x1e32 <__ltsf2+0x56>
    1e22:	89 89       	ldd	r24, Y+17	; 0x11
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	28 f0       	brcs	.+10     	; 0x1e32 <__ltsf2+0x56>
    1e28:	c7 01       	movw	r24, r14
    1e2a:	b8 01       	movw	r22, r16
    1e2c:	0e 94 bf 10 	call	0x217e	; 0x217e <__fpcmp_parts_f>
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <__ltsf2+0x58>
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	68 96       	adiw	r28, 0x18	; 24
    1e36:	e6 e0       	ldi	r30, 0x06	; 6
    1e38:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x18>

00001e3c <__fixsfsi>:
    1e3c:	ac e0       	ldi	r26, 0x0C	; 12
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e4 e2       	ldi	r30, 0x24	; 36
    1e42:	ff e0       	ldi	r31, 0x0F	; 15
    1e44:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__prologue_saves__+0x20>
    1e48:	69 83       	std	Y+1, r22	; 0x01
    1e4a:	7a 83       	std	Y+2, r23	; 0x02
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	ce 01       	movw	r24, r28
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	be 01       	movw	r22, r28
    1e56:	6b 5f       	subi	r22, 0xFB	; 251
    1e58:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5a:	0e 94 47 10 	call	0x208e	; 0x208e <__unpack_f>
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	82 30       	cpi	r24, 0x02	; 2
    1e62:	61 f1       	breq	.+88     	; 0x1ebc <__fixsfsi+0x80>
    1e64:	82 30       	cpi	r24, 0x02	; 2
    1e66:	50 f1       	brcs	.+84     	; 0x1ebc <__fixsfsi+0x80>
    1e68:	84 30       	cpi	r24, 0x04	; 4
    1e6a:	21 f4       	brne	.+8      	; 0x1e74 <__fixsfsi+0x38>
    1e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6e:	88 23       	and	r24, r24
    1e70:	51 f1       	breq	.+84     	; 0x1ec6 <__fixsfsi+0x8a>
    1e72:	2e c0       	rjmp	.+92     	; 0x1ed0 <__fixsfsi+0x94>
    1e74:	2f 81       	ldd	r18, Y+7	; 0x07
    1e76:	38 85       	ldd	r19, Y+8	; 0x08
    1e78:	37 fd       	sbrc	r19, 7
    1e7a:	20 c0       	rjmp	.+64     	; 0x1ebc <__fixsfsi+0x80>
    1e7c:	6e 81       	ldd	r22, Y+6	; 0x06
    1e7e:	2f 31       	cpi	r18, 0x1F	; 31
    1e80:	31 05       	cpc	r19, r1
    1e82:	1c f0       	brlt	.+6      	; 0x1e8a <__fixsfsi+0x4e>
    1e84:	66 23       	and	r22, r22
    1e86:	f9 f0       	breq	.+62     	; 0x1ec6 <__fixsfsi+0x8a>
    1e88:	23 c0       	rjmp	.+70     	; 0x1ed0 <__fixsfsi+0x94>
    1e8a:	8e e1       	ldi	r24, 0x1E	; 30
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	82 1b       	sub	r24, r18
    1e90:	93 0b       	sbc	r25, r19
    1e92:	29 85       	ldd	r18, Y+9	; 0x09
    1e94:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e96:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e98:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e9a:	04 c0       	rjmp	.+8      	; 0x1ea4 <__fixsfsi+0x68>
    1e9c:	56 95       	lsr	r21
    1e9e:	47 95       	ror	r20
    1ea0:	37 95       	ror	r19
    1ea2:	27 95       	ror	r18
    1ea4:	8a 95       	dec	r24
    1ea6:	d2 f7       	brpl	.-12     	; 0x1e9c <__fixsfsi+0x60>
    1ea8:	66 23       	and	r22, r22
    1eaa:	b1 f0       	breq	.+44     	; 0x1ed8 <__fixsfsi+0x9c>
    1eac:	50 95       	com	r21
    1eae:	40 95       	com	r20
    1eb0:	30 95       	com	r19
    1eb2:	21 95       	neg	r18
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	4f 4f       	sbci	r20, 0xFF	; 255
    1eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eba:	0e c0       	rjmp	.+28     	; 0x1ed8 <__fixsfsi+0x9c>
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	09 c0       	rjmp	.+18     	; 0x1ed8 <__fixsfsi+0x9c>
    1ec6:	2f ef       	ldi	r18, 0xFF	; 255
    1ec8:	3f ef       	ldi	r19, 0xFF	; 255
    1eca:	4f ef       	ldi	r20, 0xFF	; 255
    1ecc:	5f e7       	ldi	r21, 0x7F	; 127
    1ece:	04 c0       	rjmp	.+8      	; 0x1ed8 <__fixsfsi+0x9c>
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	50 e8       	ldi	r21, 0x80	; 128
    1ed8:	b9 01       	movw	r22, r18
    1eda:	ca 01       	movw	r24, r20
    1edc:	2c 96       	adiw	r28, 0x0c	; 12
    1ede:	e2 e0       	ldi	r30, 0x02	; 2
    1ee0:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__epilogue_restores__+0x20>

00001ee4 <__pack_f>:
    1ee4:	df 92       	push	r13
    1ee6:	ef 92       	push	r14
    1ee8:	ff 92       	push	r15
    1eea:	0f 93       	push	r16
    1eec:	1f 93       	push	r17
    1eee:	fc 01       	movw	r30, r24
    1ef0:	e4 80       	ldd	r14, Z+4	; 0x04
    1ef2:	f5 80       	ldd	r15, Z+5	; 0x05
    1ef4:	06 81       	ldd	r16, Z+6	; 0x06
    1ef6:	17 81       	ldd	r17, Z+7	; 0x07
    1ef8:	d1 80       	ldd	r13, Z+1	; 0x01
    1efa:	80 81       	ld	r24, Z
    1efc:	82 30       	cpi	r24, 0x02	; 2
    1efe:	48 f4       	brcc	.+18     	; 0x1f12 <__pack_f+0x2e>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 e1       	ldi	r26, 0x10	; 16
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e8 2a       	or	r14, r24
    1f0a:	f9 2a       	or	r15, r25
    1f0c:	0a 2b       	or	r16, r26
    1f0e:	1b 2b       	or	r17, r27
    1f10:	a5 c0       	rjmp	.+330    	; 0x205c <__pack_f+0x178>
    1f12:	84 30       	cpi	r24, 0x04	; 4
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <__pack_f+0x34>
    1f16:	9f c0       	rjmp	.+318    	; 0x2056 <__pack_f+0x172>
    1f18:	82 30       	cpi	r24, 0x02	; 2
    1f1a:	21 f4       	brne	.+8      	; 0x1f24 <__pack_f+0x40>
    1f1c:	ee 24       	eor	r14, r14
    1f1e:	ff 24       	eor	r15, r15
    1f20:	87 01       	movw	r16, r14
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <__pack_f+0x4a>
    1f24:	e1 14       	cp	r14, r1
    1f26:	f1 04       	cpc	r15, r1
    1f28:	01 05       	cpc	r16, r1
    1f2a:	11 05       	cpc	r17, r1
    1f2c:	19 f4       	brne	.+6      	; 0x1f34 <__pack_f+0x50>
    1f2e:	e0 e0       	ldi	r30, 0x00	; 0
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	96 c0       	rjmp	.+300    	; 0x2060 <__pack_f+0x17c>
    1f34:	62 81       	ldd	r22, Z+2	; 0x02
    1f36:	73 81       	ldd	r23, Z+3	; 0x03
    1f38:	9f ef       	ldi	r25, 0xFF	; 255
    1f3a:	62 38       	cpi	r22, 0x82	; 130
    1f3c:	79 07       	cpc	r23, r25
    1f3e:	0c f0       	brlt	.+2      	; 0x1f42 <__pack_f+0x5e>
    1f40:	5b c0       	rjmp	.+182    	; 0x1ff8 <__pack_f+0x114>
    1f42:	22 e8       	ldi	r18, 0x82	; 130
    1f44:	3f ef       	ldi	r19, 0xFF	; 255
    1f46:	26 1b       	sub	r18, r22
    1f48:	37 0b       	sbc	r19, r23
    1f4a:	2a 31       	cpi	r18, 0x1A	; 26
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	2c f0       	brlt	.+10     	; 0x1f5a <__pack_f+0x76>
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	2a c0       	rjmp	.+84     	; 0x1fae <__pack_f+0xca>
    1f5a:	b8 01       	movw	r22, r16
    1f5c:	a7 01       	movw	r20, r14
    1f5e:	02 2e       	mov	r0, r18
    1f60:	04 c0       	rjmp	.+8      	; 0x1f6a <__pack_f+0x86>
    1f62:	76 95       	lsr	r23
    1f64:	67 95       	ror	r22
    1f66:	57 95       	ror	r21
    1f68:	47 95       	ror	r20
    1f6a:	0a 94       	dec	r0
    1f6c:	d2 f7       	brpl	.-12     	; 0x1f62 <__pack_f+0x7e>
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	a0 e0       	ldi	r26, 0x00	; 0
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	04 c0       	rjmp	.+8      	; 0x1f80 <__pack_f+0x9c>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	aa 1f       	adc	r26, r26
    1f7e:	bb 1f       	adc	r27, r27
    1f80:	2a 95       	dec	r18
    1f82:	d2 f7       	brpl	.-12     	; 0x1f78 <__pack_f+0x94>
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	a1 09       	sbc	r26, r1
    1f88:	b1 09       	sbc	r27, r1
    1f8a:	8e 21       	and	r24, r14
    1f8c:	9f 21       	and	r25, r15
    1f8e:	a0 23       	and	r26, r16
    1f90:	b1 23       	and	r27, r17
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	a1 05       	cpc	r26, r1
    1f96:	b1 05       	cpc	r27, r1
    1f98:	21 f0       	breq	.+8      	; 0x1fa2 <__pack_f+0xbe>
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	a0 e0       	ldi	r26, 0x00	; 0
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	9a 01       	movw	r18, r20
    1fa4:	ab 01       	movw	r20, r22
    1fa6:	28 2b       	or	r18, r24
    1fa8:	39 2b       	or	r19, r25
    1faa:	4a 2b       	or	r20, r26
    1fac:	5b 2b       	or	r21, r27
    1fae:	da 01       	movw	r26, r20
    1fb0:	c9 01       	movw	r24, r18
    1fb2:	8f 77       	andi	r24, 0x7F	; 127
    1fb4:	90 70       	andi	r25, 0x00	; 0
    1fb6:	a0 70       	andi	r26, 0x00	; 0
    1fb8:	b0 70       	andi	r27, 0x00	; 0
    1fba:	80 34       	cpi	r24, 0x40	; 64
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	a1 05       	cpc	r26, r1
    1fc0:	b1 05       	cpc	r27, r1
    1fc2:	39 f4       	brne	.+14     	; 0x1fd2 <__pack_f+0xee>
    1fc4:	27 ff       	sbrs	r18, 7
    1fc6:	09 c0       	rjmp	.+18     	; 0x1fda <__pack_f+0xf6>
    1fc8:	20 5c       	subi	r18, 0xC0	; 192
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
    1fcc:	4f 4f       	sbci	r20, 0xFF	; 255
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	04 c0       	rjmp	.+8      	; 0x1fda <__pack_f+0xf6>
    1fd2:	21 5c       	subi	r18, 0xC1	; 193
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	4f 4f       	sbci	r20, 0xFF	; 255
    1fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fda:	e0 e0       	ldi	r30, 0x00	; 0
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	20 30       	cpi	r18, 0x00	; 0
    1fe0:	a0 e0       	ldi	r26, 0x00	; 0
    1fe2:	3a 07       	cpc	r19, r26
    1fe4:	a0 e0       	ldi	r26, 0x00	; 0
    1fe6:	4a 07       	cpc	r20, r26
    1fe8:	a0 e4       	ldi	r26, 0x40	; 64
    1fea:	5a 07       	cpc	r21, r26
    1fec:	10 f0       	brcs	.+4      	; 0x1ff2 <__pack_f+0x10e>
    1fee:	e1 e0       	ldi	r30, 0x01	; 1
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	79 01       	movw	r14, r18
    1ff4:	8a 01       	movw	r16, r20
    1ff6:	27 c0       	rjmp	.+78     	; 0x2046 <__pack_f+0x162>
    1ff8:	60 38       	cpi	r22, 0x80	; 128
    1ffa:	71 05       	cpc	r23, r1
    1ffc:	64 f5       	brge	.+88     	; 0x2056 <__pack_f+0x172>
    1ffe:	fb 01       	movw	r30, r22
    2000:	e1 58       	subi	r30, 0x81	; 129
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	d8 01       	movw	r26, r16
    2006:	c7 01       	movw	r24, r14
    2008:	8f 77       	andi	r24, 0x7F	; 127
    200a:	90 70       	andi	r25, 0x00	; 0
    200c:	a0 70       	andi	r26, 0x00	; 0
    200e:	b0 70       	andi	r27, 0x00	; 0
    2010:	80 34       	cpi	r24, 0x40	; 64
    2012:	91 05       	cpc	r25, r1
    2014:	a1 05       	cpc	r26, r1
    2016:	b1 05       	cpc	r27, r1
    2018:	39 f4       	brne	.+14     	; 0x2028 <__pack_f+0x144>
    201a:	e7 fe       	sbrs	r14, 7
    201c:	0d c0       	rjmp	.+26     	; 0x2038 <__pack_f+0x154>
    201e:	80 e4       	ldi	r24, 0x40	; 64
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a0 e0       	ldi	r26, 0x00	; 0
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	04 c0       	rjmp	.+8      	; 0x2030 <__pack_f+0x14c>
    2028:	8f e3       	ldi	r24, 0x3F	; 63
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a0 e0       	ldi	r26, 0x00	; 0
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e8 0e       	add	r14, r24
    2032:	f9 1e       	adc	r15, r25
    2034:	0a 1f       	adc	r16, r26
    2036:	1b 1f       	adc	r17, r27
    2038:	17 ff       	sbrs	r17, 7
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <__pack_f+0x162>
    203c:	16 95       	lsr	r17
    203e:	07 95       	ror	r16
    2040:	f7 94       	ror	r15
    2042:	e7 94       	ror	r14
    2044:	31 96       	adiw	r30, 0x01	; 1
    2046:	87 e0       	ldi	r24, 0x07	; 7
    2048:	16 95       	lsr	r17
    204a:	07 95       	ror	r16
    204c:	f7 94       	ror	r15
    204e:	e7 94       	ror	r14
    2050:	8a 95       	dec	r24
    2052:	d1 f7       	brne	.-12     	; 0x2048 <__pack_f+0x164>
    2054:	05 c0       	rjmp	.+10     	; 0x2060 <__pack_f+0x17c>
    2056:	ee 24       	eor	r14, r14
    2058:	ff 24       	eor	r15, r15
    205a:	87 01       	movw	r16, r14
    205c:	ef ef       	ldi	r30, 0xFF	; 255
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	6e 2f       	mov	r22, r30
    2062:	67 95       	ror	r22
    2064:	66 27       	eor	r22, r22
    2066:	67 95       	ror	r22
    2068:	90 2f       	mov	r25, r16
    206a:	9f 77       	andi	r25, 0x7F	; 127
    206c:	d7 94       	ror	r13
    206e:	dd 24       	eor	r13, r13
    2070:	d7 94       	ror	r13
    2072:	8e 2f       	mov	r24, r30
    2074:	86 95       	lsr	r24
    2076:	49 2f       	mov	r20, r25
    2078:	46 2b       	or	r20, r22
    207a:	58 2f       	mov	r21, r24
    207c:	5d 29       	or	r21, r13
    207e:	b7 01       	movw	r22, r14
    2080:	ca 01       	movw	r24, r20
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	ff 90       	pop	r15
    2088:	ef 90       	pop	r14
    208a:	df 90       	pop	r13
    208c:	08 95       	ret

0000208e <__unpack_f>:
    208e:	fc 01       	movw	r30, r24
    2090:	db 01       	movw	r26, r22
    2092:	40 81       	ld	r20, Z
    2094:	51 81       	ldd	r21, Z+1	; 0x01
    2096:	22 81       	ldd	r18, Z+2	; 0x02
    2098:	62 2f       	mov	r22, r18
    209a:	6f 77       	andi	r22, 0x7F	; 127
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	22 1f       	adc	r18, r18
    20a0:	22 27       	eor	r18, r18
    20a2:	22 1f       	adc	r18, r18
    20a4:	93 81       	ldd	r25, Z+3	; 0x03
    20a6:	89 2f       	mov	r24, r25
    20a8:	88 0f       	add	r24, r24
    20aa:	82 2b       	or	r24, r18
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	99 1f       	adc	r25, r25
    20b2:	99 27       	eor	r25, r25
    20b4:	99 1f       	adc	r25, r25
    20b6:	11 96       	adiw	r26, 0x01	; 1
    20b8:	9c 93       	st	X, r25
    20ba:	11 97       	sbiw	r26, 0x01	; 1
    20bc:	21 15       	cp	r18, r1
    20be:	31 05       	cpc	r19, r1
    20c0:	a9 f5       	brne	.+106    	; 0x212c <__unpack_f+0x9e>
    20c2:	41 15       	cp	r20, r1
    20c4:	51 05       	cpc	r21, r1
    20c6:	61 05       	cpc	r22, r1
    20c8:	71 05       	cpc	r23, r1
    20ca:	11 f4       	brne	.+4      	; 0x20d0 <__unpack_f+0x42>
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	37 c0       	rjmp	.+110    	; 0x213e <__unpack_f+0xb0>
    20d0:	82 e8       	ldi	r24, 0x82	; 130
    20d2:	9f ef       	ldi	r25, 0xFF	; 255
    20d4:	13 96       	adiw	r26, 0x03	; 3
    20d6:	9c 93       	st	X, r25
    20d8:	8e 93       	st	-X, r24
    20da:	12 97       	sbiw	r26, 0x02	; 2
    20dc:	9a 01       	movw	r18, r20
    20de:	ab 01       	movw	r20, r22
    20e0:	67 e0       	ldi	r22, 0x07	; 7
    20e2:	22 0f       	add	r18, r18
    20e4:	33 1f       	adc	r19, r19
    20e6:	44 1f       	adc	r20, r20
    20e8:	55 1f       	adc	r21, r21
    20ea:	6a 95       	dec	r22
    20ec:	d1 f7       	brne	.-12     	; 0x20e2 <__unpack_f+0x54>
    20ee:	83 e0       	ldi	r24, 0x03	; 3
    20f0:	8c 93       	st	X, r24
    20f2:	0d c0       	rjmp	.+26     	; 0x210e <__unpack_f+0x80>
    20f4:	22 0f       	add	r18, r18
    20f6:	33 1f       	adc	r19, r19
    20f8:	44 1f       	adc	r20, r20
    20fa:	55 1f       	adc	r21, r21
    20fc:	12 96       	adiw	r26, 0x02	; 2
    20fe:	8d 91       	ld	r24, X+
    2100:	9c 91       	ld	r25, X
    2102:	13 97       	sbiw	r26, 0x03	; 3
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	13 96       	adiw	r26, 0x03	; 3
    2108:	9c 93       	st	X, r25
    210a:	8e 93       	st	-X, r24
    210c:	12 97       	sbiw	r26, 0x02	; 2
    210e:	20 30       	cpi	r18, 0x00	; 0
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	38 07       	cpc	r19, r24
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	48 07       	cpc	r20, r24
    2118:	80 e4       	ldi	r24, 0x40	; 64
    211a:	58 07       	cpc	r21, r24
    211c:	58 f3       	brcs	.-42     	; 0x20f4 <__unpack_f+0x66>
    211e:	14 96       	adiw	r26, 0x04	; 4
    2120:	2d 93       	st	X+, r18
    2122:	3d 93       	st	X+, r19
    2124:	4d 93       	st	X+, r20
    2126:	5c 93       	st	X, r21
    2128:	17 97       	sbiw	r26, 0x07	; 7
    212a:	08 95       	ret
    212c:	2f 3f       	cpi	r18, 0xFF	; 255
    212e:	31 05       	cpc	r19, r1
    2130:	79 f4       	brne	.+30     	; 0x2150 <__unpack_f+0xc2>
    2132:	41 15       	cp	r20, r1
    2134:	51 05       	cpc	r21, r1
    2136:	61 05       	cpc	r22, r1
    2138:	71 05       	cpc	r23, r1
    213a:	19 f4       	brne	.+6      	; 0x2142 <__unpack_f+0xb4>
    213c:	84 e0       	ldi	r24, 0x04	; 4
    213e:	8c 93       	st	X, r24
    2140:	08 95       	ret
    2142:	64 ff       	sbrs	r22, 4
    2144:	03 c0       	rjmp	.+6      	; 0x214c <__unpack_f+0xbe>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	8c 93       	st	X, r24
    214a:	12 c0       	rjmp	.+36     	; 0x2170 <__unpack_f+0xe2>
    214c:	1c 92       	st	X, r1
    214e:	10 c0       	rjmp	.+32     	; 0x2170 <__unpack_f+0xe2>
    2150:	2f 57       	subi	r18, 0x7F	; 127
    2152:	30 40       	sbci	r19, 0x00	; 0
    2154:	13 96       	adiw	r26, 0x03	; 3
    2156:	3c 93       	st	X, r19
    2158:	2e 93       	st	-X, r18
    215a:	12 97       	sbiw	r26, 0x02	; 2
    215c:	83 e0       	ldi	r24, 0x03	; 3
    215e:	8c 93       	st	X, r24
    2160:	87 e0       	ldi	r24, 0x07	; 7
    2162:	44 0f       	add	r20, r20
    2164:	55 1f       	adc	r21, r21
    2166:	66 1f       	adc	r22, r22
    2168:	77 1f       	adc	r23, r23
    216a:	8a 95       	dec	r24
    216c:	d1 f7       	brne	.-12     	; 0x2162 <__unpack_f+0xd4>
    216e:	70 64       	ori	r23, 0x40	; 64
    2170:	14 96       	adiw	r26, 0x04	; 4
    2172:	4d 93       	st	X+, r20
    2174:	5d 93       	st	X+, r21
    2176:	6d 93       	st	X+, r22
    2178:	7c 93       	st	X, r23
    217a:	17 97       	sbiw	r26, 0x07	; 7
    217c:	08 95       	ret

0000217e <__fpcmp_parts_f>:
    217e:	1f 93       	push	r17
    2180:	dc 01       	movw	r26, r24
    2182:	fb 01       	movw	r30, r22
    2184:	9c 91       	ld	r25, X
    2186:	92 30       	cpi	r25, 0x02	; 2
    2188:	08 f4       	brcc	.+2      	; 0x218c <__fpcmp_parts_f+0xe>
    218a:	47 c0       	rjmp	.+142    	; 0x221a <__fpcmp_parts_f+0x9c>
    218c:	80 81       	ld	r24, Z
    218e:	82 30       	cpi	r24, 0x02	; 2
    2190:	08 f4       	brcc	.+2      	; 0x2194 <__fpcmp_parts_f+0x16>
    2192:	43 c0       	rjmp	.+134    	; 0x221a <__fpcmp_parts_f+0x9c>
    2194:	94 30       	cpi	r25, 0x04	; 4
    2196:	51 f4       	brne	.+20     	; 0x21ac <__fpcmp_parts_f+0x2e>
    2198:	11 96       	adiw	r26, 0x01	; 1
    219a:	1c 91       	ld	r17, X
    219c:	84 30       	cpi	r24, 0x04	; 4
    219e:	99 f5       	brne	.+102    	; 0x2206 <__fpcmp_parts_f+0x88>
    21a0:	81 81       	ldd	r24, Z+1	; 0x01
    21a2:	68 2f       	mov	r22, r24
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	61 1b       	sub	r22, r17
    21a8:	71 09       	sbc	r23, r1
    21aa:	3f c0       	rjmp	.+126    	; 0x222a <__fpcmp_parts_f+0xac>
    21ac:	84 30       	cpi	r24, 0x04	; 4
    21ae:	21 f0       	breq	.+8      	; 0x21b8 <__fpcmp_parts_f+0x3a>
    21b0:	92 30       	cpi	r25, 0x02	; 2
    21b2:	31 f4       	brne	.+12     	; 0x21c0 <__fpcmp_parts_f+0x42>
    21b4:	82 30       	cpi	r24, 0x02	; 2
    21b6:	b9 f1       	breq	.+110    	; 0x2226 <__fpcmp_parts_f+0xa8>
    21b8:	81 81       	ldd	r24, Z+1	; 0x01
    21ba:	88 23       	and	r24, r24
    21bc:	89 f1       	breq	.+98     	; 0x2220 <__fpcmp_parts_f+0xa2>
    21be:	2d c0       	rjmp	.+90     	; 0x221a <__fpcmp_parts_f+0x9c>
    21c0:	11 96       	adiw	r26, 0x01	; 1
    21c2:	1c 91       	ld	r17, X
    21c4:	11 97       	sbiw	r26, 0x01	; 1
    21c6:	82 30       	cpi	r24, 0x02	; 2
    21c8:	f1 f0       	breq	.+60     	; 0x2206 <__fpcmp_parts_f+0x88>
    21ca:	81 81       	ldd	r24, Z+1	; 0x01
    21cc:	18 17       	cp	r17, r24
    21ce:	d9 f4       	brne	.+54     	; 0x2206 <__fpcmp_parts_f+0x88>
    21d0:	12 96       	adiw	r26, 0x02	; 2
    21d2:	2d 91       	ld	r18, X+
    21d4:	3c 91       	ld	r19, X
    21d6:	13 97       	sbiw	r26, 0x03	; 3
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	82 17       	cp	r24, r18
    21de:	93 07       	cpc	r25, r19
    21e0:	94 f0       	brlt	.+36     	; 0x2206 <__fpcmp_parts_f+0x88>
    21e2:	28 17       	cp	r18, r24
    21e4:	39 07       	cpc	r19, r25
    21e6:	bc f0       	brlt	.+46     	; 0x2216 <__fpcmp_parts_f+0x98>
    21e8:	14 96       	adiw	r26, 0x04	; 4
    21ea:	8d 91       	ld	r24, X+
    21ec:	9d 91       	ld	r25, X+
    21ee:	0d 90       	ld	r0, X+
    21f0:	bc 91       	ld	r27, X
    21f2:	a0 2d       	mov	r26, r0
    21f4:	24 81       	ldd	r18, Z+4	; 0x04
    21f6:	35 81       	ldd	r19, Z+5	; 0x05
    21f8:	46 81       	ldd	r20, Z+6	; 0x06
    21fa:	57 81       	ldd	r21, Z+7	; 0x07
    21fc:	28 17       	cp	r18, r24
    21fe:	39 07       	cpc	r19, r25
    2200:	4a 07       	cpc	r20, r26
    2202:	5b 07       	cpc	r21, r27
    2204:	18 f4       	brcc	.+6      	; 0x220c <__fpcmp_parts_f+0x8e>
    2206:	11 23       	and	r17, r17
    2208:	41 f0       	breq	.+16     	; 0x221a <__fpcmp_parts_f+0x9c>
    220a:	0a c0       	rjmp	.+20     	; 0x2220 <__fpcmp_parts_f+0xa2>
    220c:	82 17       	cp	r24, r18
    220e:	93 07       	cpc	r25, r19
    2210:	a4 07       	cpc	r26, r20
    2212:	b5 07       	cpc	r27, r21
    2214:	40 f4       	brcc	.+16     	; 0x2226 <__fpcmp_parts_f+0xa8>
    2216:	11 23       	and	r17, r17
    2218:	19 f0       	breq	.+6      	; 0x2220 <__fpcmp_parts_f+0xa2>
    221a:	61 e0       	ldi	r22, 0x01	; 1
    221c:	70 e0       	ldi	r23, 0x00	; 0
    221e:	05 c0       	rjmp	.+10     	; 0x222a <__fpcmp_parts_f+0xac>
    2220:	6f ef       	ldi	r22, 0xFF	; 255
    2222:	7f ef       	ldi	r23, 0xFF	; 255
    2224:	02 c0       	rjmp	.+4      	; 0x222a <__fpcmp_parts_f+0xac>
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	cb 01       	movw	r24, r22
    222c:	1f 91       	pop	r17
    222e:	08 95       	ret

00002230 <__prologue_saves__>:
    2230:	2f 92       	push	r2
    2232:	3f 92       	push	r3
    2234:	4f 92       	push	r4
    2236:	5f 92       	push	r5
    2238:	6f 92       	push	r6
    223a:	7f 92       	push	r7
    223c:	8f 92       	push	r8
    223e:	9f 92       	push	r9
    2240:	af 92       	push	r10
    2242:	bf 92       	push	r11
    2244:	cf 92       	push	r12
    2246:	df 92       	push	r13
    2248:	ef 92       	push	r14
    224a:	ff 92       	push	r15
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	ca 1b       	sub	r28, r26
    225a:	db 0b       	sbc	r29, r27
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	09 94       	ijmp

00002268 <__epilogue_restores__>:
    2268:	2a 88       	ldd	r2, Y+18	; 0x12
    226a:	39 88       	ldd	r3, Y+17	; 0x11
    226c:	48 88       	ldd	r4, Y+16	; 0x10
    226e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2270:	6e 84       	ldd	r6, Y+14	; 0x0e
    2272:	7d 84       	ldd	r7, Y+13	; 0x0d
    2274:	8c 84       	ldd	r8, Y+12	; 0x0c
    2276:	9b 84       	ldd	r9, Y+11	; 0x0b
    2278:	aa 84       	ldd	r10, Y+10	; 0x0a
    227a:	b9 84       	ldd	r11, Y+9	; 0x09
    227c:	c8 84       	ldd	r12, Y+8	; 0x08
    227e:	df 80       	ldd	r13, Y+7	; 0x07
    2280:	ee 80       	ldd	r14, Y+6	; 0x06
    2282:	fd 80       	ldd	r15, Y+5	; 0x05
    2284:	0c 81       	ldd	r16, Y+4	; 0x04
    2286:	1b 81       	ldd	r17, Y+3	; 0x03
    2288:	aa 81       	ldd	r26, Y+2	; 0x02
    228a:	b9 81       	ldd	r27, Y+1	; 0x01
    228c:	ce 0f       	add	r28, r30
    228e:	d1 1d       	adc	r29, r1
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	ed 01       	movw	r28, r26
    229c:	08 95       	ret

0000229e <memcpy>:
    229e:	fb 01       	movw	r30, r22
    22a0:	dc 01       	movw	r26, r24
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <memcpy+0xa>
    22a4:	01 90       	ld	r0, Z+
    22a6:	0d 92       	st	X+, r0
    22a8:	41 50       	subi	r20, 0x01	; 1
    22aa:	50 40       	sbci	r21, 0x00	; 0
    22ac:	d8 f7       	brcc	.-10     	; 0x22a4 <memcpy+0x6>
    22ae:	08 95       	ret

000022b0 <memset>:
    22b0:	dc 01       	movw	r26, r24
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <memset+0x6>
    22b4:	6d 93       	st	X+, r22
    22b6:	41 50       	subi	r20, 0x01	; 1
    22b8:	50 40       	sbci	r21, 0x00	; 0
    22ba:	e0 f7       	brcc	.-8      	; 0x22b4 <memset+0x4>
    22bc:	08 95       	ret

000022be <_exit>:
    22be:	f8 94       	cli

000022c0 <__stop_program>:
    22c0:	ff cf       	rjmp	.-2      	; 0x22c0 <__stop_program>
