
disp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00800100  00002342  000023d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000806  00800266  00800266  0000253c  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  0000253c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000682  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b68  00000000  00000000  00002d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011bc  00000000  00000000  000058a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018eb  00000000  00000000  00006a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  00008350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000070a  00000000  00000000  00008660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00008d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00009538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e4       	ldi	r30, 0x42	; 66
      a0:	f3 e2       	ldi	r31, 0x23	; 35
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 36       	cpi	r26, 0x66	; 102
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	1a e0       	ldi	r17, 0x0A	; 10
      b4:	a6 e6       	ldi	r26, 0x66	; 102
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 36       	cpi	r26, 0x6C	; 108
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 9f 11 	jmp	0x233e	; 0x233e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:



int main(void)

{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
      d6:	2c 97       	sbiw	r28, 0x0c	; 12
      d8:	0f b6       	in	r0, 0x3f	; 63
      da:	f8 94       	cli
      dc:	de bf       	out	0x3e, r29	; 62
      de:	0f be       	out	0x3f, r0	; 63
      e0:	cd bf       	out	0x3d, r28	; 61
	DDRD &= ~((1<<SW1)|(1<<SW2)|(1<<SW3)|(1<<SW4)|(1<<SW5));
      e2:	a1 e3       	ldi	r26, 0x31	; 49
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	e1 e3       	ldi	r30, 0x31	; 49
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	80 7e       	andi	r24, 0xE0	; 224
      ee:	8c 93       	st	X, r24

	// IO-port INIT
	DDRA = 0xE0;
      f0:	ea e3       	ldi	r30, 0x3A	; 58
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 ee       	ldi	r24, 0xE0	; 224
      f6:	80 83       	st	Z, r24
 
	LCD_Init_With_Flags(FLAG_LANDSCAPE | FLAG_IGNORE_WHITESPACE);
      f8:	85 e0       	ldi	r24, 0x05	; 5
      fa:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_Init_With_Flags>
	
	int x = 30;
      fe:	8e e1       	ldi	r24, 0x1E	; 30
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	98 87       	std	Y+8, r25	; 0x08
     104:	8f 83       	std	Y+7, r24	; 0x07
	int y = 30;
     106:	8e e1       	ldi	r24, 0x1E	; 30
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	9e 83       	std	Y+6, r25	; 0x06
     10c:	8d 83       	std	Y+5, r24	; 0x05

	bool up,down,left,right = false;
     10e:	19 82       	std	Y+1, r1	; 0x01

	int coords[2] = {x,y};
     110:	8f 81       	ldd	r24, Y+7	; 0x07
     112:	98 85       	ldd	r25, Y+8	; 0x08
     114:	9a 87       	std	Y+10, r25	; 0x0a
     116:	89 87       	std	Y+9, r24	; 0x09
     118:	8d 81       	ldd	r24, Y+5	; 0x05
     11a:	9e 81       	ldd	r25, Y+6	; 0x06
     11c:	9c 87       	std	Y+12, r25	; 0x0c
     11e:	8b 87       	std	Y+11, r24	; 0x0b

	while(true)
	{
		if(~Switch & (1<<SW4))
     120:	e0 e3       	ldi	r30, 0x30	; 48
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	80 81       	ld	r24, Z
     126:	88 2f       	mov	r24, r24
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	88 70       	andi	r24, 0x08	; 8
     12c:	90 70       	andi	r25, 0x00	; 0
     12e:	00 97       	sbiw	r24, 0x00	; 0
     130:	39 f4       	brne	.+14     	; 0x140 <main+0x72>
		{
			up = true;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	8c 83       	std	Y+4, r24	; 0x04
			down = left = right = false;
     136:	19 82       	std	Y+1, r1	; 0x01
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	8a 83       	std	Y+2, r24	; 0x02
     13c:	8a 81       	ldd	r24, Y+2	; 0x02
     13e:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(~Switch & (1<<SW1))
     140:	e0 e3       	ldi	r30, 0x30	; 48
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	88 2f       	mov	r24, r24
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	81 70       	andi	r24, 0x01	; 1
     14c:	90 70       	andi	r25, 0x00	; 0
     14e:	00 97       	sbiw	r24, 0x00	; 0
     150:	39 f4       	brne	.+14     	; 0x160 <main+0x92>
		{
			left = true;
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	8a 83       	std	Y+2, r24	; 0x02
			down = up = right = false;
     156:	19 82       	std	Y+1, r1	; 0x01
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	8c 83       	std	Y+4, r24	; 0x04
     15c:	8c 81       	ldd	r24, Y+4	; 0x04
     15e:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(~Switch & (1<<SW3))
     160:	e0 e3       	ldi	r30, 0x30	; 48
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	88 2f       	mov	r24, r24
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	84 70       	andi	r24, 0x04	; 4
     16c:	90 70       	andi	r25, 0x00	; 0
     16e:	00 97       	sbiw	r24, 0x00	; 0
     170:	39 f4       	brne	.+14     	; 0x180 <main+0xb2>
		{
			right = true;
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	89 83       	std	Y+1, r24	; 0x01
			down = left = up = false;
     176:	1c 82       	std	Y+4, r1	; 0x04
     178:	8c 81       	ldd	r24, Y+4	; 0x04
     17a:	8a 83       	std	Y+2, r24	; 0x02
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(~Switch & (1<<SW2))
     180:	e0 e3       	ldi	r30, 0x30	; 48
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	88 2f       	mov	r24, r24
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	82 70       	andi	r24, 0x02	; 2
     18c:	90 70       	andi	r25, 0x00	; 0
     18e:	00 97       	sbiw	r24, 0x00	; 0
     190:	39 f4       	brne	.+14     	; 0x1a0 <main+0xd2>
		{
			down = true;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	8b 83       	std	Y+3, r24	; 0x03
			up = left = right = false;
     196:	19 82       	std	Y+1, r1	; 0x01
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	8a 83       	std	Y+2, r24	; 0x02
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	8c 83       	std	Y+4, r24	; 0x04
		}
		if(up)
     1a0:	8c 81       	ldd	r24, Y+4	; 0x04
     1a2:	88 23       	and	r24, r24
     1a4:	39 f0       	breq	.+14     	; 0x1b4 <main+0xe6>
		{
			Move(&coords[1], 1);
     1a6:	ce 01       	movw	r24, r28
     1a8:	09 96       	adiw	r24, 0x09	; 9
     1aa:	02 96       	adiw	r24, 0x02	; 2
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	0e 94 18 01 	call	0x230	; 0x230 <Move>
		}
		if(down)
     1b4:	8b 81       	ldd	r24, Y+3	; 0x03
     1b6:	88 23       	and	r24, r24
     1b8:	39 f0       	breq	.+14     	; 0x1c8 <main+0xfa>
		{
			Move(&coords[1], -1);
     1ba:	ce 01       	movw	r24, r28
     1bc:	09 96       	adiw	r24, 0x09	; 9
     1be:	02 96       	adiw	r24, 0x02	; 2
     1c0:	6f ef       	ldi	r22, 0xFF	; 255
     1c2:	7f ef       	ldi	r23, 0xFF	; 255
     1c4:	0e 94 18 01 	call	0x230	; 0x230 <Move>
		}
		if(left)
     1c8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ca:	88 23       	and	r24, r24
     1cc:	31 f0       	breq	.+12     	; 0x1da <main+0x10c>
		{
			Move(&coords[0], 1);
     1ce:	ce 01       	movw	r24, r28
     1d0:	09 96       	adiw	r24, 0x09	; 9
     1d2:	61 e0       	ldi	r22, 0x01	; 1
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	0e 94 18 01 	call	0x230	; 0x230 <Move>
		}
		if(right)
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	88 23       	and	r24, r24
     1de:	31 f0       	breq	.+12     	; 0x1ec <main+0x11e>
		{
			Move(&coords[0], -1);
     1e0:	ce 01       	movw	r24, r28
     1e2:	09 96       	adiw	r24, 0x09	; 9
     1e4:	6f ef       	ldi	r22, 0xFF	; 255
     1e6:	7f ef       	ldi	r23, 0xFF	; 255
     1e8:	0e 94 18 01 	call	0x230	; 0x230 <Move>
		}
		
		PrintPixel(coords[0],coords[1]);
     1ec:	89 85       	ldd	r24, Y+9	; 0x09
     1ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     1f0:	2b 85       	ldd	r18, Y+11	; 0x0b
     1f2:	3c 85       	ldd	r19, Y+12	; 0x0c
     1f4:	b9 01       	movw	r22, r18
     1f6:	0e 94 00 01 	call	0x200	; 0x200 <PrintPixel>
		LCD_Display();
     1fa:	0e 94 18 08 	call	0x1030	; 0x1030 <LCD_Display>
     1fe:	90 cf       	rjmp	.-224    	; 0x120 <main+0x52>

00000200 <PrintPixel>:
	}
}

void PrintPixel(int x, int y)
{
     200:	df 93       	push	r29
     202:	cf 93       	push	r28
     204:	00 d0       	rcall	.+0      	; 0x206 <PrintPixel+0x6>
     206:	00 d0       	rcall	.+0      	; 0x208 <PrintPixel+0x8>
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	9a 83       	std	Y+2, r25	; 0x02
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	7c 83       	std	Y+4, r23	; 0x04
     212:	6b 83       	std	Y+3, r22	; 0x03
	LCD_Clear();
     214:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_Clear>
	LCD_DrawPixel(x,y);
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9b 81       	ldd	r25, Y+3	; 0x03
     21c:	69 2f       	mov	r22, r25
     21e:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_DrawPixel>
}
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	cf 91       	pop	r28
     22c:	df 91       	pop	r29
     22e:	08 95       	ret

00000230 <Move>:

void Move(int *coord, int moveValue)
{
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	00 d0       	rcall	.+0      	; 0x236 <Move+0x6>
     236:	00 d0       	rcall	.+0      	; 0x238 <Move+0x8>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	9a 83       	std	Y+2, r25	; 0x02
     23e:	89 83       	std	Y+1, r24	; 0x01
     240:	7c 83       	std	Y+4, r23	; 0x04
     242:	6b 83       	std	Y+3, r22	; 0x03
	*coord += moveValue;
     244:	e9 81       	ldd	r30, Y+1	; 0x01
     246:	fa 81       	ldd	r31, Y+2	; 0x02
     248:	20 81       	ld	r18, Z
     24a:	31 81       	ldd	r19, Z+1	; 0x01
     24c:	8b 81       	ldd	r24, Y+3	; 0x03
     24e:	9c 81       	ldd	r25, Y+4	; 0x04
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	e9 81       	ldd	r30, Y+1	; 0x01
     256:	fa 81       	ldd	r31, Y+2	; 0x02
     258:	91 83       	std	Z+1, r25	; 0x01
     25a:	80 83       	st	Z, r24
}
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	cf 91       	pop	r28
     266:	df 91       	pop	r29
     268:	08 95       	ret

0000026a <LCD_SetFlags>:
	Flips the values of the two arguments
*/
void flip(unsigned char* c1, unsigned char* c2);

void LCD_SetFlags(char flags)
{
     26a:	df 93       	push	r29
     26c:	cf 93       	push	r28
     26e:	0f 92       	push	r0
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	89 83       	std	Y+1, r24	; 0x01
	FLAGS = flags;
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	80 93 66 02 	sts	0x0266, r24
}
     27c:	0f 90       	pop	r0
     27e:	cf 91       	pop	r28
     280:	df 91       	pop	r29
     282:	08 95       	ret

00000284 <LCD_Init>:

void LCD_Init()
{
     284:	df 93       	push	r29
     286:	cf 93       	push	r28
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
     28c:	aa 97       	sbiw	r28, 0x2a	; 42
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
	LCD_DDR |= LCD_RESET_PIN | LCD_DATA_PIN | LCD_CD_PIN | LCD_CLK_PIN | LCD_SCE_PIN;
     298:	a4 e3       	ldi	r26, 0x34	; 52
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	e4 e3       	ldi	r30, 0x34	; 52
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	8f 61       	ori	r24, 0x1F	; 31
     2a4:	8c 93       	st	X, r24
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	a0 ef       	ldi	r26, 0xF0	; 240
     2ac:	b1 e4       	ldi	r27, 0x41	; 65
     2ae:	8f a3       	std	Y+39, r24	; 0x27
     2b0:	98 a7       	std	Y+40, r25	; 0x28
     2b2:	a9 a7       	std	Y+41, r26	; 0x29
     2b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2b6:	6f a1       	ldd	r22, Y+39	; 0x27
     2b8:	78 a5       	ldd	r23, Y+40	; 0x28
     2ba:	89 a5       	ldd	r24, Y+41	; 0x29
     2bc:	9a a5       	ldd	r25, Y+42	; 0x2a
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	4a ef       	ldi	r20, 0xFA	; 250
     2c4:	54 e4       	ldi	r21, 0x44	; 68
     2c6:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     2ca:	dc 01       	movw	r26, r24
     2cc:	cb 01       	movw	r24, r22
     2ce:	8b a3       	std	Y+35, r24	; 0x23
     2d0:	9c a3       	std	Y+36, r25	; 0x24
     2d2:	ad a3       	std	Y+37, r26	; 0x25
     2d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     2d6:	6b a1       	ldd	r22, Y+35	; 0x23
     2d8:	7c a1       	ldd	r23, Y+36	; 0x24
     2da:	8d a1       	ldd	r24, Y+37	; 0x25
     2dc:	9e a1       	ldd	r25, Y+38	; 0x26
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	40 e8       	ldi	r20, 0x80	; 128
     2e4:	5f e3       	ldi	r21, 0x3F	; 63
     2e6:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     2ea:	88 23       	and	r24, r24
     2ec:	2c f4       	brge	.+10     	; 0x2f8 <LCD_Init+0x74>
		__ticks = 1;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	9a a3       	std	Y+34, r25	; 0x22
     2f4:	89 a3       	std	Y+33, r24	; 0x21
     2f6:	3f c0       	rjmp	.+126    	; 0x376 <LCD_Init+0xf2>
	else if (__tmp > 65535)
     2f8:	6b a1       	ldd	r22, Y+35	; 0x23
     2fa:	7c a1       	ldd	r23, Y+36	; 0x24
     2fc:	8d a1       	ldd	r24, Y+37	; 0x25
     2fe:	9e a1       	ldd	r25, Y+38	; 0x26
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	3f ef       	ldi	r19, 0xFF	; 255
     304:	4f e7       	ldi	r20, 0x7F	; 127
     306:	57 e4       	ldi	r21, 0x47	; 71
     308:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     30c:	18 16       	cp	r1, r24
     30e:	4c f5       	brge	.+82     	; 0x362 <LCD_Init+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     310:	6f a1       	ldd	r22, Y+39	; 0x27
     312:	78 a5       	ldd	r23, Y+40	; 0x28
     314:	89 a5       	ldd	r24, Y+41	; 0x29
     316:	9a a5       	ldd	r25, Y+42	; 0x2a
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	40 e2       	ldi	r20, 0x20	; 32
     31e:	51 e4       	ldi	r21, 0x41	; 65
     320:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     324:	dc 01       	movw	r26, r24
     326:	cb 01       	movw	r24, r22
     328:	bc 01       	movw	r22, r24
     32a:	cd 01       	movw	r24, r26
     32c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     330:	dc 01       	movw	r26, r24
     332:	cb 01       	movw	r24, r22
     334:	9a a3       	std	Y+34, r25	; 0x22
     336:	89 a3       	std	Y+33, r24	; 0x21
     338:	0f c0       	rjmp	.+30     	; 0x358 <LCD_Init+0xd4>
     33a:	88 ec       	ldi	r24, 0xC8	; 200
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	98 a3       	std	Y+32, r25	; 0x20
     340:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     342:	8f 8d       	ldd	r24, Y+31	; 0x1f
     344:	98 a1       	ldd	r25, Y+32	; 0x20
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <LCD_Init+0xc2>
     34a:	98 a3       	std	Y+32, r25	; 0x20
     34c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     34e:	89 a1       	ldd	r24, Y+33	; 0x21
     350:	9a a1       	ldd	r25, Y+34	; 0x22
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	9a a3       	std	Y+34, r25	; 0x22
     356:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     358:	89 a1       	ldd	r24, Y+33	; 0x21
     35a:	9a a1       	ldd	r25, Y+34	; 0x22
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	69 f7       	brne	.-38     	; 0x33a <LCD_Init+0xb6>
     360:	14 c0       	rjmp	.+40     	; 0x38a <LCD_Init+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     362:	6b a1       	ldd	r22, Y+35	; 0x23
     364:	7c a1       	ldd	r23, Y+36	; 0x24
     366:	8d a1       	ldd	r24, Y+37	; 0x25
     368:	9e a1       	ldd	r25, Y+38	; 0x26
     36a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	9a a3       	std	Y+34, r25	; 0x22
     374:	89 a3       	std	Y+33, r24	; 0x21
     376:	89 a1       	ldd	r24, Y+33	; 0x21
     378:	9a a1       	ldd	r25, Y+34	; 0x22
     37a:	9e 8f       	std	Y+30, r25	; 0x1e
     37c:	8d 8f       	std	Y+29, r24	; 0x1d
     37e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     380:	9e 8d       	ldd	r25, Y+30	; 0x1e
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <LCD_Init+0xfe>
     386:	9e 8f       	std	Y+30, r25	; 0x1e
     388:	8d 8f       	std	Y+29, r24	; 0x1d

	/*
		RESET THE DISPLAY
	*/
	_delay_ms(30);
	LCD_PORT &= ~LCD_RESET_PIN; //Reset
     38a:	a5 e3       	ldi	r26, 0x35	; 53
     38c:	b0 e0       	ldi	r27, 0x00	; 0
     38e:	e5 e3       	ldi	r30, 0x35	; 53
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	8e 7f       	andi	r24, 0xFE	; 254
     396:	8c 93       	st	X, r24
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	a0 ef       	ldi	r26, 0xF0	; 240
     39e:	b1 e4       	ldi	r27, 0x41	; 65
     3a0:	89 8f       	std	Y+25, r24	; 0x19
     3a2:	9a 8f       	std	Y+26, r25	; 0x1a
     3a4:	ab 8f       	std	Y+27, r26	; 0x1b
     3a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3a8:	69 8d       	ldd	r22, Y+25	; 0x19
     3aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	4a ef       	ldi	r20, 0xFA	; 250
     3b6:	54 e4       	ldi	r21, 0x44	; 68
     3b8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	8d 8b       	std	Y+21, r24	; 0x15
     3c2:	9e 8b       	std	Y+22, r25	; 0x16
     3c4:	af 8b       	std	Y+23, r26	; 0x17
     3c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     3c8:	6d 89       	ldd	r22, Y+21	; 0x15
     3ca:	7e 89       	ldd	r23, Y+22	; 0x16
     3cc:	8f 89       	ldd	r24, Y+23	; 0x17
     3ce:	98 8d       	ldd	r25, Y+24	; 0x18
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e8       	ldi	r20, 0x80	; 128
     3d6:	5f e3       	ldi	r21, 0x3F	; 63
     3d8:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     3dc:	88 23       	and	r24, r24
     3de:	2c f4       	brge	.+10     	; 0x3ea <LCD_Init+0x166>
		__ticks = 1;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	9c 8b       	std	Y+20, r25	; 0x14
     3e6:	8b 8b       	std	Y+19, r24	; 0x13
     3e8:	3f c0       	rjmp	.+126    	; 0x468 <LCD_Init+0x1e4>
	else if (__tmp > 65535)
     3ea:	6d 89       	ldd	r22, Y+21	; 0x15
     3ec:	7e 89       	ldd	r23, Y+22	; 0x16
     3ee:	8f 89       	ldd	r24, Y+23	; 0x17
     3f0:	98 8d       	ldd	r25, Y+24	; 0x18
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	3f ef       	ldi	r19, 0xFF	; 255
     3f6:	4f e7       	ldi	r20, 0x7F	; 127
     3f8:	57 e4       	ldi	r21, 0x47	; 71
     3fa:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     3fe:	18 16       	cp	r1, r24
     400:	4c f5       	brge	.+82     	; 0x454 <LCD_Init+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     402:	69 8d       	ldd	r22, Y+25	; 0x19
     404:	7a 8d       	ldd	r23, Y+26	; 0x1a
     406:	8b 8d       	ldd	r24, Y+27	; 0x1b
     408:	9c 8d       	ldd	r25, Y+28	; 0x1c
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 e2       	ldi	r20, 0x20	; 32
     410:	51 e4       	ldi	r21, 0x41	; 65
     412:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     416:	dc 01       	movw	r26, r24
     418:	cb 01       	movw	r24, r22
     41a:	bc 01       	movw	r22, r24
     41c:	cd 01       	movw	r24, r26
     41e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     422:	dc 01       	movw	r26, r24
     424:	cb 01       	movw	r24, r22
     426:	9c 8b       	std	Y+20, r25	; 0x14
     428:	8b 8b       	std	Y+19, r24	; 0x13
     42a:	0f c0       	rjmp	.+30     	; 0x44a <LCD_Init+0x1c6>
     42c:	88 ec       	ldi	r24, 0xC8	; 200
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	9a 8b       	std	Y+18, r25	; 0x12
     432:	89 8b       	std	Y+17, r24	; 0x11
     434:	89 89       	ldd	r24, Y+17	; 0x11
     436:	9a 89       	ldd	r25, Y+18	; 0x12
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <LCD_Init+0x1b4>
     43c:	9a 8b       	std	Y+18, r25	; 0x12
     43e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     440:	8b 89       	ldd	r24, Y+19	; 0x13
     442:	9c 89       	ldd	r25, Y+20	; 0x14
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	9c 8b       	std	Y+20, r25	; 0x14
     448:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     44a:	8b 89       	ldd	r24, Y+19	; 0x13
     44c:	9c 89       	ldd	r25, Y+20	; 0x14
     44e:	00 97       	sbiw	r24, 0x00	; 0
     450:	69 f7       	brne	.-38     	; 0x42c <LCD_Init+0x1a8>
     452:	14 c0       	rjmp	.+40     	; 0x47c <LCD_Init+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     454:	6d 89       	ldd	r22, Y+21	; 0x15
     456:	7e 89       	ldd	r23, Y+22	; 0x16
     458:	8f 89       	ldd	r24, Y+23	; 0x17
     45a:	98 8d       	ldd	r25, Y+24	; 0x18
     45c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     460:	dc 01       	movw	r26, r24
     462:	cb 01       	movw	r24, r22
     464:	9c 8b       	std	Y+20, r25	; 0x14
     466:	8b 8b       	std	Y+19, r24	; 0x13
     468:	8b 89       	ldd	r24, Y+19	; 0x13
     46a:	9c 89       	ldd	r25, Y+20	; 0x14
     46c:	98 8b       	std	Y+16, r25	; 0x10
     46e:	8f 87       	std	Y+15, r24	; 0x0f
     470:	8f 85       	ldd	r24, Y+15	; 0x0f
     472:	98 89       	ldd	r25, Y+16	; 0x10
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <LCD_Init+0x1f0>
     478:	98 8b       	std	Y+16, r25	; 0x10
     47a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	LCD_PORT |= LCD_RESET_PIN;  //Disable Reset
     47c:	a5 e3       	ldi	r26, 0x35	; 53
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e5 e3       	ldi	r30, 0x35	; 53
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	81 60       	ori	r24, 0x01	; 1
     488:	8c 93       	st	X, r24
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	a0 ef       	ldi	r26, 0xF0	; 240
     490:	b1 e4       	ldi	r27, 0x41	; 65
     492:	8b 87       	std	Y+11, r24	; 0x0b
     494:	9c 87       	std	Y+12, r25	; 0x0c
     496:	ad 87       	std	Y+13, r26	; 0x0d
     498:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     49a:	6b 85       	ldd	r22, Y+11	; 0x0b
     49c:	7c 85       	ldd	r23, Y+12	; 0x0c
     49e:	8d 85       	ldd	r24, Y+13	; 0x0d
     4a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	4a ef       	ldi	r20, 0xFA	; 250
     4a8:	54 e4       	ldi	r21, 0x44	; 68
     4aa:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	8f 83       	std	Y+7, r24	; 0x07
     4b4:	98 87       	std	Y+8, r25	; 0x08
     4b6:	a9 87       	std	Y+9, r26	; 0x09
     4b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     4ba:	6f 81       	ldd	r22, Y+7	; 0x07
     4bc:	78 85       	ldd	r23, Y+8	; 0x08
     4be:	89 85       	ldd	r24, Y+9	; 0x09
     4c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e8       	ldi	r20, 0x80	; 128
     4c8:	5f e3       	ldi	r21, 0x3F	; 63
     4ca:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__ltsf2>
     4ce:	88 23       	and	r24, r24
     4d0:	2c f4       	brge	.+10     	; 0x4dc <LCD_Init+0x258>
		__ticks = 1;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	9e 83       	std	Y+6, r25	; 0x06
     4d8:	8d 83       	std	Y+5, r24	; 0x05
     4da:	3f c0       	rjmp	.+126    	; 0x55a <LCD_Init+0x2d6>
	else if (__tmp > 65535)
     4dc:	6f 81       	ldd	r22, Y+7	; 0x07
     4de:	78 85       	ldd	r23, Y+8	; 0x08
     4e0:	89 85       	ldd	r24, Y+9	; 0x09
     4e2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	3f ef       	ldi	r19, 0xFF	; 255
     4e8:	4f e7       	ldi	r20, 0x7F	; 127
     4ea:	57 e4       	ldi	r21, 0x47	; 71
     4ec:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gtsf2>
     4f0:	18 16       	cp	r1, r24
     4f2:	4c f5       	brge	.+82     	; 0x546 <LCD_Init+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4f4:	6b 85       	ldd	r22, Y+11	; 0x0b
     4f6:	7c 85       	ldd	r23, Y+12	; 0x0c
     4f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     4fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	40 e2       	ldi	r20, 0x20	; 32
     502:	51 e4       	ldi	r21, 0x41	; 65
     504:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	bc 01       	movw	r22, r24
     50e:	cd 01       	movw	r24, r26
     510:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     514:	dc 01       	movw	r26, r24
     516:	cb 01       	movw	r24, r22
     518:	9e 83       	std	Y+6, r25	; 0x06
     51a:	8d 83       	std	Y+5, r24	; 0x05
     51c:	0f c0       	rjmp	.+30     	; 0x53c <LCD_Init+0x2b8>
     51e:	88 ec       	ldi	r24, 0xC8	; 200
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	9c 83       	std	Y+4, r25	; 0x04
     524:	8b 83       	std	Y+3, r24	; 0x03
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	9c 81       	ldd	r25, Y+4	; 0x04
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <LCD_Init+0x2a6>
     52e:	9c 83       	std	Y+4, r25	; 0x04
     530:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     532:	8d 81       	ldd	r24, Y+5	; 0x05
     534:	9e 81       	ldd	r25, Y+6	; 0x06
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	9e 83       	std	Y+6, r25	; 0x06
     53a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     53c:	8d 81       	ldd	r24, Y+5	; 0x05
     53e:	9e 81       	ldd	r25, Y+6	; 0x06
     540:	00 97       	sbiw	r24, 0x00	; 0
     542:	69 f7       	brne	.-38     	; 0x51e <LCD_Init+0x29a>
     544:	14 c0       	rjmp	.+40     	; 0x56e <LCD_Init+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     546:	6f 81       	ldd	r22, Y+7	; 0x07
     548:	78 85       	ldd	r23, Y+8	; 0x08
     54a:	89 85       	ldd	r24, Y+9	; 0x09
     54c:	9a 85       	ldd	r25, Y+10	; 0x0a
     54e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fixunssfsi>
     552:	dc 01       	movw	r26, r24
     554:	cb 01       	movw	r24, r22
     556:	9e 83       	std	Y+6, r25	; 0x06
     558:	8d 83       	std	Y+5, r24	; 0x05
     55a:	8d 81       	ldd	r24, Y+5	; 0x05
     55c:	9e 81       	ldd	r25, Y+6	; 0x06
     55e:	9a 83       	std	Y+2, r25	; 0x02
     560:	89 83       	std	Y+1, r24	; 0x01
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	9a 81       	ldd	r25, Y+2	; 0x02
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <LCD_Init+0x2e2>
     56a:	9a 83       	std	Y+2, r25	; 0x02
     56c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

	sendData(0xEB, CMD); // LCD-Bias
     56e:	8b ee       	ldi	r24, 0xEB	; 235
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>
	sendData(0x23, CMD); // 64 rows
     576:	83 e2       	ldi	r24, 0x23	; 35
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>
	sendData(0x81, CMD); // Potentiometer
     57e:	81 e8       	ldi	r24, 0x81	; 129
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>
	sendData(0x64, CMD); // Contrast
     586:	84 e6       	ldi	r24, 0x64	; 100
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>
	sendData(0xAF, CMD); // Enable display
     58e:	8f ea       	ldi	r24, 0xAF	; 175
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>
	sendData(0xCC, CMD); // RAM Mapping
     596:	8c ec       	ldi	r24, 0xCC	; 204
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>

	if(FLAGS & FLAG_INVERTED) sendData(0xA7, CMD); // Inversion
     59e:	80 91 66 02 	lds	r24, 0x0266
     5a2:	88 2f       	mov	r24, r24
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	82 70       	andi	r24, 0x02	; 2
     5a8:	90 70       	andi	r25, 0x00	; 0
     5aa:	00 97       	sbiw	r24, 0x00	; 0
     5ac:	21 f0       	breq	.+8      	; 0x5b6 <LCD_Init+0x332>
     5ae:	87 ea       	ldi	r24, 0xA7	; 167
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>

	LCD_Clear(); // Clear the buffer
     5b6:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_Clear>
	LCD_Display(); // Send the clear buffer to display
     5ba:	0e 94 18 08 	call	0x1030	; 0x1030 <LCD_Display>
}
     5be:	aa 96       	adiw	r28, 0x2a	; 42
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	cf 91       	pop	r28
     5cc:	df 91       	pop	r29
     5ce:	08 95       	ret

000005d0 <LCD_Init_With_Flags>:

void LCD_Init_With_Flags(char flags)
{
     5d0:	df 93       	push	r29
     5d2:	cf 93       	push	r28
     5d4:	0f 92       	push	r0
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	89 83       	std	Y+1, r24	; 0x01
	LCD_SetFlags(flags);
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_SetFlags>
	LCD_Init();
     5e2:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Init>
}
     5e6:	0f 90       	pop	r0
     5e8:	cf 91       	pop	r28
     5ea:	df 91       	pop	r29
     5ec:	08 95       	ret

000005ee <sendData>:
	sendData(uchar CD, uchar DATA)
	CD = Command/Data (0 = Command, 1 = Data)
	DATA = 8 bits of data
*/
void sendData(unsigned char data, unsigned char CD)
{
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <sendData+0x6>
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <sendData+0x8>
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <sendData+0xa>
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	8d 83       	std	Y+5, r24	; 0x05
     5fe:	6e 83       	std	Y+6, r22	; 0x06
	int j;

	// Enable display controller (LOW active)
	LCD_PORT &= ~LCD_SCE_PIN;
     600:	a5 e3       	ldi	r26, 0x35	; 53
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	e5 e3       	ldi	r30, 0x35	; 53
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	8d 7f       	andi	r24, 0xFD	; 253
     60c:	8c 93       	st	X, r24

	if(CD == 1) LCD_PORT |=  LCD_CD_PIN; // Data
     60e:	8e 81       	ldd	r24, Y+6	; 0x06
     610:	81 30       	cpi	r24, 0x01	; 1
     612:	41 f4       	brne	.+16     	; 0x624 <sendData+0x36>
     614:	a5 e3       	ldi	r26, 0x35	; 53
     616:	b0 e0       	ldi	r27, 0x00	; 0
     618:	e5 e3       	ldi	r30, 0x35	; 53
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	84 60       	ori	r24, 0x04	; 4
     620:	8c 93       	st	X, r24
     622:	07 c0       	rjmp	.+14     	; 0x632 <sendData+0x44>
	else        LCD_PORT &= ~LCD_CD_PIN; // Command
     624:	a5 e3       	ldi	r26, 0x35	; 53
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e5 e3       	ldi	r30, 0x35	; 53
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	8b 7f       	andi	r24, 0xFB	; 251
     630:	8c 93       	st	X, r24

	for(int i = 0;i < 8;i++) // Send all the bits to driver
     632:	1a 82       	std	Y+2, r1	; 0x02
     634:	19 82       	std	Y+1, r1	; 0x01
     636:	45 c0       	rjmp	.+138    	; 0x6c2 <sendData+0xd4>
	{
		if((data >> (7 - i)) & 1)     LCD_PORT |=  LCD_DATA_PIN; // If the data is 1
     638:	8d 81       	ldd	r24, Y+5	; 0x05
     63a:	48 2f       	mov	r20, r24
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	27 e0       	ldi	r18, 0x07	; 7
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	9a 81       	ldd	r25, Y+2	; 0x02
     646:	b9 01       	movw	r22, r18
     648:	68 1b       	sub	r22, r24
     64a:	79 0b       	sbc	r23, r25
     64c:	cb 01       	movw	r24, r22
     64e:	9a 01       	movw	r18, r20
     650:	02 c0       	rjmp	.+4      	; 0x656 <sendData+0x68>
     652:	35 95       	asr	r19
     654:	27 95       	ror	r18
     656:	8a 95       	dec	r24
     658:	e2 f7       	brpl	.-8      	; 0x652 <sendData+0x64>
     65a:	c9 01       	movw	r24, r18
     65c:	81 70       	andi	r24, 0x01	; 1
     65e:	90 70       	andi	r25, 0x00	; 0
     660:	88 23       	and	r24, r24
     662:	41 f0       	breq	.+16     	; 0x674 <sendData+0x86>
     664:	a5 e3       	ldi	r26, 0x35	; 53
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	e5 e3       	ldi	r30, 0x35	; 53
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	88 60       	ori	r24, 0x08	; 8
     670:	8c 93       	st	X, r24
     672:	07 c0       	rjmp	.+14     	; 0x682 <sendData+0x94>
		else                      LCD_PORT &= ~LCD_DATA_PIN; // If the data is 0
     674:	a5 e3       	ldi	r26, 0x35	; 53
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	e5 e3       	ldi	r30, 0x35	; 53
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	87 7f       	andi	r24, 0xF7	; 247
     680:	8c 93       	st	X, r24
		// Toggle clock pin
		LCD_PORT |= LCD_CLK_PIN; 
     682:	a5 e3       	ldi	r26, 0x35	; 53
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e5 e3       	ldi	r30, 0x35	; 53
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	80 61       	ori	r24, 0x10	; 16
     68e:	8c 93       	st	X, r24
		for(j = 0;j < 4;j++);
     690:	1c 82       	std	Y+4, r1	; 0x04
     692:	1b 82       	std	Y+3, r1	; 0x03
     694:	05 c0       	rjmp	.+10     	; 0x6a0 <sendData+0xb2>
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	9c 81       	ldd	r25, Y+4	; 0x04
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	9c 83       	std	Y+4, r25	; 0x04
     69e:	8b 83       	std	Y+3, r24	; 0x03
     6a0:	8b 81       	ldd	r24, Y+3	; 0x03
     6a2:	9c 81       	ldd	r25, Y+4	; 0x04
     6a4:	84 30       	cpi	r24, 0x04	; 4
     6a6:	91 05       	cpc	r25, r1
     6a8:	b4 f3       	brlt	.-20     	; 0x696 <sendData+0xa8>
		LCD_PORT &= ~LCD_CLK_PIN;
     6aa:	a5 e3       	ldi	r26, 0x35	; 53
     6ac:	b0 e0       	ldi	r27, 0x00	; 0
     6ae:	e5 e3       	ldi	r30, 0x35	; 53
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	80 81       	ld	r24, Z
     6b4:	8f 7e       	andi	r24, 0xEF	; 239
     6b6:	8c 93       	st	X, r24
	LCD_PORT &= ~LCD_SCE_PIN;

	if(CD == 1) LCD_PORT |=  LCD_CD_PIN; // Data
	else        LCD_PORT &= ~LCD_CD_PIN; // Command

	for(int i = 0;i < 8;i++) // Send all the bits to driver
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	88 30       	cpi	r24, 0x08	; 8
     6c8:	91 05       	cpc	r25, r1
     6ca:	0c f4       	brge	.+2      	; 0x6ce <sendData+0xe0>
     6cc:	b5 cf       	rjmp	.-150    	; 0x638 <sendData+0x4a>
		for(j = 0;j < 4;j++);
		LCD_PORT &= ~LCD_CLK_PIN;
	}

	// Disable display controller (LOW active)
	LCD_PORT |= LCD_SCE_PIN;
     6ce:	a5 e3       	ldi	r26, 0x35	; 53
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	e5 e3       	ldi	r30, 0x35	; 53
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	82 60       	ori	r24, 0x02	; 2
     6da:	8c 93       	st	X, r24
}
     6dc:	26 96       	adiw	r28, 0x06	; 6
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	08 95       	ret

000006ee <LCD_Test>:

void LCD_Test()
{
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
	sendData(0xA5, CMD);
     6f6:	85 ea       	ldi	r24, 0xA5	; 165
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>
}
     6fe:	cf 91       	pop	r28
     700:	df 91       	pop	r29
     702:	08 95       	ret

00000704 <LCD_Invert>:

void LCD_Invert()
{
     704:	df 93       	push	r29
     706:	cf 93       	push	r28
     708:	0f 92       	push	r0
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
	if(FLAGS & FLAG_INVERTED) FLAGS &= ~(1 << FLAG_INVERTED);
     70e:	80 91 66 02 	lds	r24, 0x0266
     712:	88 2f       	mov	r24, r24
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	82 70       	andi	r24, 0x02	; 2
     718:	90 70       	andi	r25, 0x00	; 0
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	31 f0       	breq	.+12     	; 0x72a <LCD_Invert+0x26>
     71e:	80 91 66 02 	lds	r24, 0x0266
     722:	8b 7f       	andi	r24, 0xFB	; 251
     724:	80 93 66 02 	sts	0x0266, r24
     728:	05 c0       	rjmp	.+10     	; 0x734 <LCD_Invert+0x30>
	else FLAGS |= FLAG_INVERTED;
     72a:	80 91 66 02 	lds	r24, 0x0266
     72e:	82 60       	ori	r24, 0x02	; 2
     730:	80 93 66 02 	sts	0x0266, r24
	sendData(0xA6 + ((FLAGS & FLAG_INVERTED) > 0 ? 1 : 0), CMD);
     734:	80 91 66 02 	lds	r24, 0x0266
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	82 70       	andi	r24, 0x02	; 2
     73e:	90 70       	andi	r25, 0x00	; 0
     740:	18 16       	cp	r1, r24
     742:	19 06       	cpc	r1, r25
     744:	1c f4       	brge	.+6      	; 0x74c <LCD_Invert+0x48>
     746:	87 ea       	ldi	r24, 0xA7	; 167
     748:	89 83       	std	Y+1, r24	; 0x01
     74a:	02 c0       	rjmp	.+4      	; 0x750 <LCD_Invert+0x4c>
     74c:	86 ea       	ldi	r24, 0xA6	; 166
     74e:	89 83       	std	Y+1, r24	; 0x01
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>
}
     758:	0f 90       	pop	r0
     75a:	cf 91       	pop	r28
     75c:	df 91       	pop	r29
     75e:	08 95       	ret

00000760 <LCD_DrawPixel>:

void LCD_DrawPixel(unsigned char x, unsigned char y)
{
     760:	df 93       	push	r29
     762:	cf 93       	push	r28
     764:	00 d0       	rcall	.+0      	; 0x766 <LCD_DrawPixel+0x6>
     766:	00 d0       	rcall	.+0      	; 0x768 <LCD_DrawPixel+0x8>
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	8b 83       	std	Y+3, r24	; 0x03
     76e:	6c 83       	std	Y+4, r22	; 0x04
	if((FLAGS & FLAG_LANDSCAPE) == 0)
     770:	80 91 66 02 	lds	r24, 0x0266
     774:	88 2f       	mov	r24, r24
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	81 70       	andi	r24, 0x01	; 1
     77a:	90 70       	andi	r25, 0x00	; 0
     77c:	00 97       	sbiw	r24, 0x00	; 0
     77e:	09 f0       	breq	.+2      	; 0x782 <LCD_DrawPixel+0x22>
     780:	43 c0       	rjmp	.+134    	; 0x808 <LCD_DrawPixel+0xa8>
	{
		if(x >= WIDTH || y >= HEIGHT) return;
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	80 34       	cpi	r24, 0x40	; 64
     786:	08 f0       	brcs	.+2      	; 0x78a <LCD_DrawPixel+0x2a>
     788:	85 c0       	rjmp	.+266    	; 0x894 <LCD_DrawPixel+0x134>
     78a:	8c 81       	ldd	r24, Y+4	; 0x04
     78c:	88 23       	and	r24, r24
     78e:	0c f4       	brge	.+2      	; 0x792 <LCD_DrawPixel+0x32>
     790:	81 c0       	rjmp	.+258    	; 0x894 <LCD_DrawPixel+0x134>
		buffer[(x / 8) * 128 + y] |= (1 << (7 - x % 8));
     792:	8b 81       	ldd	r24, Y+3	; 0x03
     794:	48 2f       	mov	r20, r24
     796:	46 95       	lsr	r20
     798:	46 95       	lsr	r20
     79a:	46 95       	lsr	r20
     79c:	84 2f       	mov	r24, r20
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	9c 01       	movw	r18, r24
     7a2:	36 95       	lsr	r19
     7a4:	32 2f       	mov	r19, r18
     7a6:	22 27       	eor	r18, r18
     7a8:	37 95       	ror	r19
     7aa:	27 95       	ror	r18
     7ac:	8c 81       	ldd	r24, Y+4	; 0x04
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	b9 01       	movw	r22, r18
     7b4:	68 0f       	add	r22, r24
     7b6:	79 1f       	adc	r23, r25
     7b8:	84 2f       	mov	r24, r20
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	9c 01       	movw	r18, r24
     7be:	36 95       	lsr	r19
     7c0:	32 2f       	mov	r19, r18
     7c2:	22 27       	eor	r18, r18
     7c4:	37 95       	ror	r19
     7c6:	27 95       	ror	r18
     7c8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ca:	88 2f       	mov	r24, r24
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	82 0f       	add	r24, r18
     7d0:	93 1f       	adc	r25, r19
     7d2:	fc 01       	movw	r30, r24
     7d4:	e4 59       	subi	r30, 0x94	; 148
     7d6:	f9 4f       	sbci	r31, 0xF9	; 249
     7d8:	80 81       	ld	r24, Z
     7da:	48 2f       	mov	r20, r24
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	88 2f       	mov	r24, r24
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	80 95       	com	r24
     7e4:	90 95       	com	r25
     7e6:	9c 01       	movw	r18, r24
     7e8:	27 70       	andi	r18, 0x07	; 7
     7ea:	30 70       	andi	r19, 0x00	; 0
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	02 2e       	mov	r0, r18
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <LCD_DrawPixel+0x98>
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	0a 94       	dec	r0
     7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <LCD_DrawPixel+0x94>
     7fc:	84 2b       	or	r24, r20
     7fe:	fb 01       	movw	r30, r22
     800:	e4 59       	subi	r30, 0x94	; 148
     802:	f9 4f       	sbci	r31, 0xF9	; 249
     804:	80 83       	st	Z, r24
     806:	46 c0       	rjmp	.+140    	; 0x894 <LCD_DrawPixel+0x134>
	}
	else
	{
		unsigned char tempX = x;
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char tempY = y;
     80c:	8c 81       	ldd	r24, Y+4	; 0x04
     80e:	89 83       	std	Y+1, r24	; 0x01
		x = 63 - tempY;
     810:	9f e3       	ldi	r25, 0x3F	; 63
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	29 2f       	mov	r18, r25
     816:	28 1b       	sub	r18, r24
     818:	82 2f       	mov	r24, r18
     81a:	8b 83       	std	Y+3, r24	; 0x03
		y = tempX;
     81c:	8a 81       	ldd	r24, Y+2	; 0x02
     81e:	8c 83       	std	Y+4, r24	; 0x04
		buffer[(x / 8) * 128 + y] |= (1 << (7 - x % 8));
     820:	8b 81       	ldd	r24, Y+3	; 0x03
     822:	48 2f       	mov	r20, r24
     824:	46 95       	lsr	r20
     826:	46 95       	lsr	r20
     828:	46 95       	lsr	r20
     82a:	84 2f       	mov	r24, r20
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	9c 01       	movw	r18, r24
     830:	36 95       	lsr	r19
     832:	32 2f       	mov	r19, r18
     834:	22 27       	eor	r18, r18
     836:	37 95       	ror	r19
     838:	27 95       	ror	r18
     83a:	8c 81       	ldd	r24, Y+4	; 0x04
     83c:	88 2f       	mov	r24, r24
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	b9 01       	movw	r22, r18
     842:	68 0f       	add	r22, r24
     844:	79 1f       	adc	r23, r25
     846:	84 2f       	mov	r24, r20
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	9c 01       	movw	r18, r24
     84c:	36 95       	lsr	r19
     84e:	32 2f       	mov	r19, r18
     850:	22 27       	eor	r18, r18
     852:	37 95       	ror	r19
     854:	27 95       	ror	r18
     856:	8c 81       	ldd	r24, Y+4	; 0x04
     858:	88 2f       	mov	r24, r24
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	82 0f       	add	r24, r18
     85e:	93 1f       	adc	r25, r19
     860:	fc 01       	movw	r30, r24
     862:	e4 59       	subi	r30, 0x94	; 148
     864:	f9 4f       	sbci	r31, 0xF9	; 249
     866:	80 81       	ld	r24, Z
     868:	48 2f       	mov	r20, r24
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	80 95       	com	r24
     872:	90 95       	com	r25
     874:	9c 01       	movw	r18, r24
     876:	27 70       	andi	r18, 0x07	; 7
     878:	30 70       	andi	r19, 0x00	; 0
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	02 2e       	mov	r0, r18
     880:	02 c0       	rjmp	.+4      	; 0x886 <LCD_DrawPixel+0x126>
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	0a 94       	dec	r0
     888:	e2 f7       	brpl	.-8      	; 0x882 <LCD_DrawPixel+0x122>
     88a:	84 2b       	or	r24, r20
     88c:	fb 01       	movw	r30, r22
     88e:	e4 59       	subi	r30, 0x94	; 148
     890:	f9 4f       	sbci	r31, 0xF9	; 249
     892:	80 83       	st	Z, r24
	}
}
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	cf 91       	pop	r28
     89e:	df 91       	pop	r29
     8a0:	08 95       	ret

000008a2 <LCD_ClearPixel>:

void LCD_ClearPixel(unsigned char x, unsigned char y)
{
     8a2:	df 93       	push	r29
     8a4:	cf 93       	push	r28
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <LCD_ClearPixel+0x6>
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <LCD_ClearPixel+0x8>
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	8b 83       	std	Y+3, r24	; 0x03
     8b0:	6c 83       	std	Y+4, r22	; 0x04
	if((FLAGS & FLAG_LANDSCAPE) == 0)
     8b2:	80 91 66 02 	lds	r24, 0x0266
     8b6:	88 2f       	mov	r24, r24
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	81 70       	andi	r24, 0x01	; 1
     8bc:	90 70       	andi	r25, 0x00	; 0
     8be:	00 97       	sbiw	r24, 0x00	; 0
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <LCD_ClearPixel+0x22>
     8c2:	44 c0       	rjmp	.+136    	; 0x94c <LCD_ClearPixel+0xaa>
	{
		if(x >= WIDTH || y >= HEIGHT) return;
     8c4:	8b 81       	ldd	r24, Y+3	; 0x03
     8c6:	80 34       	cpi	r24, 0x40	; 64
     8c8:	08 f0       	brcs	.+2      	; 0x8cc <LCD_ClearPixel+0x2a>
     8ca:	87 c0       	rjmp	.+270    	; 0x9da <LCD_ClearPixel+0x138>
     8cc:	8c 81       	ldd	r24, Y+4	; 0x04
     8ce:	88 23       	and	r24, r24
     8d0:	0c f4       	brge	.+2      	; 0x8d4 <LCD_ClearPixel+0x32>
     8d2:	83 c0       	rjmp	.+262    	; 0x9da <LCD_ClearPixel+0x138>
		buffer[(x / 8) * 128 + y] &= ~(1 << (7 - x % 8));
     8d4:	8b 81       	ldd	r24, Y+3	; 0x03
     8d6:	48 2f       	mov	r20, r24
     8d8:	46 95       	lsr	r20
     8da:	46 95       	lsr	r20
     8dc:	46 95       	lsr	r20
     8de:	84 2f       	mov	r24, r20
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	9c 01       	movw	r18, r24
     8e4:	36 95       	lsr	r19
     8e6:	32 2f       	mov	r19, r18
     8e8:	22 27       	eor	r18, r18
     8ea:	37 95       	ror	r19
     8ec:	27 95       	ror	r18
     8ee:	8c 81       	ldd	r24, Y+4	; 0x04
     8f0:	88 2f       	mov	r24, r24
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	b9 01       	movw	r22, r18
     8f6:	68 0f       	add	r22, r24
     8f8:	79 1f       	adc	r23, r25
     8fa:	84 2f       	mov	r24, r20
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	9c 01       	movw	r18, r24
     900:	36 95       	lsr	r19
     902:	32 2f       	mov	r19, r18
     904:	22 27       	eor	r18, r18
     906:	37 95       	ror	r19
     908:	27 95       	ror	r18
     90a:	8c 81       	ldd	r24, Y+4	; 0x04
     90c:	88 2f       	mov	r24, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	82 0f       	add	r24, r18
     912:	93 1f       	adc	r25, r19
     914:	fc 01       	movw	r30, r24
     916:	e4 59       	subi	r30, 0x94	; 148
     918:	f9 4f       	sbci	r31, 0xF9	; 249
     91a:	80 81       	ld	r24, Z
     91c:	48 2f       	mov	r20, r24
     91e:	8b 81       	ldd	r24, Y+3	; 0x03
     920:	88 2f       	mov	r24, r24
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	80 95       	com	r24
     926:	90 95       	com	r25
     928:	9c 01       	movw	r18, r24
     92a:	27 70       	andi	r18, 0x07	; 7
     92c:	30 70       	andi	r19, 0x00	; 0
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	02 2e       	mov	r0, r18
     934:	02 c0       	rjmp	.+4      	; 0x93a <LCD_ClearPixel+0x98>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	0a 94       	dec	r0
     93c:	e2 f7       	brpl	.-8      	; 0x936 <LCD_ClearPixel+0x94>
     93e:	80 95       	com	r24
     940:	84 23       	and	r24, r20
     942:	fb 01       	movw	r30, r22
     944:	e4 59       	subi	r30, 0x94	; 148
     946:	f9 4f       	sbci	r31, 0xF9	; 249
     948:	80 83       	st	Z, r24
     94a:	47 c0       	rjmp	.+142    	; 0x9da <LCD_ClearPixel+0x138>
	}
	else
	{
		unsigned char tempX = x;
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char tempY = y;
     950:	8c 81       	ldd	r24, Y+4	; 0x04
     952:	89 83       	std	Y+1, r24	; 0x01
		x = 63 - tempY;
     954:	9f e3       	ldi	r25, 0x3F	; 63
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	29 2f       	mov	r18, r25
     95a:	28 1b       	sub	r18, r24
     95c:	82 2f       	mov	r24, r18
     95e:	8b 83       	std	Y+3, r24	; 0x03
		y = tempX;
     960:	8a 81       	ldd	r24, Y+2	; 0x02
     962:	8c 83       	std	Y+4, r24	; 0x04
		buffer[(x / 8) * 128 + y] &= ~(1 << (7 - x % 8));
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	48 2f       	mov	r20, r24
     968:	46 95       	lsr	r20
     96a:	46 95       	lsr	r20
     96c:	46 95       	lsr	r20
     96e:	84 2f       	mov	r24, r20
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	9c 01       	movw	r18, r24
     974:	36 95       	lsr	r19
     976:	32 2f       	mov	r19, r18
     978:	22 27       	eor	r18, r18
     97a:	37 95       	ror	r19
     97c:	27 95       	ror	r18
     97e:	8c 81       	ldd	r24, Y+4	; 0x04
     980:	88 2f       	mov	r24, r24
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	b9 01       	movw	r22, r18
     986:	68 0f       	add	r22, r24
     988:	79 1f       	adc	r23, r25
     98a:	84 2f       	mov	r24, r20
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	9c 01       	movw	r18, r24
     990:	36 95       	lsr	r19
     992:	32 2f       	mov	r19, r18
     994:	22 27       	eor	r18, r18
     996:	37 95       	ror	r19
     998:	27 95       	ror	r18
     99a:	8c 81       	ldd	r24, Y+4	; 0x04
     99c:	88 2f       	mov	r24, r24
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	82 0f       	add	r24, r18
     9a2:	93 1f       	adc	r25, r19
     9a4:	fc 01       	movw	r30, r24
     9a6:	e4 59       	subi	r30, 0x94	; 148
     9a8:	f9 4f       	sbci	r31, 0xF9	; 249
     9aa:	80 81       	ld	r24, Z
     9ac:	48 2f       	mov	r20, r24
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	88 2f       	mov	r24, r24
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	80 95       	com	r24
     9b6:	90 95       	com	r25
     9b8:	9c 01       	movw	r18, r24
     9ba:	27 70       	andi	r18, 0x07	; 7
     9bc:	30 70       	andi	r19, 0x00	; 0
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	02 2e       	mov	r0, r18
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <LCD_ClearPixel+0x128>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	0a 94       	dec	r0
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <LCD_ClearPixel+0x124>
     9ce:	80 95       	com	r24
     9d0:	84 23       	and	r24, r20
     9d2:	fb 01       	movw	r30, r22
     9d4:	e4 59       	subi	r30, 0x94	; 148
     9d6:	f9 4f       	sbci	r31, 0xF9	; 249
     9d8:	80 83       	st	Z, r24
	}
}
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	08 95       	ret

000009e8 <LCD_Clear>:

void LCD_Clear()
{
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
	memset(buffer, 0, sizeof(buffer));
     9f0:	8c e6       	ldi	r24, 0x6C	; 108
     9f2:	96 e0       	ldi	r25, 0x06	; 6
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	54 e0       	ldi	r21, 0x04	; 4
     9fc:	0e 94 98 11 	call	0x2330	; 0x2330 <memset>
}
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	08 95       	ret

00000a06 <LCD_ClearArea>:

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     a06:	df 93       	push	r29
     a08:	cf 93       	push	r28
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <LCD_ClearArea+0x6>
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <LCD_ClearArea+0x8>
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <LCD_ClearArea+0xa>
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	8b 83       	std	Y+3, r24	; 0x03
     a16:	6c 83       	std	Y+4, r22	; 0x04
     a18:	4d 83       	std	Y+5, r20	; 0x05
     a1a:	2e 83       	std	Y+6, r18	; 0x06
	for(char y = y0;y < y1;y++)
     a1c:	8c 81       	ldd	r24, Y+4	; 0x04
     a1e:	8a 83       	std	Y+2, r24	; 0x02
     a20:	11 c0       	rjmp	.+34     	; 0xa44 <LCD_ClearArea+0x3e>
	{
		for(char x = x0;x < x1;x++)
     a22:	8b 81       	ldd	r24, Y+3	; 0x03
     a24:	89 83       	std	Y+1, r24	; 0x01
     a26:	07 c0       	rjmp	.+14     	; 0xa36 <LCD_ClearArea+0x30>
		{
			LCD_ClearPixel(x, y);
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	6a 81       	ldd	r22, Y+2	; 0x02
     a2c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCD_ClearPixel>

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(char y = y0;y < y1;y++)
	{
		for(char x = x0;x < x1;x++)
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	99 81       	ldd	r25, Y+1	; 0x01
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	98 17       	cp	r25, r24
     a3c:	a8 f3       	brcs	.-22     	; 0xa28 <LCD_ClearArea+0x22>
	memset(buffer, 0, sizeof(buffer));
}

void LCD_ClearArea(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(char y = y0;y < y1;y++)
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	8f 5f       	subi	r24, 0xFF	; 255
     a42:	8a 83       	std	Y+2, r24	; 0x02
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	8e 81       	ldd	r24, Y+6	; 0x06
     a48:	98 17       	cp	r25, r24
     a4a:	58 f3       	brcs	.-42     	; 0xa22 <LCD_ClearArea+0x1c>
		for(char x = x0;x < x1;x++)
		{
			LCD_ClearPixel(x, y);
		}
	}
}
     a4c:	26 96       	adiw	r28, 0x06	; 6
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	08 95       	ret

00000a5e <LCD_DrawRect>:

void LCD_DrawRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     a5e:	df 93       	push	r29
     a60:	cf 93       	push	r28
     a62:	00 d0       	rcall	.+0      	; 0xa64 <LCD_DrawRect+0x6>
     a64:	00 d0       	rcall	.+0      	; 0xa66 <LCD_DrawRect+0x8>
     a66:	00 d0       	rcall	.+0      	; 0xa68 <LCD_DrawRect+0xa>
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	8b 83       	std	Y+3, r24	; 0x03
     a6e:	6c 83       	std	Y+4, r22	; 0x04
     a70:	4d 83       	std	Y+5, r20	; 0x05
     a72:	2e 83       	std	Y+6, r18	; 0x06
	for(unsigned char x = x0;x <= x1;x++)
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	8a 83       	std	Y+2, r24	; 0x02
     a78:	0b c0       	rjmp	.+22     	; 0xa90 <LCD_DrawRect+0x32>
	{
		LCD_DrawPixel(x, y0);
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	6c 81       	ldd	r22, Y+4	; 0x04
     a7e:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_DrawPixel>
		LCD_DrawPixel(x, y1);
     a82:	8a 81       	ldd	r24, Y+2	; 0x02
     a84:	6e 81       	ldd	r22, Y+6	; 0x06
     a86:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_DrawPixel>
	}
}

void LCD_DrawRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	for(unsigned char x = x0;x <= x1;x++)
     a8a:	8a 81       	ldd	r24, Y+2	; 0x02
     a8c:	8f 5f       	subi	r24, 0xFF	; 255
     a8e:	8a 83       	std	Y+2, r24	; 0x02
     a90:	9a 81       	ldd	r25, Y+2	; 0x02
     a92:	8d 81       	ldd	r24, Y+5	; 0x05
     a94:	89 17       	cp	r24, r25
     a96:	88 f7       	brcc	.-30     	; 0xa7a <LCD_DrawRect+0x1c>
	{
		LCD_DrawPixel(x, y0);
		LCD_DrawPixel(x, y1);
	}
	for(unsigned char y = y0;y <= y1;y++)
     a98:	8c 81       	ldd	r24, Y+4	; 0x04
     a9a:	89 83       	std	Y+1, r24	; 0x01
     a9c:	0b c0       	rjmp	.+22     	; 0xab4 <LCD_DrawRect+0x56>
	{
		LCD_DrawPixel(x0, y);
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	69 81       	ldd	r22, Y+1	; 0x01
     aa2:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_DrawPixel>
		LCD_DrawPixel(x1, y);
     aa6:	8d 81       	ldd	r24, Y+5	; 0x05
     aa8:	69 81       	ldd	r22, Y+1	; 0x01
     aaa:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_DrawPixel>
	for(unsigned char x = x0;x <= x1;x++)
	{
		LCD_DrawPixel(x, y0);
		LCD_DrawPixel(x, y1);
	}
	for(unsigned char y = y0;y <= y1;y++)
     aae:	89 81       	ldd	r24, Y+1	; 0x01
     ab0:	8f 5f       	subi	r24, 0xFF	; 255
     ab2:	89 83       	std	Y+1, r24	; 0x01
     ab4:	99 81       	ldd	r25, Y+1	; 0x01
     ab6:	8e 81       	ldd	r24, Y+6	; 0x06
     ab8:	89 17       	cp	r24, r25
     aba:	88 f7       	brcc	.-30     	; 0xa9e <LCD_DrawRect+0x40>
	{
		LCD_DrawPixel(x0, y);
		LCD_DrawPixel(x1, y);
	}
}
     abc:	26 96       	adiw	r28, 0x06	; 6
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	cf 91       	pop	r28
     aca:	df 91       	pop	r29
     acc:	08 95       	ret

00000ace <LCD_FillRect>:

void LCD_FillRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     ace:	df 93       	push	r29
     ad0:	cf 93       	push	r28
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <LCD_FillRect+0x6>
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <LCD_FillRect+0x8>
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <LCD_FillRect+0xa>
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	8b 83       	std	Y+3, r24	; 0x03
     ade:	6c 83       	std	Y+4, r22	; 0x04
     ae0:	4d 83       	std	Y+5, r20	; 0x05
     ae2:	2e 83       	std	Y+6, r18	; 0x06
	if(x0 > x1)flip(&x0, &x1);
     ae4:	9b 81       	ldd	r25, Y+3	; 0x03
     ae6:	8d 81       	ldd	r24, Y+5	; 0x05
     ae8:	89 17       	cp	r24, r25
     aea:	40 f4       	brcc	.+16     	; 0xafc <LCD_FillRect+0x2e>
     aec:	ce 01       	movw	r24, r28
     aee:	03 96       	adiw	r24, 0x03	; 3
     af0:	9e 01       	movw	r18, r28
     af2:	2b 5f       	subi	r18, 0xFB	; 251
     af4:	3f 4f       	sbci	r19, 0xFF	; 255
     af6:	b9 01       	movw	r22, r18
     af8:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <flip>
	if(y0 > y1)flip(&y0, &y1);
     afc:	9c 81       	ldd	r25, Y+4	; 0x04
     afe:	8e 81       	ldd	r24, Y+6	; 0x06
     b00:	89 17       	cp	r24, r25
     b02:	40 f4       	brcc	.+16     	; 0xb14 <LCD_FillRect+0x46>
     b04:	ce 01       	movw	r24, r28
     b06:	04 96       	adiw	r24, 0x04	; 4
     b08:	9e 01       	movw	r18, r28
     b0a:	2a 5f       	subi	r18, 0xFA	; 250
     b0c:	3f 4f       	sbci	r19, 0xFF	; 255
     b0e:	b9 01       	movw	r22, r18
     b10:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <flip>
	for(unsigned char x = x0;x <= x1;x++)
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	8a 83       	std	Y+2, r24	; 0x02
     b18:	11 c0       	rjmp	.+34     	; 0xb3c <LCD_FillRect+0x6e>
	{
		for(unsigned char y = y0;y <= y1;y++)
     b1a:	8c 81       	ldd	r24, Y+4	; 0x04
     b1c:	89 83       	std	Y+1, r24	; 0x01
     b1e:	07 c0       	rjmp	.+14     	; 0xb2e <LCD_FillRect+0x60>
		{
			LCD_DrawPixel(x, y);
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	69 81       	ldd	r22, Y+1	; 0x01
     b24:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_DrawPixel>
{
	if(x0 > x1)flip(&x0, &x1);
	if(y0 > y1)flip(&y0, &y1);
	for(unsigned char x = x0;x <= x1;x++)
	{
		for(unsigned char y = y0;y <= y1;y++)
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	9e 81       	ldd	r25, Y+6	; 0x06
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	98 17       	cp	r25, r24
     b34:	a8 f7       	brcc	.-22     	; 0xb20 <LCD_FillRect+0x52>

void LCD_FillRect(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
	if(x0 > x1)flip(&x0, &x1);
	if(y0 > y1)flip(&y0, &y1);
	for(unsigned char x = x0;x <= x1;x++)
     b36:	8a 81       	ldd	r24, Y+2	; 0x02
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	8a 83       	std	Y+2, r24	; 0x02
     b3c:	9d 81       	ldd	r25, Y+5	; 0x05
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	98 17       	cp	r25, r24
     b42:	58 f7       	brcc	.-42     	; 0xb1a <LCD_FillRect+0x4c>
		for(unsigned char y = y0;y <= y1;y++)
		{
			LCD_DrawPixel(x, y);
		}
	}
}
     b44:	26 96       	adiw	r28, 0x06	; 6
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	cf 91       	pop	r28
     b52:	df 91       	pop	r29
     b54:	08 95       	ret

00000b56 <LCD_DrawLine>:

void LCD_DrawLine(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
     b56:	df 93       	push	r29
     b58:	cf 93       	push	r28
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	6a 97       	sbiw	r28, 0x1a	; 26
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	8d 87       	std	Y+13, r24	; 0x0d
     b6c:	6e 87       	std	Y+14, r22	; 0x0e
     b6e:	4f 87       	std	Y+15, r20	; 0x0f
     b70:	28 8b       	std	Y+16, r18	; 0x10
	int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
     b72:	8f 85       	ldd	r24, Y+15	; 0x0f
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7a:	88 2f       	mov	r24, r24
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a9 01       	movw	r20, r18
     b80:	48 1b       	sub	r20, r24
     b82:	59 0b       	sbc	r21, r25
     b84:	ca 01       	movw	r24, r20
     b86:	9c 87       	std	Y+12, r25	; 0x0c
     b88:	8b 87       	std	Y+11, r24	; 0x0b
     b8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b8e:	99 23       	and	r25, r25
     b90:	3c f4       	brge	.+14     	; 0xba0 <LCD_DrawLine+0x4a>
     b92:	8b 85       	ldd	r24, Y+11	; 0x0b
     b94:	9c 85       	ldd	r25, Y+12	; 0x0c
     b96:	90 95       	com	r25
     b98:	81 95       	neg	r24
     b9a:	9f 4f       	sbci	r25, 0xFF	; 255
     b9c:	9c 87       	std	Y+12, r25	; 0x0c
     b9e:	8b 87       	std	Y+11, r24	; 0x0b
     ba0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba4:	98 17       	cp	r25, r24
     ba6:	28 f4       	brcc	.+10     	; 0xbb2 <LCD_DrawLine+0x5c>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	9e 8b       	std	Y+22, r25	; 0x16
     bae:	8d 8b       	std	Y+21, r24	; 0x15
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <LCD_DrawLine+0x64>
     bb2:	4f ef       	ldi	r20, 0xFF	; 255
     bb4:	5f ef       	ldi	r21, 0xFF	; 255
     bb6:	5e 8b       	std	Y+22, r21	; 0x16
     bb8:	4d 8b       	std	Y+21, r20	; 0x15
     bba:	8d 89       	ldd	r24, Y+21	; 0x15
     bbc:	9e 89       	ldd	r25, Y+22	; 0x16
     bbe:	9a 87       	std	Y+10, r25	; 0x0a
     bc0:	89 87       	std	Y+9, r24	; 0x09
	int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1; 
     bc2:	88 89       	ldd	r24, Y+16	; 0x10
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	8e 85       	ldd	r24, Y+14	; 0x0e
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	a9 01       	movw	r20, r18
     bd0:	48 1b       	sub	r20, r24
     bd2:	59 0b       	sbc	r21, r25
     bd4:	ca 01       	movw	r24, r20
     bd6:	98 87       	std	Y+8, r25	; 0x08
     bd8:	8f 83       	std	Y+7, r24	; 0x07
     bda:	8f 81       	ldd	r24, Y+7	; 0x07
     bdc:	98 85       	ldd	r25, Y+8	; 0x08
     bde:	99 23       	and	r25, r25
     be0:	3c f4       	brge	.+14     	; 0xbf0 <LCD_DrawLine+0x9a>
     be2:	8f 81       	ldd	r24, Y+7	; 0x07
     be4:	98 85       	ldd	r25, Y+8	; 0x08
     be6:	90 95       	com	r25
     be8:	81 95       	neg	r24
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	98 87       	std	Y+8, r25	; 0x08
     bee:	8f 83       	std	Y+7, r24	; 0x07
     bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf2:	88 89       	ldd	r24, Y+16	; 0x10
     bf4:	98 17       	cp	r25, r24
     bf6:	28 f4       	brcc	.+10     	; 0xc02 <LCD_DrawLine+0xac>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9c 8b       	std	Y+20, r25	; 0x14
     bfe:	8b 8b       	std	Y+19, r24	; 0x13
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <LCD_DrawLine+0xb4>
     c02:	4f ef       	ldi	r20, 0xFF	; 255
     c04:	5f ef       	ldi	r21, 0xFF	; 255
     c06:	5c 8b       	std	Y+20, r21	; 0x14
     c08:	4b 8b       	std	Y+19, r20	; 0x13
     c0a:	8b 89       	ldd	r24, Y+19	; 0x13
     c0c:	9c 89       	ldd	r25, Y+20	; 0x14
     c0e:	9e 83       	std	Y+6, r25	; 0x06
     c10:	8d 83       	std	Y+5, r24	; 0x05
	int err = (dx>dy ? dx : -dy)/2, e2;
     c12:	2b 85       	ldd	r18, Y+11	; 0x0b
     c14:	3c 85       	ldd	r19, Y+12	; 0x0c
     c16:	8f 81       	ldd	r24, Y+7	; 0x07
     c18:	98 85       	ldd	r25, Y+8	; 0x08
     c1a:	82 17       	cp	r24, r18
     c1c:	93 07       	cpc	r25, r19
     c1e:	bc f0       	brlt	.+46     	; 0xc4e <LCD_DrawLine+0xf8>
     c20:	8f 81       	ldd	r24, Y+7	; 0x07
     c22:	98 85       	ldd	r25, Y+8	; 0x08
     c24:	90 95       	com	r25
     c26:	81 95       	neg	r24
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	98 8f       	std	Y+24, r25	; 0x18
     c2c:	8f 8b       	std	Y+23, r24	; 0x17
     c2e:	4f 89       	ldd	r20, Y+23	; 0x17
     c30:	58 8d       	ldd	r21, Y+24	; 0x18
     c32:	55 23       	and	r21, r21
     c34:	2c f4       	brge	.+10     	; 0xc40 <LCD_DrawLine+0xea>
     c36:	8f 89       	ldd	r24, Y+23	; 0x17
     c38:	98 8d       	ldd	r25, Y+24	; 0x18
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	98 8f       	std	Y+24, r25	; 0x18
     c3e:	8f 8b       	std	Y+23, r24	; 0x17
     c40:	8f 89       	ldd	r24, Y+23	; 0x17
     c42:	98 8d       	ldd	r25, Y+24	; 0x18
     c44:	95 95       	asr	r25
     c46:	87 95       	ror	r24
     c48:	9a 8b       	std	Y+18, r25	; 0x12
     c4a:	89 8b       	std	Y+17, r24	; 0x11
     c4c:	13 c0       	rjmp	.+38     	; 0xc74 <LCD_DrawLine+0x11e>
     c4e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c50:	9c 85       	ldd	r25, Y+12	; 0x0c
     c52:	9a 8f       	std	Y+26, r25	; 0x1a
     c54:	89 8f       	std	Y+25, r24	; 0x19
     c56:	49 8d       	ldd	r20, Y+25	; 0x19
     c58:	5a 8d       	ldd	r21, Y+26	; 0x1a
     c5a:	55 23       	and	r21, r21
     c5c:	2c f4       	brge	.+10     	; 0xc68 <LCD_DrawLine+0x112>
     c5e:	89 8d       	ldd	r24, Y+25	; 0x19
     c60:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	9a 8f       	std	Y+26, r25	; 0x1a
     c66:	89 8f       	std	Y+25, r24	; 0x19
     c68:	89 8d       	ldd	r24, Y+25	; 0x19
     c6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c6c:	95 95       	asr	r25
     c6e:	87 95       	ror	r24
     c70:	9a 8b       	std	Y+18, r25	; 0x12
     c72:	89 8b       	std	Y+17, r24	; 0x11
     c74:	49 89       	ldd	r20, Y+17	; 0x11
     c76:	5a 89       	ldd	r21, Y+18	; 0x12
     c78:	5c 83       	std	Y+4, r21	; 0x04
     c7a:	4b 83       	std	Y+3, r20	; 0x03

  	for(;;)
	{
   		LCD_DrawPixel(x0,y0);
     c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c7e:	6e 85       	ldd	r22, Y+14	; 0x0e
     c80:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_DrawPixel>
   		if (x0==x1 && y0==y1) break;
     c84:	9d 85       	ldd	r25, Y+13	; 0x0d
     c86:	8f 85       	ldd	r24, Y+15	; 0x0f
     c88:	98 17       	cp	r25, r24
     c8a:	21 f4       	brne	.+8      	; 0xc94 <LCD_DrawLine+0x13e>
     c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c8e:	88 89       	ldd	r24, Y+16	; 0x10
     c90:	98 17       	cp	r25, r24
     c92:	89 f1       	breq	.+98     	; 0xcf6 <LCD_DrawLine+0x1a0>
   		e2 = err;
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	9c 81       	ldd	r25, Y+4	; 0x04
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
   		if (e2 >-dx) { err -= dy; x0 += sx; }
     c9c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c9e:	9c 85       	ldd	r25, Y+12	; 0x0c
     ca0:	22 27       	eor	r18, r18
     ca2:	33 27       	eor	r19, r19
     ca4:	28 1b       	sub	r18, r24
     ca6:	39 0b       	sbc	r19, r25
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	28 17       	cp	r18, r24
     cae:	39 07       	cpc	r19, r25
     cb0:	74 f4       	brge	.+28     	; 0xcce <LCD_DrawLine+0x178>
     cb2:	2b 81       	ldd	r18, Y+3	; 0x03
     cb4:	3c 81       	ldd	r19, Y+4	; 0x04
     cb6:	8f 81       	ldd	r24, Y+7	; 0x07
     cb8:	98 85       	ldd	r25, Y+8	; 0x08
     cba:	a9 01       	movw	r20, r18
     cbc:	48 1b       	sub	r20, r24
     cbe:	59 0b       	sbc	r21, r25
     cc0:	ca 01       	movw	r24, r20
     cc2:	9c 83       	std	Y+4, r25	; 0x04
     cc4:	8b 83       	std	Y+3, r24	; 0x03
     cc6:	99 85       	ldd	r25, Y+9	; 0x09
     cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cca:	89 0f       	add	r24, r25
     ccc:	8d 87       	std	Y+13, r24	; 0x0d
   		if (e2 < dy) { err += dx; y0 += sy; }
     cce:	29 81       	ldd	r18, Y+1	; 0x01
     cd0:	3a 81       	ldd	r19, Y+2	; 0x02
     cd2:	8f 81       	ldd	r24, Y+7	; 0x07
     cd4:	98 85       	ldd	r25, Y+8	; 0x08
     cd6:	28 17       	cp	r18, r24
     cd8:	39 07       	cpc	r19, r25
     cda:	84 f6       	brge	.-96     	; 0xc7c <LCD_DrawLine+0x126>
     cdc:	2b 81       	ldd	r18, Y+3	; 0x03
     cde:	3c 81       	ldd	r19, Y+4	; 0x04
     ce0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ce2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ce4:	82 0f       	add	r24, r18
     ce6:	93 1f       	adc	r25, r19
     ce8:	9c 83       	std	Y+4, r25	; 0x04
     cea:	8b 83       	std	Y+3, r24	; 0x03
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	8e 85       	ldd	r24, Y+14	; 0x0e
     cf0:	89 0f       	add	r24, r25
     cf2:	8e 87       	std	Y+14, r24	; 0x0e
     cf4:	c3 cf       	rjmp	.-122    	; 0xc7c <LCD_DrawLine+0x126>
  	}
}
     cf6:	6a 96       	adiw	r28, 0x1a	; 26
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <LCD_PrintChar>:

int LCD_PrintChar(const char c, unsigned char x0, unsigned char y0)
{
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	28 97       	sbiw	r28, 0x08	; 8
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	8e 83       	std	Y+6, r24	; 0x06
     d1e:	6f 83       	std	Y+7, r22	; 0x07
     d20:	48 87       	std	Y+8, r20	; 0x08
	char whitespace = 0;
     d22:	1d 82       	std	Y+5, r1	; 0x05
	char * CHAR = getChar(c);
     d24:	8e 81       	ldd	r24, Y+6	; 0x06
     d26:	0e 94 a7 08 	call	0x114e	; 0x114e <getChar>
     d2a:	9c 83       	std	Y+4, r25	; 0x04
     d2c:	8b 83       	std	Y+3, r24	; 0x03
	for(unsigned char x = 0;x < 5;x++)
     d2e:	1a 82       	std	Y+2, r1	; 0x02
     d30:	50 c0       	rjmp	.+160    	; 0xdd2 <LCD_PrintChar+0xca>
	{
		if(FLAGS & FLAG_IGNORE_WHITESPACE && CHAR[x] == 0) whitespace++;
     d32:	80 91 66 02 	lds	r24, 0x0266
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	84 70       	andi	r24, 0x04	; 4
     d3c:	90 70       	andi	r25, 0x00	; 0
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	71 f0       	breq	.+28     	; 0xd5e <LCD_PrintChar+0x56>
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	9c 81       	ldd	r25, Y+4	; 0x04
     d4c:	fc 01       	movw	r30, r24
     d4e:	e2 0f       	add	r30, r18
     d50:	f3 1f       	adc	r31, r19
     d52:	80 81       	ld	r24, Z
     d54:	88 23       	and	r24, r24
     d56:	19 f4       	brne	.+6      	; 0xd5e <LCD_PrintChar+0x56>
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	8f 5f       	subi	r24, 0xFF	; 255
     d5c:	8d 83       	std	Y+5, r24	; 0x05
		if(CHAR[x] == 0x00)continue;
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	fc 01       	movw	r30, r24
     d6a:	e2 0f       	add	r30, r18
     d6c:	f3 1f       	adc	r31, r19
     d6e:	80 81       	ld	r24, Z
     d70:	88 23       	and	r24, r24
     d72:	61 f1       	breq	.+88     	; 0xdcc <LCD_PrintChar+0xc4>
		for(unsigned char y = 0;y < 8;y++)
     d74:	19 82       	std	Y+1, r1	; 0x01
     d76:	27 c0       	rjmp	.+78     	; 0xdc6 <LCD_PrintChar+0xbe>
		{
			if(CHAR[x] & 1 << y)
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	fc 01       	movw	r30, r24
     d84:	e2 0f       	add	r30, r18
     d86:	f3 1f       	adc	r31, r19
     d88:	80 81       	ld	r24, Z
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	a9 01       	movw	r20, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <LCD_PrintChar+0x94>
     d98:	55 95       	asr	r21
     d9a:	47 95       	ror	r20
     d9c:	8a 95       	dec	r24
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <LCD_PrintChar+0x90>
     da0:	ca 01       	movw	r24, r20
     da2:	81 70       	andi	r24, 0x01	; 1
     da4:	90 70       	andi	r25, 0x00	; 0
     da6:	88 23       	and	r24, r24
     da8:	59 f0       	breq	.+22     	; 0xdc0 <LCD_PrintChar+0xb8>
				LCD_DrawPixel(x + x0, y + y0);
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	8f 81       	ldd	r24, Y+7	; 0x07
     dae:	29 2f       	mov	r18, r25
     db0:	28 0f       	add	r18, r24
     db2:	99 81       	ldd	r25, Y+1	; 0x01
     db4:	88 85       	ldd	r24, Y+8	; 0x08
     db6:	98 0f       	add	r25, r24
     db8:	82 2f       	mov	r24, r18
     dba:	69 2f       	mov	r22, r25
     dbc:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_DrawPixel>
	char * CHAR = getChar(c);
	for(unsigned char x = 0;x < 5;x++)
	{
		if(FLAGS & FLAG_IGNORE_WHITESPACE && CHAR[x] == 0) whitespace++;
		if(CHAR[x] == 0x00)continue;
		for(unsigned char y = 0;y < 8;y++)
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	88 30       	cpi	r24, 0x08	; 8
     dca:	b0 f2       	brcs	.-84     	; 0xd78 <LCD_PrintChar+0x70>

int LCD_PrintChar(const char c, unsigned char x0, unsigned char y0)
{
	char whitespace = 0;
	char * CHAR = getChar(c);
	for(unsigned char x = 0;x < 5;x++)
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	8a 83       	std	Y+2, r24	; 0x02
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	85 30       	cpi	r24, 0x05	; 5
     dd6:	08 f4       	brcc	.+2      	; 0xdda <LCD_PrintChar+0xd2>
     dd8:	ac cf       	rjmp	.-168    	; 0xd32 <LCD_PrintChar+0x2a>
		{
			if(CHAR[x] & 1 << y)
				LCD_DrawPixel(x + x0, y + y0);
		}
	}
	return whitespace;
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
}
     de0:	28 96       	adiw	r28, 0x08	; 8
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <LCD_PrintString>:

void LCD_PrintString(const char * str, unsigned char x0, unsigned char y0)
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <LCD_PrintString+0x6>
     df8:	00 d0       	rcall	.+0      	; 0xdfa <LCD_PrintString+0x8>
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <LCD_PrintString+0xa>
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	9c 83       	std	Y+4, r25	; 0x04
     e02:	8b 83       	std	Y+3, r24	; 0x03
     e04:	6d 83       	std	Y+5, r22	; 0x05
     e06:	4e 83       	std	Y+6, r20	; 0x06
	unsigned char xOff = 0;
     e08:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char yOff = 0;
     e0a:	19 82       	std	Y+1, r1	; 0x01
     e0c:	2c c0       	rjmp	.+88     	; 0xe66 <LCD_PrintString+0x74>
	while(*str != '\0')
	{
		if(*str == ' ') xOff += 3;
     e0e:	eb 81       	ldd	r30, Y+3	; 0x03
     e10:	fc 81       	ldd	r31, Y+4	; 0x04
     e12:	80 81       	ld	r24, Z
     e14:	80 32       	cpi	r24, 0x20	; 32
     e16:	21 f4       	brne	.+8      	; 0xe20 <LCD_PrintString+0x2e>
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	8d 5f       	subi	r24, 0xFD	; 253
     e1c:	8a 83       	std	Y+2, r24	; 0x02
     e1e:	1e c0       	rjmp	.+60     	; 0xe5c <LCD_PrintString+0x6a>
		else if(*str == '\n') 
     e20:	eb 81       	ldd	r30, Y+3	; 0x03
     e22:	fc 81       	ldd	r31, Y+4	; 0x04
     e24:	80 81       	ld	r24, Z
     e26:	8a 30       	cpi	r24, 0x0A	; 10
     e28:	29 f4       	brne	.+10     	; 0xe34 <LCD_PrintString+0x42>
		{
			xOff = 0;
     e2a:	1a 82       	std	Y+2, r1	; 0x02
			yOff += 9;
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	87 5f       	subi	r24, 0xF7	; 247
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	14 c0       	rjmp	.+40     	; 0xe5c <LCD_PrintString+0x6a>
		}
		else xOff += 6 - LCD_PrintChar(*str, x0 + xOff, y0 + yOff);
     e34:	eb 81       	ldd	r30, Y+3	; 0x03
     e36:	fc 81       	ldd	r31, Y+4	; 0x04
     e38:	30 81       	ld	r19, Z
     e3a:	9d 81       	ldd	r25, Y+5	; 0x05
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	29 2f       	mov	r18, r25
     e40:	28 0f       	add	r18, r24
     e42:	9e 81       	ldd	r25, Y+6	; 0x06
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	98 0f       	add	r25, r24
     e48:	83 2f       	mov	r24, r19
     e4a:	62 2f       	mov	r22, r18
     e4c:	49 2f       	mov	r20, r25
     e4e:	0e 94 84 06 	call	0xd08	; 0xd08 <LCD_PrintChar>
     e52:	98 2f       	mov	r25, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	89 1b       	sub	r24, r25
     e58:	8a 5f       	subi	r24, 0xFA	; 250
     e5a:	8a 83       	std	Y+2, r24	; 0x02
		str++;
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03

void LCD_PrintString(const char * str, unsigned char x0, unsigned char y0)
{
	unsigned char xOff = 0;
	unsigned char yOff = 0;
	while(*str != '\0')
     e66:	eb 81       	ldd	r30, Y+3	; 0x03
     e68:	fc 81       	ldd	r31, Y+4	; 0x04
     e6a:	80 81       	ld	r24, Z
     e6c:	88 23       	and	r24, r24
     e6e:	79 f6       	brne	.-98     	; 0xe0e <LCD_PrintString+0x1c>
			yOff += 9;
		}
		else xOff += 6 - LCD_PrintChar(*str, x0 + xOff, y0 + yOff);
		str++;
	}
}
     e70:	26 96       	adiw	r28, 0x06	; 6
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <LCD_StringWidth>:

int LCD_StringWidth(const char * str)
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	2c 97       	sbiw	r28, 0x0c	; 12
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	9a 87       	std	Y+10, r25	; 0x0a
     e98:	89 87       	std	Y+9, r24	; 0x09
	int length = 0;
     e9a:	18 86       	std	Y+8, r1	; 0x08
     e9c:	1f 82       	std	Y+7, r1	; 0x07
	const char * original = str;
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea2:	9e 83       	std	Y+6, r25	; 0x06
     ea4:	8d 83       	std	Y+5, r24	; 0x05
     ea6:	0a c0       	rjmp	.+20     	; 0xebc <LCD_StringWidth+0x3a>
	while(*str != '\0')
	{
		length++;
     ea8:	8f 81       	ldd	r24, Y+7	; 0x07
     eaa:	98 85       	ldd	r25, Y+8	; 0x08
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	98 87       	std	Y+8, r25	; 0x08
     eb0:	8f 83       	std	Y+7, r24	; 0x07
		str++;
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	9a 87       	std	Y+10, r25	; 0x0a
     eba:	89 87       	std	Y+9, r24	; 0x09

int LCD_StringWidth(const char * str)
{
	int length = 0;
	const char * original = str;
	while(*str != '\0')
     ebc:	e9 85       	ldd	r30, Y+9	; 0x09
     ebe:	fa 85       	ldd	r31, Y+10	; 0x0a
     ec0:	80 81       	ld	r24, Z
     ec2:	88 23       	and	r24, r24
     ec4:	89 f7       	brne	.-30     	; 0xea8 <LCD_StringWidth+0x26>
	{
		length++;
		str++;
	}
	str = original;
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	9e 81       	ldd	r25, Y+6	; 0x06
     eca:	9a 87       	std	Y+10, r25	; 0x0a
     ecc:	89 87       	std	Y+9, r24	; 0x09
	if(FLAGS & FLAG_IGNORE_WHITESPACE)
     ece:	80 91 66 02 	lds	r24, 0x0266
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	84 70       	andi	r24, 0x04	; 4
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	09 f4       	brne	.+2      	; 0xee0 <LCD_StringWidth+0x5e>
     ede:	40 c0       	rjmp	.+128    	; 0xf60 <LCD_StringWidth+0xde>
	{
		length = 0;
     ee0:	18 86       	std	Y+8, r1	; 0x08
     ee2:	1f 82       	std	Y+7, r1	; 0x07
     ee4:	2f c0       	rjmp	.+94     	; 0xf44 <LCD_StringWidth+0xc2>
		char * CHAR;
		int off;
		while(*str != '\0')
		{
			CHAR = getChar(*str);
     ee6:	e9 85       	ldd	r30, Y+9	; 0x09
     ee8:	fa 85       	ldd	r31, Y+10	; 0x0a
     eea:	80 81       	ld	r24, Z
     eec:	0e 94 a7 08 	call	0x114e	; 0x114e <getChar>
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
			for(off = 4;off >= 0;off--)
     ef4:	84 e0       	ldi	r24, 0x04	; 4
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <LCD_StringWidth+0x9a>
			{
				if(CHAR[off] != 0x00) break;
     efe:	29 81       	ldd	r18, Y+1	; 0x01
     f00:	3a 81       	ldd	r19, Y+2	; 0x02
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	fc 01       	movw	r30, r24
     f08:	e2 0f       	add	r30, r18
     f0a:	f3 1f       	adc	r31, r19
     f0c:	80 81       	ld	r24, Z
     f0e:	88 23       	and	r24, r24
     f10:	49 f4       	brne	.+18     	; 0xf24 <LCD_StringWidth+0xa2>
		char * CHAR;
		int off;
		while(*str != '\0')
		{
			CHAR = getChar(*str);
			for(off = 4;off >= 0;off--)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	99 23       	and	r25, r25
     f22:	6c f7       	brge	.-38     	; 0xefe <LCD_StringWidth+0x7c>
			{
				if(CHAR[off] != 0x00) break;
			}
			length += off + 2;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	9c 01       	movw	r18, r24
     f2a:	2e 5f       	subi	r18, 0xFE	; 254
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	8f 81       	ldd	r24, Y+7	; 0x07
     f30:	98 85       	ldd	r25, Y+8	; 0x08
     f32:	82 0f       	add	r24, r18
     f34:	93 1f       	adc	r25, r19
     f36:	98 87       	std	Y+8, r25	; 0x08
     f38:	8f 83       	std	Y+7, r24	; 0x07
			str++;
     f3a:	89 85       	ldd	r24, Y+9	; 0x09
     f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	9a 87       	std	Y+10, r25	; 0x0a
     f42:	89 87       	std	Y+9, r24	; 0x09
	if(FLAGS & FLAG_IGNORE_WHITESPACE)
	{
		length = 0;
		char * CHAR;
		int off;
		while(*str != '\0')
     f44:	e9 85       	ldd	r30, Y+9	; 0x09
     f46:	fa 85       	ldd	r31, Y+10	; 0x0a
     f48:	80 81       	ld	r24, Z
     f4a:	88 23       	and	r24, r24
     f4c:	61 f6       	brne	.-104    	; 0xee6 <LCD_StringWidth+0x64>
				if(CHAR[off] != 0x00) break;
			}
			length += off + 2;
			str++;
		}
		str = original;
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	9a 87       	std	Y+10, r25	; 0x0a
     f54:	89 87       	std	Y+9, r24	; 0x09
		return length;
     f56:	4f 81       	ldd	r20, Y+7	; 0x07
     f58:	58 85       	ldd	r21, Y+8	; 0x08
     f5a:	5c 87       	std	Y+12, r21	; 0x0c
     f5c:	4b 87       	std	Y+11, r20	; 0x0b
     f5e:	0c c0       	rjmp	.+24     	; 0xf78 <LCD_StringWidth+0xf6>
	}
	else return 5 * length;
     f60:	8f 81       	ldd	r24, Y+7	; 0x07
     f62:	98 85       	ldd	r25, Y+8	; 0x08
     f64:	9c 01       	movw	r18, r24
     f66:	22 0f       	add	r18, r18
     f68:	33 1f       	adc	r19, r19
     f6a:	22 0f       	add	r18, r18
     f6c:	33 1f       	adc	r19, r19
     f6e:	a9 01       	movw	r20, r18
     f70:	48 0f       	add	r20, r24
     f72:	59 1f       	adc	r21, r25
     f74:	5c 87       	std	Y+12, r21	; 0x0c
     f76:	4b 87       	std	Y+11, r20	; 0x0b
     f78:	8b 85       	ldd	r24, Y+11	; 0x0b
     f7a:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     f7c:	2c 96       	adiw	r28, 0x0c	; 12
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <LCD_PrintSpecial>:

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
     f8e:	0f 93       	push	r16
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	28 97       	sbiw	r28, 0x08	; 8
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	9c 83       	std	Y+4, r25	; 0x04
     fa6:	8b 83       	std	Y+3, r24	; 0x03
     fa8:	6d 83       	std	Y+5, r22	; 0x05
     faa:	4e 83       	std	Y+6, r20	; 0x06
     fac:	2f 83       	std	Y+7, r18	; 0x07
     fae:	08 87       	std	Y+8, r16	; 0x08
	for(unsigned char x = 0;x < width;x++)
     fb0:	1a 82       	std	Y+2, r1	; 0x02
     fb2:	30 c0       	rjmp	.+96     	; 0x1014 <LCD_PrintSpecial+0x86>
	{
		for(unsigned char y = 0;y < height;y++)
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	27 c0       	rjmp	.+78     	; 0x1006 <LCD_PrintSpecial+0x78>
		{
			if(SPECIAL[x] & (1 << y))
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	fc 01       	movw	r30, r24
     fc4:	e2 0f       	add	r30, r18
     fc6:	f3 1f       	adc	r31, r19
     fc8:	80 81       	ld	r24, Z
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a9 01       	movw	r20, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <LCD_PrintSpecial+0x4e>
     fd8:	55 95       	asr	r21
     fda:	47 95       	ror	r20
     fdc:	8a 95       	dec	r24
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <LCD_PrintSpecial+0x4a>
     fe0:	ca 01       	movw	r24, r20
     fe2:	81 70       	andi	r24, 0x01	; 1
     fe4:	90 70       	andi	r25, 0x00	; 0
     fe6:	88 23       	and	r24, r24
     fe8:	59 f0       	breq	.+22     	; 0x1000 <LCD_PrintSpecial+0x72>
			{
				LCD_DrawPixel(x + x0, y + y0);
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	29 2f       	mov	r18, r25
     ff0:	28 0f       	add	r18, r24
     ff2:	99 81       	ldd	r25, Y+1	; 0x01
     ff4:	8e 81       	ldd	r24, Y+6	; 0x06
     ff6:	98 0f       	add	r25, r24
     ff8:	82 2f       	mov	r24, r18
     ffa:	69 2f       	mov	r22, r25
     ffc:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_DrawPixel>

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
	for(unsigned char x = 0;x < width;x++)
	{
		for(unsigned char y = 0;y < height;y++)
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	8f 5f       	subi	r24, 0xFF	; 255
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	99 81       	ldd	r25, Y+1	; 0x01
    1008:	88 85       	ldd	r24, Y+8	; 0x08
    100a:	98 17       	cp	r25, r24
    100c:	a8 f2       	brcs	.-86     	; 0xfb8 <LCD_PrintSpecial+0x2a>
	else return 5 * length;
}

void LCD_PrintSpecial(const char * SPECIAL, unsigned char x0, unsigned char y0, unsigned char width, unsigned char height)
{
	for(unsigned char x = 0;x < width;x++)
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	8f 5f       	subi	r24, 0xFF	; 255
    1012:	8a 83       	std	Y+2, r24	; 0x02
    1014:	9a 81       	ldd	r25, Y+2	; 0x02
    1016:	8f 81       	ldd	r24, Y+7	; 0x07
    1018:	98 17       	cp	r25, r24
    101a:	60 f2       	brcs	.-104    	; 0xfb4 <LCD_PrintSpecial+0x26>
			{
				LCD_DrawPixel(x + x0, y + y0);
			}
		}
	}
}
    101c:	28 96       	adiw	r28, 0x08	; 8
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	0f 91       	pop	r16
    102e:	08 95       	ret

00001030 <LCD_Display>:

void LCD_Display()
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <LCD_Display+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <LCD_Display+0x8>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	int page, column;
	for(page = 7;page >= 0;page--)
    103c:	87 e0       	ldi	r24, 0x07	; 7
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	9c 83       	std	Y+4, r25	; 0x04
    1042:	8b 83       	std	Y+3, r24	; 0x03
    1044:	34 c0       	rjmp	.+104    	; 0x10ae <LCD_Display+0x7e>
	{
		sendData(0xB0 | (7 - page), CMD); // Page address
    1046:	9b 81       	ldd	r25, Y+3	; 0x03
    1048:	87 e0       	ldi	r24, 0x07	; 7
    104a:	89 1b       	sub	r24, r25
    104c:	80 6b       	ori	r24, 0xB0	; 176
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>
		sendData(0x10, CMD); // Column addres MSB (0)
    1054:	80 e1       	ldi	r24, 0x10	; 16
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>
		sendData(0x04, CMD); // Column address LSB (4)
    105c:	84 e0       	ldi	r24, 0x04	; 4
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>
		for(column = 0;column < 128;column++)
    1064:	1a 82       	std	Y+2, r1	; 0x02
    1066:	19 82       	std	Y+1, r1	; 0x01
    1068:	18 c0       	rjmp	.+48     	; 0x109a <LCD_Display+0x6a>
		{
			sendData(buffer[page * 128 + column], DATA); // Data
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	9c 01       	movw	r18, r24
    1070:	36 95       	lsr	r19
    1072:	32 2f       	mov	r19, r18
    1074:	22 27       	eor	r18, r18
    1076:	37 95       	ror	r19
    1078:	27 95       	ror	r18
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	82 0f       	add	r24, r18
    1080:	93 1f       	adc	r25, r19
    1082:	fc 01       	movw	r30, r24
    1084:	e4 59       	subi	r30, 0x94	; 148
    1086:	f9 4f       	sbci	r31, 0xF9	; 249
    1088:	80 81       	ld	r24, Z
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <sendData>
	for(page = 7;page >= 0;page--)
	{
		sendData(0xB0 | (7 - page), CMD); // Page address
		sendData(0x10, CMD); // Column addres MSB (0)
		sendData(0x04, CMD); // Column address LSB (4)
		for(column = 0;column < 128;column++)
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	80 38       	cpi	r24, 0x80	; 128
    10a0:	91 05       	cpc	r25, r1
    10a2:	1c f3       	brlt	.-58     	; 0x106a <LCD_Display+0x3a>
}

void LCD_Display()
{
	int page, column;
	for(page = 7;page >= 0;page--)
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	9c 81       	ldd	r25, Y+4	; 0x04
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	9c 83       	std	Y+4, r25	; 0x04
    10ac:	8b 83       	std	Y+3, r24	; 0x03
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	99 23       	and	r25, r25
    10b4:	44 f6       	brge	.-112    	; 0x1046 <LCD_Display+0x16>
		for(column = 0;column < 128;column++)
		{
			sendData(buffer[page * 128 + column], DATA); // Data
		}
	}
	memcpy(pixels, buffer, sizeof(pixels));
    10b6:	8c e6       	ldi	r24, 0x6C	; 108
    10b8:	92 e0       	ldi	r25, 0x02	; 2
    10ba:	2c e6       	ldi	r18, 0x6C	; 108
    10bc:	36 e0       	ldi	r19, 0x06	; 6
    10be:	b9 01       	movw	r22, r18
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	54 e0       	ldi	r21, 0x04	; 4
    10c4:	0e 94 8f 11 	call	0x231e	; 0x231e <memcpy>
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <LCD_GetWidth>:

int LCD_GetWidth()
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <LCD_GetWidth+0x6>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	return ((FLAGS & FLAG_LANDSCAPE) > 0 ? 128 : 64);
    10e0:	80 91 66 02 	lds	r24, 0x0266
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	81 70       	andi	r24, 0x01	; 1
    10ea:	90 70       	andi	r25, 0x00	; 0
    10ec:	18 16       	cp	r1, r24
    10ee:	19 06       	cpc	r1, r25
    10f0:	2c f4       	brge	.+10     	; 0x10fc <LCD_GetWidth+0x26>
    10f2:	80 e8       	ldi	r24, 0x80	; 128
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <__stack+0x5>
    10fc:	80 e4       	ldi	r24, 0x40	; 64
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <LCD_GetHeight>:

int LCD_GetHeight()
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <LCD_GetHeight+0x6>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
	return ((FLAGS & FLAG_LANDSCAPE) > 0 ? 64 : 128);
    111c:	80 91 66 02 	lds	r24, 0x0266
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	81 70       	andi	r24, 0x01	; 1
    1126:	90 70       	andi	r25, 0x00	; 0
    1128:	18 16       	cp	r1, r24
    112a:	19 06       	cpc	r1, r25
    112c:	2c f4       	brge	.+10     	; 0x1138 <LCD_GetHeight+0x26>
    112e:	80 e4       	ldi	r24, 0x40	; 64
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	04 c0       	rjmp	.+8      	; 0x1140 <LCD_GetHeight+0x2e>
    1138:	80 e8       	ldi	r24, 0x80	; 128
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <getChar>:

char * getChar(char c)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <getChar+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <getChar+0x8>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
	switch(c)
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	3d 83       	std	Y+5, r19	; 0x05
    1166:	2c 83       	std	Y+4, r18	; 0x04
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	84 35       	cpi	r24, 0x54	; 84
    116e:	91 05       	cpc	r25, r1
    1170:	09 f4       	brne	.+2      	; 0x1174 <getChar+0x26>
    1172:	79 c2       	rjmp	.+1266   	; 0x1666 <getChar+0x518>
    1174:	2c 81       	ldd	r18, Y+4	; 0x04
    1176:	3d 81       	ldd	r19, Y+5	; 0x05
    1178:	25 35       	cpi	r18, 0x55	; 85
    117a:	31 05       	cpc	r19, r1
    117c:	0c f0       	brlt	.+2      	; 0x1180 <getChar+0x32>
    117e:	ed c0       	rjmp	.+474    	; 0x135a <getChar+0x20c>
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	83 34       	cpi	r24, 0x43	; 67
    1186:	91 05       	cpc	r25, r1
    1188:	09 f4       	brne	.+2      	; 0x118c <getChar+0x3e>
    118a:	c3 c1       	rjmp	.+902    	; 0x1512 <getChar+0x3c4>
    118c:	2c 81       	ldd	r18, Y+4	; 0x04
    118e:	3d 81       	ldd	r19, Y+5	; 0x05
    1190:	24 34       	cpi	r18, 0x44	; 68
    1192:	31 05       	cpc	r19, r1
    1194:	0c f0       	brlt	.+2      	; 0x1198 <getChar+0x4a>
    1196:	80 c0       	rjmp	.+256    	; 0x1298 <getChar+0x14a>
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	9d 81       	ldd	r25, Y+5	; 0x05
    119c:	85 33       	cpi	r24, 0x35	; 53
    119e:	91 05       	cpc	r25, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <getChar+0x56>
    11a2:	c0 c2       	rjmp	.+1408   	; 0x1724 <getChar+0x5d6>
    11a4:	2c 81       	ldd	r18, Y+4	; 0x04
    11a6:	3d 81       	ldd	r19, Y+5	; 0x05
    11a8:	26 33       	cpi	r18, 0x36	; 54
    11aa:	31 05       	cpc	r19, r1
    11ac:	0c f0       	brlt	.+2      	; 0x11b0 <getChar+0x62>
    11ae:	43 c0       	rjmp	.+134    	; 0x1236 <getChar+0xe8>
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	81 33       	cpi	r24, 0x31	; 49
    11b6:	91 05       	cpc	r25, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <getChar+0x6e>
    11ba:	a0 c2       	rjmp	.+1344   	; 0x16fc <getChar+0x5ae>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	22 33       	cpi	r18, 0x32	; 50
    11c2:	31 05       	cpc	r19, r1
    11c4:	5c f5       	brge	.+86     	; 0x121c <getChar+0xce>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	8d 32       	cpi	r24, 0x2D	; 45
    11cc:	91 05       	cpc	r25, r1
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <getChar+0x84>
    11d0:	cc c2       	rjmp	.+1432   	; 0x176a <getChar+0x61c>
    11d2:	2c 81       	ldd	r18, Y+4	; 0x04
    11d4:	3d 81       	ldd	r19, Y+5	; 0x05
    11d6:	2e 32       	cpi	r18, 0x2E	; 46
    11d8:	31 05       	cpc	r19, r1
    11da:	9c f4       	brge	.+38     	; 0x1202 <getChar+0xb4>
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	9d 81       	ldd	r25, Y+5	; 0x05
    11e0:	82 32       	cpi	r24, 0x22	; 34
    11e2:	91 05       	cpc	r25, r1
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <getChar+0x9a>
    11e6:	c6 c2       	rjmp	.+1420   	; 0x1774 <getChar+0x626>
    11e8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ea:	3d 81       	ldd	r19, Y+5	; 0x05
    11ec:	2c 32       	cpi	r18, 0x2C	; 44
    11ee:	31 05       	cpc	r19, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <getChar+0xa6>
    11f2:	b6 c2       	rjmp	.+1388   	; 0x1760 <getChar+0x612>
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	81 32       	cpi	r24, 0x21	; 33
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <getChar+0xb2>
    11fe:	bf c2       	rjmp	.+1406   	; 0x177e <getChar+0x630>
    1200:	cd c2       	rjmp	.+1434   	; 0x179c <getChar+0x64e>
    1202:	2c 81       	ldd	r18, Y+4	; 0x04
    1204:	3d 81       	ldd	r19, Y+5	; 0x05
    1206:	2e 32       	cpi	r18, 0x2E	; 46
    1208:	31 05       	cpc	r19, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <getChar+0xc0>
    120c:	a4 c2       	rjmp	.+1352   	; 0x1756 <getChar+0x608>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	80 33       	cpi	r24, 0x30	; 48
    1214:	91 05       	cpc	r25, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <getChar+0xcc>
    1218:	6c c2       	rjmp	.+1240   	; 0x16f2 <getChar+0x5a4>
    121a:	c0 c2       	rjmp	.+1408   	; 0x179c <getChar+0x64e>
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	23 33       	cpi	r18, 0x33	; 51
    1222:	31 05       	cpc	r19, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <getChar+0xda>
    1226:	74 c2       	rjmp	.+1256   	; 0x1710 <getChar+0x5c2>
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	84 33       	cpi	r24, 0x34	; 52
    122e:	91 05       	cpc	r25, r1
    1230:	0c f0       	brlt	.+2      	; 0x1234 <getChar+0xe6>
    1232:	73 c2       	rjmp	.+1254   	; 0x171a <getChar+0x5cc>
    1234:	68 c2       	rjmp	.+1232   	; 0x1706 <getChar+0x5b8>
    1236:	2c 81       	ldd	r18, Y+4	; 0x04
    1238:	3d 81       	ldd	r19, Y+5	; 0x05
    123a:	29 33       	cpi	r18, 0x39	; 57
    123c:	31 05       	cpc	r19, r1
    123e:	09 f4       	brne	.+2      	; 0x1242 <getChar+0xf4>
    1240:	85 c2       	rjmp	.+1290   	; 0x174c <getChar+0x5fe>
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	8a 33       	cpi	r24, 0x3A	; 58
    1248:	91 05       	cpc	r25, r1
    124a:	6c f4       	brge	.+26     	; 0x1266 <getChar+0x118>
    124c:	2c 81       	ldd	r18, Y+4	; 0x04
    124e:	3d 81       	ldd	r19, Y+5	; 0x05
    1250:	27 33       	cpi	r18, 0x37	; 55
    1252:	31 05       	cpc	r19, r1
    1254:	09 f4       	brne	.+2      	; 0x1258 <getChar+0x10a>
    1256:	70 c2       	rjmp	.+1248   	; 0x1738 <getChar+0x5ea>
    1258:	8c 81       	ldd	r24, Y+4	; 0x04
    125a:	9d 81       	ldd	r25, Y+5	; 0x05
    125c:	88 33       	cpi	r24, 0x38	; 56
    125e:	91 05       	cpc	r25, r1
    1260:	0c f0       	brlt	.+2      	; 0x1264 <getChar+0x116>
    1262:	6f c2       	rjmp	.+1246   	; 0x1742 <getChar+0x5f4>
    1264:	64 c2       	rjmp	.+1224   	; 0x172e <getChar+0x5e0>
    1266:	2c 81       	ldd	r18, Y+4	; 0x04
    1268:	3d 81       	ldd	r19, Y+5	; 0x05
    126a:	21 34       	cpi	r18, 0x41	; 65
    126c:	31 05       	cpc	r19, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <getChar+0x124>
    1270:	3c c1       	rjmp	.+632    	; 0x14ea <getChar+0x39c>
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	82 34       	cpi	r24, 0x42	; 66
    1278:	91 05       	cpc	r25, r1
    127a:	0c f0       	brlt	.+2      	; 0x127e <getChar+0x130>
    127c:	40 c1       	rjmp	.+640    	; 0x14fe <getChar+0x3b0>
    127e:	2c 81       	ldd	r18, Y+4	; 0x04
    1280:	3d 81       	ldd	r19, Y+5	; 0x05
    1282:	2a 33       	cpi	r18, 0x3A	; 58
    1284:	31 05       	cpc	r19, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <getChar+0x13c>
    1288:	84 c2       	rjmp	.+1288   	; 0x1792 <getChar+0x644>
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	9d 81       	ldd	r25, Y+5	; 0x05
    128e:	8f 33       	cpi	r24, 0x3F	; 63
    1290:	91 05       	cpc	r25, r1
    1292:	09 f4       	brne	.+2      	; 0x1296 <getChar+0x148>
    1294:	79 c2       	rjmp	.+1266   	; 0x1788 <getChar+0x63a>
    1296:	82 c2       	rjmp	.+1284   	; 0x179c <getChar+0x64e>
    1298:	2c 81       	ldd	r18, Y+4	; 0x04
    129a:	3d 81       	ldd	r19, Y+5	; 0x05
    129c:	2b 34       	cpi	r18, 0x4B	; 75
    129e:	31 05       	cpc	r19, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <getChar+0x156>
    12a2:	87 c1       	rjmp	.+782    	; 0x15b2 <getChar+0x464>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	8c 34       	cpi	r24, 0x4C	; 76
    12aa:	91 05       	cpc	r25, r1
    12ac:	2c f5       	brge	.+74     	; 0x12f8 <getChar+0x1aa>
    12ae:	2c 81       	ldd	r18, Y+4	; 0x04
    12b0:	3d 81       	ldd	r19, Y+5	; 0x05
    12b2:	27 34       	cpi	r18, 0x47	; 71
    12b4:	31 05       	cpc	r19, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <getChar+0x16c>
    12b8:	54 c1       	rjmp	.+680    	; 0x1562 <getChar+0x414>
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	9d 81       	ldd	r25, Y+5	; 0x05
    12be:	88 34       	cpi	r24, 0x48	; 72
    12c0:	91 05       	cpc	r25, r1
    12c2:	6c f4       	brge	.+26     	; 0x12de <getChar+0x190>
    12c4:	2c 81       	ldd	r18, Y+4	; 0x04
    12c6:	3d 81       	ldd	r19, Y+5	; 0x05
    12c8:	25 34       	cpi	r18, 0x45	; 69
    12ca:	31 05       	cpc	r19, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <getChar+0x182>
    12ce:	35 c1       	rjmp	.+618    	; 0x153a <getChar+0x3ec>
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	86 34       	cpi	r24, 0x46	; 70
    12d6:	91 05       	cpc	r25, r1
    12d8:	0c f0       	brlt	.+2      	; 0x12dc <getChar+0x18e>
    12da:	39 c1       	rjmp	.+626    	; 0x154e <getChar+0x400>
    12dc:	24 c1       	rjmp	.+584    	; 0x1526 <getChar+0x3d8>
    12de:	2c 81       	ldd	r18, Y+4	; 0x04
    12e0:	3d 81       	ldd	r19, Y+5	; 0x05
    12e2:	29 34       	cpi	r18, 0x49	; 73
    12e4:	31 05       	cpc	r19, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <getChar+0x19c>
    12e8:	50 c1       	rjmp	.+672    	; 0x158a <getChar+0x43c>
    12ea:	8c 81       	ldd	r24, Y+4	; 0x04
    12ec:	9d 81       	ldd	r25, Y+5	; 0x05
    12ee:	8a 34       	cpi	r24, 0x4A	; 74
    12f0:	91 05       	cpc	r25, r1
    12f2:	0c f0       	brlt	.+2      	; 0x12f6 <getChar+0x1a8>
    12f4:	54 c1       	rjmp	.+680    	; 0x159e <getChar+0x450>
    12f6:	3f c1       	rjmp	.+638    	; 0x1576 <getChar+0x428>
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	2f 34       	cpi	r18, 0x4F	; 79
    12fe:	31 05       	cpc	r19, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <getChar+0x1b6>
    1302:	7f c1       	rjmp	.+766    	; 0x1602 <getChar+0x4b4>
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	80 35       	cpi	r24, 0x50	; 80
    130a:	91 05       	cpc	r25, r1
    130c:	6c f4       	brge	.+26     	; 0x1328 <getChar+0x1da>
    130e:	2c 81       	ldd	r18, Y+4	; 0x04
    1310:	3d 81       	ldd	r19, Y+5	; 0x05
    1312:	2d 34       	cpi	r18, 0x4D	; 77
    1314:	31 05       	cpc	r19, r1
    1316:	09 f4       	brne	.+2      	; 0x131a <getChar+0x1cc>
    1318:	60 c1       	rjmp	.+704    	; 0x15da <getChar+0x48c>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	8e 34       	cpi	r24, 0x4E	; 78
    1320:	91 05       	cpc	r25, r1
    1322:	0c f0       	brlt	.+2      	; 0x1326 <getChar+0x1d8>
    1324:	64 c1       	rjmp	.+712    	; 0x15ee <getChar+0x4a0>
    1326:	4f c1       	rjmp	.+670    	; 0x15c6 <getChar+0x478>
    1328:	2c 81       	ldd	r18, Y+4	; 0x04
    132a:	3d 81       	ldd	r19, Y+5	; 0x05
    132c:	21 35       	cpi	r18, 0x51	; 81
    132e:	31 05       	cpc	r19, r1
    1330:	09 f4       	brne	.+2      	; 0x1334 <getChar+0x1e6>
    1332:	7b c1       	rjmp	.+758    	; 0x162a <getChar+0x4dc>
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	9d 81       	ldd	r25, Y+5	; 0x05
    1338:	81 35       	cpi	r24, 0x51	; 81
    133a:	91 05       	cpc	r25, r1
    133c:	0c f4       	brge	.+2      	; 0x1340 <getChar+0x1f2>
    133e:	6b c1       	rjmp	.+726    	; 0x1616 <getChar+0x4c8>
    1340:	2c 81       	ldd	r18, Y+4	; 0x04
    1342:	3d 81       	ldd	r19, Y+5	; 0x05
    1344:	22 35       	cpi	r18, 0x52	; 82
    1346:	31 05       	cpc	r19, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <getChar+0x1fe>
    134a:	79 c1       	rjmp	.+754    	; 0x163e <getChar+0x4f0>
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	83 35       	cpi	r24, 0x53	; 83
    1352:	91 05       	cpc	r25, r1
    1354:	09 f4       	brne	.+2      	; 0x1358 <getChar+0x20a>
    1356:	7d c1       	rjmp	.+762    	; 0x1652 <getChar+0x504>
    1358:	21 c2       	rjmp	.+1090   	; 0x179c <getChar+0x64e>
    135a:	2c 81       	ldd	r18, Y+4	; 0x04
    135c:	3d 81       	ldd	r19, Y+5	; 0x05
    135e:	2a 36       	cpi	r18, 0x6A	; 106
    1360:	31 05       	cpc	r19, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <getChar+0x218>
    1364:	21 c1       	rjmp	.+578    	; 0x15a8 <getChar+0x45a>
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	8b 36       	cpi	r24, 0x6B	; 107
    136c:	91 05       	cpc	r25, r1
    136e:	0c f0       	brlt	.+2      	; 0x1372 <getChar+0x224>
    1370:	5b c0       	rjmp	.+182    	; 0x1428 <getChar+0x2da>
    1372:	2c 81       	ldd	r18, Y+4	; 0x04
    1374:	3d 81       	ldd	r19, Y+5	; 0x05
    1376:	22 36       	cpi	r18, 0x62	; 98
    1378:	31 05       	cpc	r19, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <getChar+0x230>
    137c:	c5 c0       	rjmp	.+394    	; 0x1508 <getChar+0x3ba>
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	9d 81       	ldd	r25, Y+5	; 0x05
    1382:	83 36       	cpi	r24, 0x63	; 99
    1384:	91 05       	cpc	r25, r1
    1386:	5c f5       	brge	.+86     	; 0x13de <getChar+0x290>
    1388:	2c 81       	ldd	r18, Y+4	; 0x04
    138a:	3d 81       	ldd	r19, Y+5	; 0x05
    138c:	28 35       	cpi	r18, 0x58	; 88
    138e:	31 05       	cpc	r19, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <getChar+0x246>
    1392:	91 c1       	rjmp	.+802    	; 0x16b6 <getChar+0x568>
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	9d 81       	ldd	r25, Y+5	; 0x05
    1398:	89 35       	cpi	r24, 0x59	; 89
    139a:	91 05       	cpc	r25, r1
    139c:	6c f4       	brge	.+26     	; 0x13b8 <getChar+0x26a>
    139e:	2c 81       	ldd	r18, Y+4	; 0x04
    13a0:	3d 81       	ldd	r19, Y+5	; 0x05
    13a2:	26 35       	cpi	r18, 0x56	; 86
    13a4:	31 05       	cpc	r19, r1
    13a6:	09 f4       	brne	.+2      	; 0x13aa <getChar+0x25c>
    13a8:	72 c1       	rjmp	.+740    	; 0x168e <getChar+0x540>
    13aa:	8c 81       	ldd	r24, Y+4	; 0x04
    13ac:	9d 81       	ldd	r25, Y+5	; 0x05
    13ae:	87 35       	cpi	r24, 0x57	; 87
    13b0:	91 05       	cpc	r25, r1
    13b2:	0c f0       	brlt	.+2      	; 0x13b6 <getChar+0x268>
    13b4:	76 c1       	rjmp	.+748    	; 0x16a2 <getChar+0x554>
    13b6:	61 c1       	rjmp	.+706    	; 0x167a <getChar+0x52c>
    13b8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ba:	3d 81       	ldd	r19, Y+5	; 0x05
    13bc:	2a 35       	cpi	r18, 0x5A	; 90
    13be:	31 05       	cpc	r19, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <getChar+0x276>
    13c2:	8d c1       	rjmp	.+794    	; 0x16de <getChar+0x590>
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	8a 35       	cpi	r24, 0x5A	; 90
    13ca:	91 05       	cpc	r25, r1
    13cc:	0c f4       	brge	.+2      	; 0x13d0 <getChar+0x282>
    13ce:	7d c1       	rjmp	.+762    	; 0x16ca <getChar+0x57c>
    13d0:	2c 81       	ldd	r18, Y+4	; 0x04
    13d2:	3d 81       	ldd	r19, Y+5	; 0x05
    13d4:	21 36       	cpi	r18, 0x61	; 97
    13d6:	31 05       	cpc	r19, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <getChar+0x28e>
    13da:	8c c0       	rjmp	.+280    	; 0x14f4 <getChar+0x3a6>
    13dc:	df c1       	rjmp	.+958    	; 0x179c <getChar+0x64e>
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	86 36       	cpi	r24, 0x66	; 102
    13e4:	91 05       	cpc	r25, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <getChar+0x29c>
    13e8:	b7 c0       	rjmp	.+366    	; 0x1558 <getChar+0x40a>
    13ea:	2c 81       	ldd	r18, Y+4	; 0x04
    13ec:	3d 81       	ldd	r19, Y+5	; 0x05
    13ee:	27 36       	cpi	r18, 0x67	; 103
    13f0:	31 05       	cpc	r19, r1
    13f2:	6c f4       	brge	.+26     	; 0x140e <getChar+0x2c0>
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	84 36       	cpi	r24, 0x64	; 100
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <getChar+0x2b2>
    13fe:	98 c0       	rjmp	.+304    	; 0x1530 <getChar+0x3e2>
    1400:	2c 81       	ldd	r18, Y+4	; 0x04
    1402:	3d 81       	ldd	r19, Y+5	; 0x05
    1404:	25 36       	cpi	r18, 0x65	; 101
    1406:	31 05       	cpc	r19, r1
    1408:	0c f0       	brlt	.+2      	; 0x140c <getChar+0x2be>
    140a:	9c c0       	rjmp	.+312    	; 0x1544 <getChar+0x3f6>
    140c:	87 c0       	rjmp	.+270    	; 0x151c <getChar+0x3ce>
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	9d 81       	ldd	r25, Y+5	; 0x05
    1412:	88 36       	cpi	r24, 0x68	; 104
    1414:	91 05       	cpc	r25, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <getChar+0x2cc>
    1418:	b3 c0       	rjmp	.+358    	; 0x1580 <getChar+0x432>
    141a:	2c 81       	ldd	r18, Y+4	; 0x04
    141c:	3d 81       	ldd	r19, Y+5	; 0x05
    141e:	29 36       	cpi	r18, 0x69	; 105
    1420:	31 05       	cpc	r19, r1
    1422:	0c f0       	brlt	.+2      	; 0x1426 <getChar+0x2d8>
    1424:	b7 c0       	rjmp	.+366    	; 0x1594 <getChar+0x446>
    1426:	a2 c0       	rjmp	.+324    	; 0x156c <getChar+0x41e>
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	9d 81       	ldd	r25, Y+5	; 0x05
    142c:	82 37       	cpi	r24, 0x72	; 114
    142e:	91 05       	cpc	r25, r1
    1430:	09 f4       	brne	.+2      	; 0x1434 <getChar+0x2e6>
    1432:	0a c1       	rjmp	.+532    	; 0x1648 <getChar+0x4fa>
    1434:	2c 81       	ldd	r18, Y+4	; 0x04
    1436:	3d 81       	ldd	r19, Y+5	; 0x05
    1438:	23 37       	cpi	r18, 0x73	; 115
    143a:	31 05       	cpc	r19, r1
    143c:	2c f5       	brge	.+74     	; 0x1488 <getChar+0x33a>
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	9d 81       	ldd	r25, Y+5	; 0x05
    1442:	8e 36       	cpi	r24, 0x6E	; 110
    1444:	91 05       	cpc	r25, r1
    1446:	09 f4       	brne	.+2      	; 0x144a <getChar+0x2fc>
    1448:	d7 c0       	rjmp	.+430    	; 0x15f8 <getChar+0x4aa>
    144a:	2c 81       	ldd	r18, Y+4	; 0x04
    144c:	3d 81       	ldd	r19, Y+5	; 0x05
    144e:	2f 36       	cpi	r18, 0x6F	; 111
    1450:	31 05       	cpc	r19, r1
    1452:	6c f4       	brge	.+26     	; 0x146e <getChar+0x320>
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	8c 36       	cpi	r24, 0x6C	; 108
    145a:	91 05       	cpc	r25, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <getChar+0x312>
    145e:	b8 c0       	rjmp	.+368    	; 0x15d0 <getChar+0x482>
    1460:	2c 81       	ldd	r18, Y+4	; 0x04
    1462:	3d 81       	ldd	r19, Y+5	; 0x05
    1464:	2d 36       	cpi	r18, 0x6D	; 109
    1466:	31 05       	cpc	r19, r1
    1468:	0c f0       	brlt	.+2      	; 0x146c <getChar+0x31e>
    146a:	bc c0       	rjmp	.+376    	; 0x15e4 <getChar+0x496>
    146c:	a7 c0       	rjmp	.+334    	; 0x15bc <getChar+0x46e>
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	80 37       	cpi	r24, 0x70	; 112
    1474:	91 05       	cpc	r25, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <getChar+0x32c>
    1478:	d3 c0       	rjmp	.+422    	; 0x1620 <getChar+0x4d2>
    147a:	2c 81       	ldd	r18, Y+4	; 0x04
    147c:	3d 81       	ldd	r19, Y+5	; 0x05
    147e:	21 37       	cpi	r18, 0x71	; 113
    1480:	31 05       	cpc	r19, r1
    1482:	0c f0       	brlt	.+2      	; 0x1486 <getChar+0x338>
    1484:	d7 c0       	rjmp	.+430    	; 0x1634 <getChar+0x4e6>
    1486:	c2 c0       	rjmp	.+388    	; 0x160c <getChar+0x4be>
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	86 37       	cpi	r24, 0x76	; 118
    148e:	91 05       	cpc	r25, r1
    1490:	09 f4       	brne	.+2      	; 0x1494 <getChar+0x346>
    1492:	02 c1       	rjmp	.+516    	; 0x1698 <getChar+0x54a>
    1494:	2c 81       	ldd	r18, Y+4	; 0x04
    1496:	3d 81       	ldd	r19, Y+5	; 0x05
    1498:	27 37       	cpi	r18, 0x77	; 119
    149a:	31 05       	cpc	r19, r1
    149c:	6c f4       	brge	.+26     	; 0x14b8 <getChar+0x36a>
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	9d 81       	ldd	r25, Y+5	; 0x05
    14a2:	84 37       	cpi	r24, 0x74	; 116
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <getChar+0x35c>
    14a8:	e3 c0       	rjmp	.+454    	; 0x1670 <getChar+0x522>
    14aa:	2c 81       	ldd	r18, Y+4	; 0x04
    14ac:	3d 81       	ldd	r19, Y+5	; 0x05
    14ae:	25 37       	cpi	r18, 0x75	; 117
    14b0:	31 05       	cpc	r19, r1
    14b2:	0c f0       	brlt	.+2      	; 0x14b6 <getChar+0x368>
    14b4:	e7 c0       	rjmp	.+462    	; 0x1684 <getChar+0x536>
    14b6:	d2 c0       	rjmp	.+420    	; 0x165c <getChar+0x50e>
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	88 37       	cpi	r24, 0x78	; 120
    14be:	91 05       	cpc	r25, r1
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <getChar+0x376>
    14c2:	fe c0       	rjmp	.+508    	; 0x16c0 <getChar+0x572>
    14c4:	2c 81       	ldd	r18, Y+4	; 0x04
    14c6:	3d 81       	ldd	r19, Y+5	; 0x05
    14c8:	28 37       	cpi	r18, 0x78	; 120
    14ca:	31 05       	cpc	r19, r1
    14cc:	0c f4       	brge	.+2      	; 0x14d0 <getChar+0x382>
    14ce:	ee c0       	rjmp	.+476    	; 0x16ac <getChar+0x55e>
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	89 37       	cpi	r24, 0x79	; 121
    14d6:	91 05       	cpc	r25, r1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <getChar+0x38e>
    14da:	fc c0       	rjmp	.+504    	; 0x16d4 <getChar+0x586>
    14dc:	2c 81       	ldd	r18, Y+4	; 0x04
    14de:	3d 81       	ldd	r19, Y+5	; 0x05
    14e0:	2a 37       	cpi	r18, 0x7A	; 122
    14e2:	31 05       	cpc	r19, r1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <getChar+0x39a>
    14e6:	00 c1       	rjmp	.+512    	; 0x16e8 <getChar+0x59a>
    14e8:	59 c1       	rjmp	.+690    	; 0x179c <getChar+0x64e>
	{
		case 'A': return CHAR_A;
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	9b 83       	std	Y+3, r25	; 0x03
    14f0:	8a 83       	std	Y+2, r24	; 0x02
    14f2:	58 c1       	rjmp	.+688    	; 0x17a4 <getChar+0x656>
		case 'a': return CHAR_a;
    14f4:	25 e0       	ldi	r18, 0x05	; 5
    14f6:	31 e0       	ldi	r19, 0x01	; 1
    14f8:	3b 83       	std	Y+3, r19	; 0x03
    14fa:	2a 83       	std	Y+2, r18	; 0x02
    14fc:	53 c1       	rjmp	.+678    	; 0x17a4 <getChar+0x656>
		case 'B': return CHAR_B;
    14fe:	8a e0       	ldi	r24, 0x0A	; 10
    1500:	91 e0       	ldi	r25, 0x01	; 1
    1502:	9b 83       	std	Y+3, r25	; 0x03
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	4e c1       	rjmp	.+668    	; 0x17a4 <getChar+0x656>
		case 'b': return CHAR_b;
    1508:	2f e0       	ldi	r18, 0x0F	; 15
    150a:	31 e0       	ldi	r19, 0x01	; 1
    150c:	3b 83       	std	Y+3, r19	; 0x03
    150e:	2a 83       	std	Y+2, r18	; 0x02
    1510:	49 c1       	rjmp	.+658    	; 0x17a4 <getChar+0x656>
		case 'C': return CHAR_C;
    1512:	84 e1       	ldi	r24, 0x14	; 20
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	9b 83       	std	Y+3, r25	; 0x03
    1518:	8a 83       	std	Y+2, r24	; 0x02
    151a:	44 c1       	rjmp	.+648    	; 0x17a4 <getChar+0x656>
		case 'c': return CHAR_c;
    151c:	29 e1       	ldi	r18, 0x19	; 25
    151e:	31 e0       	ldi	r19, 0x01	; 1
    1520:	3b 83       	std	Y+3, r19	; 0x03
    1522:	2a 83       	std	Y+2, r18	; 0x02
    1524:	3f c1       	rjmp	.+638    	; 0x17a4 <getChar+0x656>
		case 'D': return CHAR_D;
    1526:	8e e1       	ldi	r24, 0x1E	; 30
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	9b 83       	std	Y+3, r25	; 0x03
    152c:	8a 83       	std	Y+2, r24	; 0x02
    152e:	3a c1       	rjmp	.+628    	; 0x17a4 <getChar+0x656>
		case 'd': return CHAR_d;
    1530:	23 e2       	ldi	r18, 0x23	; 35
    1532:	31 e0       	ldi	r19, 0x01	; 1
    1534:	3b 83       	std	Y+3, r19	; 0x03
    1536:	2a 83       	std	Y+2, r18	; 0x02
    1538:	35 c1       	rjmp	.+618    	; 0x17a4 <getChar+0x656>
		case 'E': return CHAR_E;
    153a:	88 e2       	ldi	r24, 0x28	; 40
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	9b 83       	std	Y+3, r25	; 0x03
    1540:	8a 83       	std	Y+2, r24	; 0x02
    1542:	30 c1       	rjmp	.+608    	; 0x17a4 <getChar+0x656>
		case 'e': return CHAR_e;
    1544:	2d e2       	ldi	r18, 0x2D	; 45
    1546:	31 e0       	ldi	r19, 0x01	; 1
    1548:	3b 83       	std	Y+3, r19	; 0x03
    154a:	2a 83       	std	Y+2, r18	; 0x02
    154c:	2b c1       	rjmp	.+598    	; 0x17a4 <getChar+0x656>
		case 'F': return CHAR_F;
    154e:	82 e3       	ldi	r24, 0x32	; 50
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	9b 83       	std	Y+3, r25	; 0x03
    1554:	8a 83       	std	Y+2, r24	; 0x02
    1556:	26 c1       	rjmp	.+588    	; 0x17a4 <getChar+0x656>
		case 'f': return CHAR_f;
    1558:	27 e3       	ldi	r18, 0x37	; 55
    155a:	31 e0       	ldi	r19, 0x01	; 1
    155c:	3b 83       	std	Y+3, r19	; 0x03
    155e:	2a 83       	std	Y+2, r18	; 0x02
    1560:	21 c1       	rjmp	.+578    	; 0x17a4 <getChar+0x656>
		case 'G': return CHAR_G;
    1562:	8c e3       	ldi	r24, 0x3C	; 60
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	9b 83       	std	Y+3, r25	; 0x03
    1568:	8a 83       	std	Y+2, r24	; 0x02
    156a:	1c c1       	rjmp	.+568    	; 0x17a4 <getChar+0x656>
		case 'g': return CHAR_g;
    156c:	21 e4       	ldi	r18, 0x41	; 65
    156e:	31 e0       	ldi	r19, 0x01	; 1
    1570:	3b 83       	std	Y+3, r19	; 0x03
    1572:	2a 83       	std	Y+2, r18	; 0x02
    1574:	17 c1       	rjmp	.+558    	; 0x17a4 <getChar+0x656>
		case 'H': return CHAR_H;
    1576:	86 e4       	ldi	r24, 0x46	; 70
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	9b 83       	std	Y+3, r25	; 0x03
    157c:	8a 83       	std	Y+2, r24	; 0x02
    157e:	12 c1       	rjmp	.+548    	; 0x17a4 <getChar+0x656>
		case 'h': return CHAR_h;
    1580:	2b e4       	ldi	r18, 0x4B	; 75
    1582:	31 e0       	ldi	r19, 0x01	; 1
    1584:	3b 83       	std	Y+3, r19	; 0x03
    1586:	2a 83       	std	Y+2, r18	; 0x02
    1588:	0d c1       	rjmp	.+538    	; 0x17a4 <getChar+0x656>
		case 'I': return CHAR_I;
    158a:	80 e5       	ldi	r24, 0x50	; 80
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	9b 83       	std	Y+3, r25	; 0x03
    1590:	8a 83       	std	Y+2, r24	; 0x02
    1592:	08 c1       	rjmp	.+528    	; 0x17a4 <getChar+0x656>
		case 'i': return CHAR_i;
    1594:	25 e5       	ldi	r18, 0x55	; 85
    1596:	31 e0       	ldi	r19, 0x01	; 1
    1598:	3b 83       	std	Y+3, r19	; 0x03
    159a:	2a 83       	std	Y+2, r18	; 0x02
    159c:	03 c1       	rjmp	.+518    	; 0x17a4 <getChar+0x656>
		case 'J': return CHAR_J;
    159e:	8a e5       	ldi	r24, 0x5A	; 90
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	9b 83       	std	Y+3, r25	; 0x03
    15a4:	8a 83       	std	Y+2, r24	; 0x02
    15a6:	fe c0       	rjmp	.+508    	; 0x17a4 <getChar+0x656>
		case 'j': return CHAR_j;
    15a8:	2f e5       	ldi	r18, 0x5F	; 95
    15aa:	31 e0       	ldi	r19, 0x01	; 1
    15ac:	3b 83       	std	Y+3, r19	; 0x03
    15ae:	2a 83       	std	Y+2, r18	; 0x02
    15b0:	f9 c0       	rjmp	.+498    	; 0x17a4 <getChar+0x656>
		case 'K': return CHAR_K;
    15b2:	84 e6       	ldi	r24, 0x64	; 100
    15b4:	91 e0       	ldi	r25, 0x01	; 1
    15b6:	9b 83       	std	Y+3, r25	; 0x03
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	f4 c0       	rjmp	.+488    	; 0x17a4 <getChar+0x656>
		case 'k': return CHAR_k;
    15bc:	29 e6       	ldi	r18, 0x69	; 105
    15be:	31 e0       	ldi	r19, 0x01	; 1
    15c0:	3b 83       	std	Y+3, r19	; 0x03
    15c2:	2a 83       	std	Y+2, r18	; 0x02
    15c4:	ef c0       	rjmp	.+478    	; 0x17a4 <getChar+0x656>
		case 'L': return CHAR_L;
    15c6:	8e e6       	ldi	r24, 0x6E	; 110
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	9b 83       	std	Y+3, r25	; 0x03
    15cc:	8a 83       	std	Y+2, r24	; 0x02
    15ce:	ea c0       	rjmp	.+468    	; 0x17a4 <getChar+0x656>
		case 'l': return CHAR_l;
    15d0:	23 e7       	ldi	r18, 0x73	; 115
    15d2:	31 e0       	ldi	r19, 0x01	; 1
    15d4:	3b 83       	std	Y+3, r19	; 0x03
    15d6:	2a 83       	std	Y+2, r18	; 0x02
    15d8:	e5 c0       	rjmp	.+458    	; 0x17a4 <getChar+0x656>
		case 'M': return CHAR_M;
    15da:	88 e7       	ldi	r24, 0x78	; 120
    15dc:	91 e0       	ldi	r25, 0x01	; 1
    15de:	9b 83       	std	Y+3, r25	; 0x03
    15e0:	8a 83       	std	Y+2, r24	; 0x02
    15e2:	e0 c0       	rjmp	.+448    	; 0x17a4 <getChar+0x656>
		case 'm': return CHAR_m;
    15e4:	2d e7       	ldi	r18, 0x7D	; 125
    15e6:	31 e0       	ldi	r19, 0x01	; 1
    15e8:	3b 83       	std	Y+3, r19	; 0x03
    15ea:	2a 83       	std	Y+2, r18	; 0x02
    15ec:	db c0       	rjmp	.+438    	; 0x17a4 <getChar+0x656>
		case 'N': return CHAR_N;
    15ee:	82 e8       	ldi	r24, 0x82	; 130
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	9b 83       	std	Y+3, r25	; 0x03
    15f4:	8a 83       	std	Y+2, r24	; 0x02
    15f6:	d6 c0       	rjmp	.+428    	; 0x17a4 <getChar+0x656>
		case 'n': return CHAR_n;
    15f8:	27 e8       	ldi	r18, 0x87	; 135
    15fa:	31 e0       	ldi	r19, 0x01	; 1
    15fc:	3b 83       	std	Y+3, r19	; 0x03
    15fe:	2a 83       	std	Y+2, r18	; 0x02
    1600:	d1 c0       	rjmp	.+418    	; 0x17a4 <getChar+0x656>
		case 'O': return CHAR_O;
    1602:	8c e8       	ldi	r24, 0x8C	; 140
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	9b 83       	std	Y+3, r25	; 0x03
    1608:	8a 83       	std	Y+2, r24	; 0x02
    160a:	cc c0       	rjmp	.+408    	; 0x17a4 <getChar+0x656>
		case 'o': return CHAR_o;
    160c:	21 e9       	ldi	r18, 0x91	; 145
    160e:	31 e0       	ldi	r19, 0x01	; 1
    1610:	3b 83       	std	Y+3, r19	; 0x03
    1612:	2a 83       	std	Y+2, r18	; 0x02
    1614:	c7 c0       	rjmp	.+398    	; 0x17a4 <getChar+0x656>
		case 'P': return CHAR_P;
    1616:	86 e9       	ldi	r24, 0x96	; 150
    1618:	91 e0       	ldi	r25, 0x01	; 1
    161a:	9b 83       	std	Y+3, r25	; 0x03
    161c:	8a 83       	std	Y+2, r24	; 0x02
    161e:	c2 c0       	rjmp	.+388    	; 0x17a4 <getChar+0x656>
		case 'p': return CHAR_p;
    1620:	2b e9       	ldi	r18, 0x9B	; 155
    1622:	31 e0       	ldi	r19, 0x01	; 1
    1624:	3b 83       	std	Y+3, r19	; 0x03
    1626:	2a 83       	std	Y+2, r18	; 0x02
    1628:	bd c0       	rjmp	.+378    	; 0x17a4 <getChar+0x656>
		case 'Q': return CHAR_Q;
    162a:	80 ea       	ldi	r24, 0xA0	; 160
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	9b 83       	std	Y+3, r25	; 0x03
    1630:	8a 83       	std	Y+2, r24	; 0x02
    1632:	b8 c0       	rjmp	.+368    	; 0x17a4 <getChar+0x656>
		case 'q': return CHAR_q;
    1634:	25 ea       	ldi	r18, 0xA5	; 165
    1636:	31 e0       	ldi	r19, 0x01	; 1
    1638:	3b 83       	std	Y+3, r19	; 0x03
    163a:	2a 83       	std	Y+2, r18	; 0x02
    163c:	b3 c0       	rjmp	.+358    	; 0x17a4 <getChar+0x656>
		case 'R': return CHAR_R;
    163e:	8a ea       	ldi	r24, 0xAA	; 170
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	9b 83       	std	Y+3, r25	; 0x03
    1644:	8a 83       	std	Y+2, r24	; 0x02
    1646:	ae c0       	rjmp	.+348    	; 0x17a4 <getChar+0x656>
		case 'r': return CHAR_r;
    1648:	2f ea       	ldi	r18, 0xAF	; 175
    164a:	31 e0       	ldi	r19, 0x01	; 1
    164c:	3b 83       	std	Y+3, r19	; 0x03
    164e:	2a 83       	std	Y+2, r18	; 0x02
    1650:	a9 c0       	rjmp	.+338    	; 0x17a4 <getChar+0x656>
		case 'S': return CHAR_S;
    1652:	84 eb       	ldi	r24, 0xB4	; 180
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	9b 83       	std	Y+3, r25	; 0x03
    1658:	8a 83       	std	Y+2, r24	; 0x02
    165a:	a4 c0       	rjmp	.+328    	; 0x17a4 <getChar+0x656>
		case 's': return CHAR_s;
    165c:	29 eb       	ldi	r18, 0xB9	; 185
    165e:	31 e0       	ldi	r19, 0x01	; 1
    1660:	3b 83       	std	Y+3, r19	; 0x03
    1662:	2a 83       	std	Y+2, r18	; 0x02
    1664:	9f c0       	rjmp	.+318    	; 0x17a4 <getChar+0x656>
		case 'T': return CHAR_T;
    1666:	8e eb       	ldi	r24, 0xBE	; 190
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	9b 83       	std	Y+3, r25	; 0x03
    166c:	8a 83       	std	Y+2, r24	; 0x02
    166e:	9a c0       	rjmp	.+308    	; 0x17a4 <getChar+0x656>
		case 't': return CHAR_t;
    1670:	23 ec       	ldi	r18, 0xC3	; 195
    1672:	31 e0       	ldi	r19, 0x01	; 1
    1674:	3b 83       	std	Y+3, r19	; 0x03
    1676:	2a 83       	std	Y+2, r18	; 0x02
    1678:	95 c0       	rjmp	.+298    	; 0x17a4 <getChar+0x656>
		case 'U': return CHAR_U;
    167a:	88 ec       	ldi	r24, 0xC8	; 200
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	9b 83       	std	Y+3, r25	; 0x03
    1680:	8a 83       	std	Y+2, r24	; 0x02
    1682:	90 c0       	rjmp	.+288    	; 0x17a4 <getChar+0x656>
		case 'u': return CHAR_u;
    1684:	2d ec       	ldi	r18, 0xCD	; 205
    1686:	31 e0       	ldi	r19, 0x01	; 1
    1688:	3b 83       	std	Y+3, r19	; 0x03
    168a:	2a 83       	std	Y+2, r18	; 0x02
    168c:	8b c0       	rjmp	.+278    	; 0x17a4 <getChar+0x656>
		case 'V': return CHAR_V;
    168e:	82 ed       	ldi	r24, 0xD2	; 210
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	9b 83       	std	Y+3, r25	; 0x03
    1694:	8a 83       	std	Y+2, r24	; 0x02
    1696:	86 c0       	rjmp	.+268    	; 0x17a4 <getChar+0x656>
		case 'v': return CHAR_v;
    1698:	27 ed       	ldi	r18, 0xD7	; 215
    169a:	31 e0       	ldi	r19, 0x01	; 1
    169c:	3b 83       	std	Y+3, r19	; 0x03
    169e:	2a 83       	std	Y+2, r18	; 0x02
    16a0:	81 c0       	rjmp	.+258    	; 0x17a4 <getChar+0x656>
		case 'W': return CHAR_W;
    16a2:	8c ed       	ldi	r24, 0xDC	; 220
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	9b 83       	std	Y+3, r25	; 0x03
    16a8:	8a 83       	std	Y+2, r24	; 0x02
    16aa:	7c c0       	rjmp	.+248    	; 0x17a4 <getChar+0x656>
		case 'w': return CHAR_w;
    16ac:	21 ee       	ldi	r18, 0xE1	; 225
    16ae:	31 e0       	ldi	r19, 0x01	; 1
    16b0:	3b 83       	std	Y+3, r19	; 0x03
    16b2:	2a 83       	std	Y+2, r18	; 0x02
    16b4:	77 c0       	rjmp	.+238    	; 0x17a4 <getChar+0x656>
		case 'X': return CHAR_X;
    16b6:	86 ee       	ldi	r24, 0xE6	; 230
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	9b 83       	std	Y+3, r25	; 0x03
    16bc:	8a 83       	std	Y+2, r24	; 0x02
    16be:	72 c0       	rjmp	.+228    	; 0x17a4 <getChar+0x656>
		case 'x': return CHAR_x;
    16c0:	2b ee       	ldi	r18, 0xEB	; 235
    16c2:	31 e0       	ldi	r19, 0x01	; 1
    16c4:	3b 83       	std	Y+3, r19	; 0x03
    16c6:	2a 83       	std	Y+2, r18	; 0x02
    16c8:	6d c0       	rjmp	.+218    	; 0x17a4 <getChar+0x656>
		case 'Y': return CHAR_Y;
    16ca:	80 ef       	ldi	r24, 0xF0	; 240
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	9b 83       	std	Y+3, r25	; 0x03
    16d0:	8a 83       	std	Y+2, r24	; 0x02
    16d2:	68 c0       	rjmp	.+208    	; 0x17a4 <getChar+0x656>
		case 'y': return CHAR_y;
    16d4:	25 ef       	ldi	r18, 0xF5	; 245
    16d6:	31 e0       	ldi	r19, 0x01	; 1
    16d8:	3b 83       	std	Y+3, r19	; 0x03
    16da:	2a 83       	std	Y+2, r18	; 0x02
    16dc:	63 c0       	rjmp	.+198    	; 0x17a4 <getChar+0x656>
		case 'Z': return CHAR_Z;
    16de:	8a ef       	ldi	r24, 0xFA	; 250
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	9b 83       	std	Y+3, r25	; 0x03
    16e4:	8a 83       	std	Y+2, r24	; 0x02
    16e6:	5e c0       	rjmp	.+188    	; 0x17a4 <getChar+0x656>
		case 'z': return CHAR_z;
    16e8:	2f ef       	ldi	r18, 0xFF	; 255
    16ea:	31 e0       	ldi	r19, 0x01	; 1
    16ec:	3b 83       	std	Y+3, r19	; 0x03
    16ee:	2a 83       	std	Y+2, r18	; 0x02
    16f0:	59 c0       	rjmp	.+178    	; 0x17a4 <getChar+0x656>

		case '0': return CHAR_0;
    16f2:	84 e0       	ldi	r24, 0x04	; 4
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	9b 83       	std	Y+3, r25	; 0x03
    16f8:	8a 83       	std	Y+2, r24	; 0x02
    16fa:	54 c0       	rjmp	.+168    	; 0x17a4 <getChar+0x656>
		case '1': return CHAR_1;
    16fc:	29 e0       	ldi	r18, 0x09	; 9
    16fe:	32 e0       	ldi	r19, 0x02	; 2
    1700:	3b 83       	std	Y+3, r19	; 0x03
    1702:	2a 83       	std	Y+2, r18	; 0x02
    1704:	4f c0       	rjmp	.+158    	; 0x17a4 <getChar+0x656>
		case '2': return CHAR_2;
    1706:	8e e0       	ldi	r24, 0x0E	; 14
    1708:	92 e0       	ldi	r25, 0x02	; 2
    170a:	9b 83       	std	Y+3, r25	; 0x03
    170c:	8a 83       	std	Y+2, r24	; 0x02
    170e:	4a c0       	rjmp	.+148    	; 0x17a4 <getChar+0x656>
		case '3': return CHAR_3;
    1710:	23 e1       	ldi	r18, 0x13	; 19
    1712:	32 e0       	ldi	r19, 0x02	; 2
    1714:	3b 83       	std	Y+3, r19	; 0x03
    1716:	2a 83       	std	Y+2, r18	; 0x02
    1718:	45 c0       	rjmp	.+138    	; 0x17a4 <getChar+0x656>
		case '4': return CHAR_4;
    171a:	88 e1       	ldi	r24, 0x18	; 24
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	9b 83       	std	Y+3, r25	; 0x03
    1720:	8a 83       	std	Y+2, r24	; 0x02
    1722:	40 c0       	rjmp	.+128    	; 0x17a4 <getChar+0x656>
		case '5': return CHAR_5;
    1724:	2d e1       	ldi	r18, 0x1D	; 29
    1726:	32 e0       	ldi	r19, 0x02	; 2
    1728:	3b 83       	std	Y+3, r19	; 0x03
    172a:	2a 83       	std	Y+2, r18	; 0x02
    172c:	3b c0       	rjmp	.+118    	; 0x17a4 <getChar+0x656>
		case '6': return CHAR_6;
    172e:	82 e2       	ldi	r24, 0x22	; 34
    1730:	92 e0       	ldi	r25, 0x02	; 2
    1732:	9b 83       	std	Y+3, r25	; 0x03
    1734:	8a 83       	std	Y+2, r24	; 0x02
    1736:	36 c0       	rjmp	.+108    	; 0x17a4 <getChar+0x656>
		case '7': return CHAR_7;
    1738:	27 e2       	ldi	r18, 0x27	; 39
    173a:	32 e0       	ldi	r19, 0x02	; 2
    173c:	3b 83       	std	Y+3, r19	; 0x03
    173e:	2a 83       	std	Y+2, r18	; 0x02
    1740:	31 c0       	rjmp	.+98     	; 0x17a4 <getChar+0x656>
		case '8': return CHAR_8;
    1742:	8c e2       	ldi	r24, 0x2C	; 44
    1744:	92 e0       	ldi	r25, 0x02	; 2
    1746:	9b 83       	std	Y+3, r25	; 0x03
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	2c c0       	rjmp	.+88     	; 0x17a4 <getChar+0x656>
		case '9': return CHAR_9;
    174c:	21 e3       	ldi	r18, 0x31	; 49
    174e:	32 e0       	ldi	r19, 0x02	; 2
    1750:	3b 83       	std	Y+3, r19	; 0x03
    1752:	2a 83       	std	Y+2, r18	; 0x02
    1754:	27 c0       	rjmp	.+78     	; 0x17a4 <getChar+0x656>

		case '.': return CHAR_DOT;
    1756:	86 e3       	ldi	r24, 0x36	; 54
    1758:	92 e0       	ldi	r25, 0x02	; 2
    175a:	9b 83       	std	Y+3, r25	; 0x03
    175c:	8a 83       	std	Y+2, r24	; 0x02
    175e:	22 c0       	rjmp	.+68     	; 0x17a4 <getChar+0x656>
		case ',': return CHAR_COMMA;
    1760:	2b e3       	ldi	r18, 0x3B	; 59
    1762:	32 e0       	ldi	r19, 0x02	; 2
    1764:	3b 83       	std	Y+3, r19	; 0x03
    1766:	2a 83       	std	Y+2, r18	; 0x02
    1768:	1d c0       	rjmp	.+58     	; 0x17a4 <getChar+0x656>
		case '-': return CHAR_DASH;
    176a:	80 e4       	ldi	r24, 0x40	; 64
    176c:	92 e0       	ldi	r25, 0x02	; 2
    176e:	9b 83       	std	Y+3, r25	; 0x03
    1770:	8a 83       	std	Y+2, r24	; 0x02
    1772:	18 c0       	rjmp	.+48     	; 0x17a4 <getChar+0x656>
		case '"': return CHAR_CITATION;
    1774:	25 e4       	ldi	r18, 0x45	; 69
    1776:	32 e0       	ldi	r19, 0x02	; 2
    1778:	3b 83       	std	Y+3, r19	; 0x03
    177a:	2a 83       	std	Y+2, r18	; 0x02
    177c:	13 c0       	rjmp	.+38     	; 0x17a4 <getChar+0x656>
		case '!': return CHAR_EXCLAMATION;
    177e:	8f e4       	ldi	r24, 0x4F	; 79
    1780:	92 e0       	ldi	r25, 0x02	; 2
    1782:	9b 83       	std	Y+3, r25	; 0x03
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	0e c0       	rjmp	.+28     	; 0x17a4 <getChar+0x656>
		case '?': return CHAR_QUESTION;
    1788:	24 e5       	ldi	r18, 0x54	; 84
    178a:	32 e0       	ldi	r19, 0x02	; 2
    178c:	3b 83       	std	Y+3, r19	; 0x03
    178e:	2a 83       	std	Y+2, r18	; 0x02
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <getChar+0x656>
		case ':': return CHAR_COLON;
    1792:	89 e5       	ldi	r24, 0x59	; 89
    1794:	92 e0       	ldi	r25, 0x02	; 2
    1796:	9b 83       	std	Y+3, r25	; 0x03
    1798:	8a 83       	std	Y+2, r24	; 0x02
    179a:	04 c0       	rjmp	.+8      	; 0x17a4 <getChar+0x656>
		default: return CHAR_SPACE;
    179c:	27 e6       	ldi	r18, 0x67	; 103
    179e:	32 e0       	ldi	r19, 0x02	; 2
    17a0:	3b 83       	std	Y+3, r19	; 0x03
    17a2:	2a 83       	std	Y+2, r18	; 0x02
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <flip>:

void flip(unsigned char* c1, unsigned char* c2)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	00 d0       	rcall	.+0      	; 0x17be <flip+0x6>
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <flip+0x8>
    17c0:	0f 92       	push	r0
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	9b 83       	std	Y+3, r25	; 0x03
    17c8:	8a 83       	std	Y+2, r24	; 0x02
    17ca:	7d 83       	std	Y+5, r23	; 0x05
    17cc:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char temp = *c1;
    17ce:	ea 81       	ldd	r30, Y+2	; 0x02
    17d0:	fb 81       	ldd	r31, Y+3	; 0x03
    17d2:	80 81       	ld	r24, Z
    17d4:	89 83       	std	Y+1, r24	; 0x01
	*c1 = *c2;
    17d6:	ec 81       	ldd	r30, Y+4	; 0x04
    17d8:	fd 81       	ldd	r31, Y+5	; 0x05
    17da:	80 81       	ld	r24, Z
    17dc:	ea 81       	ldd	r30, Y+2	; 0x02
    17de:	fb 81       	ldd	r31, Y+3	; 0x03
    17e0:	80 83       	st	Z, r24
	*c2 = temp;
    17e2:	ec 81       	ldd	r30, Y+4	; 0x04
    17e4:	fd 81       	ldd	r31, Y+5	; 0x05
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	80 83       	st	Z, r24
	temp = 0;
    17ea:	19 82       	std	Y+1, r1	; 0x01
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <__fixunssfsi>:
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	7b 01       	movw	r14, r22
    1806:	8c 01       	movw	r16, r24
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	5f e4       	ldi	r21, 0x4F	; 79
    1810:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__gesf2>
    1814:	88 23       	and	r24, r24
    1816:	8c f0       	brlt	.+34     	; 0x183a <__fixunssfsi+0x3e>
    1818:	c8 01       	movw	r24, r16
    181a:	b7 01       	movw	r22, r14
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	5f e4       	ldi	r21, 0x4F	; 79
    1824:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__subsf3>
    1828:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__fixsfsi>
    182c:	9b 01       	movw	r18, r22
    182e:	ac 01       	movw	r20, r24
    1830:	20 50       	subi	r18, 0x00	; 0
    1832:	30 40       	sbci	r19, 0x00	; 0
    1834:	40 40       	sbci	r20, 0x00	; 0
    1836:	50 48       	sbci	r21, 0x80	; 128
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <__fixunssfsi+0x4a>
    183a:	c8 01       	movw	r24, r16
    183c:	b7 01       	movw	r22, r14
    183e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__fixsfsi>
    1842:	9b 01       	movw	r18, r22
    1844:	ac 01       	movw	r20, r24
    1846:	b9 01       	movw	r22, r18
    1848:	ca 01       	movw	r24, r20
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	08 95       	ret

00001854 <_fpadd_parts>:
    1854:	a0 e0       	ldi	r26, 0x00	; 0
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e0 e3       	ldi	r30, 0x30	; 48
    185a:	fc e0       	ldi	r31, 0x0C	; 12
    185c:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__prologue_saves__>
    1860:	dc 01       	movw	r26, r24
    1862:	2b 01       	movw	r4, r22
    1864:	fa 01       	movw	r30, r20
    1866:	9c 91       	ld	r25, X
    1868:	92 30       	cpi	r25, 0x02	; 2
    186a:	08 f4       	brcc	.+2      	; 0x186e <_fpadd_parts+0x1a>
    186c:	39 c1       	rjmp	.+626    	; 0x1ae0 <_fpadd_parts+0x28c>
    186e:	eb 01       	movw	r28, r22
    1870:	88 81       	ld	r24, Y
    1872:	82 30       	cpi	r24, 0x02	; 2
    1874:	08 f4       	brcc	.+2      	; 0x1878 <_fpadd_parts+0x24>
    1876:	33 c1       	rjmp	.+614    	; 0x1ade <_fpadd_parts+0x28a>
    1878:	94 30       	cpi	r25, 0x04	; 4
    187a:	69 f4       	brne	.+26     	; 0x1896 <_fpadd_parts+0x42>
    187c:	84 30       	cpi	r24, 0x04	; 4
    187e:	09 f0       	breq	.+2      	; 0x1882 <_fpadd_parts+0x2e>
    1880:	2f c1       	rjmp	.+606    	; 0x1ae0 <_fpadd_parts+0x28c>
    1882:	11 96       	adiw	r26, 0x01	; 1
    1884:	9c 91       	ld	r25, X
    1886:	11 97       	sbiw	r26, 0x01	; 1
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	98 17       	cp	r25, r24
    188c:	09 f4       	brne	.+2      	; 0x1890 <_fpadd_parts+0x3c>
    188e:	28 c1       	rjmp	.+592    	; 0x1ae0 <_fpadd_parts+0x28c>
    1890:	ae e5       	ldi	r26, 0x5E	; 94
    1892:	b2 e0       	ldi	r27, 0x02	; 2
    1894:	25 c1       	rjmp	.+586    	; 0x1ae0 <_fpadd_parts+0x28c>
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	09 f4       	brne	.+2      	; 0x189c <_fpadd_parts+0x48>
    189a:	21 c1       	rjmp	.+578    	; 0x1ade <_fpadd_parts+0x28a>
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	a9 f4       	brne	.+42     	; 0x18ca <_fpadd_parts+0x76>
    18a0:	92 30       	cpi	r25, 0x02	; 2
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <_fpadd_parts+0x52>
    18a4:	1d c1       	rjmp	.+570    	; 0x1ae0 <_fpadd_parts+0x28c>
    18a6:	9a 01       	movw	r18, r20
    18a8:	ad 01       	movw	r20, r26
    18aa:	88 e0       	ldi	r24, 0x08	; 8
    18ac:	ea 01       	movw	r28, r20
    18ae:	09 90       	ld	r0, Y+
    18b0:	ae 01       	movw	r20, r28
    18b2:	e9 01       	movw	r28, r18
    18b4:	09 92       	st	Y+, r0
    18b6:	9e 01       	movw	r18, r28
    18b8:	81 50       	subi	r24, 0x01	; 1
    18ba:	c1 f7       	brne	.-16     	; 0x18ac <_fpadd_parts+0x58>
    18bc:	e2 01       	movw	r28, r4
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	11 96       	adiw	r26, 0x01	; 1
    18c2:	9c 91       	ld	r25, X
    18c4:	89 23       	and	r24, r25
    18c6:	81 83       	std	Z+1, r24	; 0x01
    18c8:	08 c1       	rjmp	.+528    	; 0x1ada <_fpadd_parts+0x286>
    18ca:	92 30       	cpi	r25, 0x02	; 2
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <_fpadd_parts+0x7c>
    18ce:	07 c1       	rjmp	.+526    	; 0x1ade <_fpadd_parts+0x28a>
    18d0:	12 96       	adiw	r26, 0x02	; 2
    18d2:	2d 90       	ld	r2, X+
    18d4:	3c 90       	ld	r3, X
    18d6:	13 97       	sbiw	r26, 0x03	; 3
    18d8:	eb 01       	movw	r28, r22
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	9b 81       	ldd	r25, Y+3	; 0x03
    18de:	14 96       	adiw	r26, 0x04	; 4
    18e0:	ad 90       	ld	r10, X+
    18e2:	bd 90       	ld	r11, X+
    18e4:	cd 90       	ld	r12, X+
    18e6:	dc 90       	ld	r13, X
    18e8:	17 97       	sbiw	r26, 0x07	; 7
    18ea:	ec 80       	ldd	r14, Y+4	; 0x04
    18ec:	fd 80       	ldd	r15, Y+5	; 0x05
    18ee:	0e 81       	ldd	r16, Y+6	; 0x06
    18f0:	1f 81       	ldd	r17, Y+7	; 0x07
    18f2:	91 01       	movw	r18, r2
    18f4:	28 1b       	sub	r18, r24
    18f6:	39 0b       	sbc	r19, r25
    18f8:	b9 01       	movw	r22, r18
    18fa:	37 ff       	sbrs	r19, 7
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <_fpadd_parts+0xb2>
    18fe:	66 27       	eor	r22, r22
    1900:	77 27       	eor	r23, r23
    1902:	62 1b       	sub	r22, r18
    1904:	73 0b       	sbc	r23, r19
    1906:	60 32       	cpi	r22, 0x20	; 32
    1908:	71 05       	cpc	r23, r1
    190a:	0c f0       	brlt	.+2      	; 0x190e <_fpadd_parts+0xba>
    190c:	61 c0       	rjmp	.+194    	; 0x19d0 <_fpadd_parts+0x17c>
    190e:	12 16       	cp	r1, r18
    1910:	13 06       	cpc	r1, r19
    1912:	6c f5       	brge	.+90     	; 0x196e <_fpadd_parts+0x11a>
    1914:	37 01       	movw	r6, r14
    1916:	48 01       	movw	r8, r16
    1918:	06 2e       	mov	r0, r22
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <_fpadd_parts+0xd0>
    191c:	96 94       	lsr	r9
    191e:	87 94       	ror	r8
    1920:	77 94       	ror	r7
    1922:	67 94       	ror	r6
    1924:	0a 94       	dec	r0
    1926:	d2 f7       	brpl	.-12     	; 0x191c <_fpadd_parts+0xc8>
    1928:	21 e0       	ldi	r18, 0x01	; 1
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	04 c0       	rjmp	.+8      	; 0x193a <_fpadd_parts+0xe6>
    1932:	22 0f       	add	r18, r18
    1934:	33 1f       	adc	r19, r19
    1936:	44 1f       	adc	r20, r20
    1938:	55 1f       	adc	r21, r21
    193a:	6a 95       	dec	r22
    193c:	d2 f7       	brpl	.-12     	; 0x1932 <_fpadd_parts+0xde>
    193e:	21 50       	subi	r18, 0x01	; 1
    1940:	30 40       	sbci	r19, 0x00	; 0
    1942:	40 40       	sbci	r20, 0x00	; 0
    1944:	50 40       	sbci	r21, 0x00	; 0
    1946:	2e 21       	and	r18, r14
    1948:	3f 21       	and	r19, r15
    194a:	40 23       	and	r20, r16
    194c:	51 23       	and	r21, r17
    194e:	21 15       	cp	r18, r1
    1950:	31 05       	cpc	r19, r1
    1952:	41 05       	cpc	r20, r1
    1954:	51 05       	cpc	r21, r1
    1956:	21 f0       	breq	.+8      	; 0x1960 <_fpadd_parts+0x10c>
    1958:	21 e0       	ldi	r18, 0x01	; 1
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	79 01       	movw	r14, r18
    1962:	8a 01       	movw	r16, r20
    1964:	e6 28       	or	r14, r6
    1966:	f7 28       	or	r15, r7
    1968:	08 29       	or	r16, r8
    196a:	19 29       	or	r17, r9
    196c:	3c c0       	rjmp	.+120    	; 0x19e6 <_fpadd_parts+0x192>
    196e:	23 2b       	or	r18, r19
    1970:	d1 f1       	breq	.+116    	; 0x19e6 <_fpadd_parts+0x192>
    1972:	26 0e       	add	r2, r22
    1974:	37 1e       	adc	r3, r23
    1976:	35 01       	movw	r6, r10
    1978:	46 01       	movw	r8, r12
    197a:	06 2e       	mov	r0, r22
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <_fpadd_parts+0x132>
    197e:	96 94       	lsr	r9
    1980:	87 94       	ror	r8
    1982:	77 94       	ror	r7
    1984:	67 94       	ror	r6
    1986:	0a 94       	dec	r0
    1988:	d2 f7       	brpl	.-12     	; 0x197e <_fpadd_parts+0x12a>
    198a:	21 e0       	ldi	r18, 0x01	; 1
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	04 c0       	rjmp	.+8      	; 0x199c <_fpadd_parts+0x148>
    1994:	22 0f       	add	r18, r18
    1996:	33 1f       	adc	r19, r19
    1998:	44 1f       	adc	r20, r20
    199a:	55 1f       	adc	r21, r21
    199c:	6a 95       	dec	r22
    199e:	d2 f7       	brpl	.-12     	; 0x1994 <_fpadd_parts+0x140>
    19a0:	21 50       	subi	r18, 0x01	; 1
    19a2:	30 40       	sbci	r19, 0x00	; 0
    19a4:	40 40       	sbci	r20, 0x00	; 0
    19a6:	50 40       	sbci	r21, 0x00	; 0
    19a8:	2a 21       	and	r18, r10
    19aa:	3b 21       	and	r19, r11
    19ac:	4c 21       	and	r20, r12
    19ae:	5d 21       	and	r21, r13
    19b0:	21 15       	cp	r18, r1
    19b2:	31 05       	cpc	r19, r1
    19b4:	41 05       	cpc	r20, r1
    19b6:	51 05       	cpc	r21, r1
    19b8:	21 f0       	breq	.+8      	; 0x19c2 <_fpadd_parts+0x16e>
    19ba:	21 e0       	ldi	r18, 0x01	; 1
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	59 01       	movw	r10, r18
    19c4:	6a 01       	movw	r12, r20
    19c6:	a6 28       	or	r10, r6
    19c8:	b7 28       	or	r11, r7
    19ca:	c8 28       	or	r12, r8
    19cc:	d9 28       	or	r13, r9
    19ce:	0b c0       	rjmp	.+22     	; 0x19e6 <_fpadd_parts+0x192>
    19d0:	82 15       	cp	r24, r2
    19d2:	93 05       	cpc	r25, r3
    19d4:	2c f0       	brlt	.+10     	; 0x19e0 <_fpadd_parts+0x18c>
    19d6:	1c 01       	movw	r2, r24
    19d8:	aa 24       	eor	r10, r10
    19da:	bb 24       	eor	r11, r11
    19dc:	65 01       	movw	r12, r10
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <_fpadd_parts+0x192>
    19e0:	ee 24       	eor	r14, r14
    19e2:	ff 24       	eor	r15, r15
    19e4:	87 01       	movw	r16, r14
    19e6:	11 96       	adiw	r26, 0x01	; 1
    19e8:	9c 91       	ld	r25, X
    19ea:	d2 01       	movw	r26, r4
    19ec:	11 96       	adiw	r26, 0x01	; 1
    19ee:	8c 91       	ld	r24, X
    19f0:	98 17       	cp	r25, r24
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <_fpadd_parts+0x1a2>
    19f4:	45 c0       	rjmp	.+138    	; 0x1a80 <_fpadd_parts+0x22c>
    19f6:	99 23       	and	r25, r25
    19f8:	39 f0       	breq	.+14     	; 0x1a08 <_fpadd_parts+0x1b4>
    19fa:	a8 01       	movw	r20, r16
    19fc:	97 01       	movw	r18, r14
    19fe:	2a 19       	sub	r18, r10
    1a00:	3b 09       	sbc	r19, r11
    1a02:	4c 09       	sbc	r20, r12
    1a04:	5d 09       	sbc	r21, r13
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <_fpadd_parts+0x1c0>
    1a08:	a6 01       	movw	r20, r12
    1a0a:	95 01       	movw	r18, r10
    1a0c:	2e 19       	sub	r18, r14
    1a0e:	3f 09       	sbc	r19, r15
    1a10:	40 0b       	sbc	r20, r16
    1a12:	51 0b       	sbc	r21, r17
    1a14:	57 fd       	sbrc	r21, 7
    1a16:	08 c0       	rjmp	.+16     	; 0x1a28 <_fpadd_parts+0x1d4>
    1a18:	11 82       	std	Z+1, r1	; 0x01
    1a1a:	33 82       	std	Z+3, r3	; 0x03
    1a1c:	22 82       	std	Z+2, r2	; 0x02
    1a1e:	24 83       	std	Z+4, r18	; 0x04
    1a20:	35 83       	std	Z+5, r19	; 0x05
    1a22:	46 83       	std	Z+6, r20	; 0x06
    1a24:	57 83       	std	Z+7, r21	; 0x07
    1a26:	1d c0       	rjmp	.+58     	; 0x1a62 <_fpadd_parts+0x20e>
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	81 83       	std	Z+1, r24	; 0x01
    1a2c:	33 82       	std	Z+3, r3	; 0x03
    1a2e:	22 82       	std	Z+2, r2	; 0x02
    1a30:	88 27       	eor	r24, r24
    1a32:	99 27       	eor	r25, r25
    1a34:	dc 01       	movw	r26, r24
    1a36:	82 1b       	sub	r24, r18
    1a38:	93 0b       	sbc	r25, r19
    1a3a:	a4 0b       	sbc	r26, r20
    1a3c:	b5 0b       	sbc	r27, r21
    1a3e:	84 83       	std	Z+4, r24	; 0x04
    1a40:	95 83       	std	Z+5, r25	; 0x05
    1a42:	a6 83       	std	Z+6, r26	; 0x06
    1a44:	b7 83       	std	Z+7, r27	; 0x07
    1a46:	0d c0       	rjmp	.+26     	; 0x1a62 <_fpadd_parts+0x20e>
    1a48:	22 0f       	add	r18, r18
    1a4a:	33 1f       	adc	r19, r19
    1a4c:	44 1f       	adc	r20, r20
    1a4e:	55 1f       	adc	r21, r21
    1a50:	24 83       	std	Z+4, r18	; 0x04
    1a52:	35 83       	std	Z+5, r19	; 0x05
    1a54:	46 83       	std	Z+6, r20	; 0x06
    1a56:	57 83       	std	Z+7, r21	; 0x07
    1a58:	82 81       	ldd	r24, Z+2	; 0x02
    1a5a:	93 81       	ldd	r25, Z+3	; 0x03
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	93 83       	std	Z+3, r25	; 0x03
    1a60:	82 83       	std	Z+2, r24	; 0x02
    1a62:	24 81       	ldd	r18, Z+4	; 0x04
    1a64:	35 81       	ldd	r19, Z+5	; 0x05
    1a66:	46 81       	ldd	r20, Z+6	; 0x06
    1a68:	57 81       	ldd	r21, Z+7	; 0x07
    1a6a:	da 01       	movw	r26, r20
    1a6c:	c9 01       	movw	r24, r18
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	a1 09       	sbc	r26, r1
    1a72:	b1 09       	sbc	r27, r1
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	9f 4f       	sbci	r25, 0xFF	; 255
    1a78:	af 4f       	sbci	r26, 0xFF	; 255
    1a7a:	bf 43       	sbci	r27, 0x3F	; 63
    1a7c:	28 f3       	brcs	.-54     	; 0x1a48 <_fpadd_parts+0x1f4>
    1a7e:	0b c0       	rjmp	.+22     	; 0x1a96 <_fpadd_parts+0x242>
    1a80:	91 83       	std	Z+1, r25	; 0x01
    1a82:	33 82       	std	Z+3, r3	; 0x03
    1a84:	22 82       	std	Z+2, r2	; 0x02
    1a86:	ea 0c       	add	r14, r10
    1a88:	fb 1c       	adc	r15, r11
    1a8a:	0c 1d       	adc	r16, r12
    1a8c:	1d 1d       	adc	r17, r13
    1a8e:	e4 82       	std	Z+4, r14	; 0x04
    1a90:	f5 82       	std	Z+5, r15	; 0x05
    1a92:	06 83       	std	Z+6, r16	; 0x06
    1a94:	17 83       	std	Z+7, r17	; 0x07
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	80 83       	st	Z, r24
    1a9a:	24 81       	ldd	r18, Z+4	; 0x04
    1a9c:	35 81       	ldd	r19, Z+5	; 0x05
    1a9e:	46 81       	ldd	r20, Z+6	; 0x06
    1aa0:	57 81       	ldd	r21, Z+7	; 0x07
    1aa2:	57 ff       	sbrs	r21, 7
    1aa4:	1a c0       	rjmp	.+52     	; 0x1ada <_fpadd_parts+0x286>
    1aa6:	c9 01       	movw	r24, r18
    1aa8:	aa 27       	eor	r26, r26
    1aaa:	97 fd       	sbrc	r25, 7
    1aac:	a0 95       	com	r26
    1aae:	ba 2f       	mov	r27, r26
    1ab0:	81 70       	andi	r24, 0x01	; 1
    1ab2:	90 70       	andi	r25, 0x00	; 0
    1ab4:	a0 70       	andi	r26, 0x00	; 0
    1ab6:	b0 70       	andi	r27, 0x00	; 0
    1ab8:	56 95       	lsr	r21
    1aba:	47 95       	ror	r20
    1abc:	37 95       	ror	r19
    1abe:	27 95       	ror	r18
    1ac0:	82 2b       	or	r24, r18
    1ac2:	93 2b       	or	r25, r19
    1ac4:	a4 2b       	or	r26, r20
    1ac6:	b5 2b       	or	r27, r21
    1ac8:	84 83       	std	Z+4, r24	; 0x04
    1aca:	95 83       	std	Z+5, r25	; 0x05
    1acc:	a6 83       	std	Z+6, r26	; 0x06
    1ace:	b7 83       	std	Z+7, r27	; 0x07
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	93 83       	std	Z+3, r25	; 0x03
    1ad8:	82 83       	std	Z+2, r24	; 0x02
    1ada:	df 01       	movw	r26, r30
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <_fpadd_parts+0x28c>
    1ade:	d2 01       	movw	r26, r4
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	e2 e1       	ldi	r30, 0x12	; 18
    1ae8:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__epilogue_restores__>

00001aec <__subsf3>:
    1aec:	a0 e2       	ldi	r26, 0x20	; 32
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	ec e7       	ldi	r30, 0x7C	; 124
    1af2:	fd e0       	ldi	r31, 0x0D	; 13
    1af4:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x18>
    1af8:	69 83       	std	Y+1, r22	; 0x01
    1afa:	7a 83       	std	Y+2, r23	; 0x02
    1afc:	8b 83       	std	Y+3, r24	; 0x03
    1afe:	9c 83       	std	Y+4, r25	; 0x04
    1b00:	2d 83       	std	Y+5, r18	; 0x05
    1b02:	3e 83       	std	Y+6, r19	; 0x06
    1b04:	4f 83       	std	Y+7, r20	; 0x07
    1b06:	58 87       	std	Y+8, r21	; 0x08
    1b08:	e9 e0       	ldi	r30, 0x09	; 9
    1b0a:	ee 2e       	mov	r14, r30
    1b0c:	f1 2c       	mov	r15, r1
    1b0e:	ec 0e       	add	r14, r28
    1b10:	fd 1e       	adc	r15, r29
    1b12:	ce 01       	movw	r24, r28
    1b14:	01 96       	adiw	r24, 0x01	; 1
    1b16:	b7 01       	movw	r22, r14
    1b18:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1b1c:	8e 01       	movw	r16, r28
    1b1e:	0f 5e       	subi	r16, 0xEF	; 239
    1b20:	1f 4f       	sbci	r17, 0xFF	; 255
    1b22:	ce 01       	movw	r24, r28
    1b24:	05 96       	adiw	r24, 0x05	; 5
    1b26:	b8 01       	movw	r22, r16
    1b28:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1b2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	89 27       	eor	r24, r25
    1b32:	8a 8b       	std	Y+18, r24	; 0x12
    1b34:	c7 01       	movw	r24, r14
    1b36:	b8 01       	movw	r22, r16
    1b38:	ae 01       	movw	r20, r28
    1b3a:	47 5e       	subi	r20, 0xE7	; 231
    1b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <_fpadd_parts>
    1b42:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__pack_f>
    1b46:	a0 96       	adiw	r28, 0x20	; 32
    1b48:	e6 e0       	ldi	r30, 0x06	; 6
    1b4a:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x18>

00001b4e <__addsf3>:
    1b4e:	a0 e2       	ldi	r26, 0x20	; 32
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	ed ea       	ldi	r30, 0xAD	; 173
    1b54:	fd e0       	ldi	r31, 0x0D	; 13
    1b56:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x18>
    1b5a:	69 83       	std	Y+1, r22	; 0x01
    1b5c:	7a 83       	std	Y+2, r23	; 0x02
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	2d 83       	std	Y+5, r18	; 0x05
    1b64:	3e 83       	std	Y+6, r19	; 0x06
    1b66:	4f 83       	std	Y+7, r20	; 0x07
    1b68:	58 87       	std	Y+8, r21	; 0x08
    1b6a:	f9 e0       	ldi	r31, 0x09	; 9
    1b6c:	ef 2e       	mov	r14, r31
    1b6e:	f1 2c       	mov	r15, r1
    1b70:	ec 0e       	add	r14, r28
    1b72:	fd 1e       	adc	r15, r29
    1b74:	ce 01       	movw	r24, r28
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	b7 01       	movw	r22, r14
    1b7a:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1b7e:	8e 01       	movw	r16, r28
    1b80:	0f 5e       	subi	r16, 0xEF	; 239
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	ce 01       	movw	r24, r28
    1b86:	05 96       	adiw	r24, 0x05	; 5
    1b88:	b8 01       	movw	r22, r16
    1b8a:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1b8e:	c7 01       	movw	r24, r14
    1b90:	b8 01       	movw	r22, r16
    1b92:	ae 01       	movw	r20, r28
    1b94:	47 5e       	subi	r20, 0xE7	; 231
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	0e 94 2a 0c 	call	0x1854	; 0x1854 <_fpadd_parts>
    1b9c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__pack_f>
    1ba0:	a0 96       	adiw	r28, 0x20	; 32
    1ba2:	e6 e0       	ldi	r30, 0x06	; 6
    1ba4:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x18>

00001ba8 <__mulsf3>:
    1ba8:	a0 e2       	ldi	r26, 0x20	; 32
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ea ed       	ldi	r30, 0xDA	; 218
    1bae:	fd e0       	ldi	r31, 0x0D	; 13
    1bb0:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__prologue_saves__>
    1bb4:	69 83       	std	Y+1, r22	; 0x01
    1bb6:	7a 83       	std	Y+2, r23	; 0x02
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
    1bba:	9c 83       	std	Y+4, r25	; 0x04
    1bbc:	2d 83       	std	Y+5, r18	; 0x05
    1bbe:	3e 83       	std	Y+6, r19	; 0x06
    1bc0:	4f 83       	std	Y+7, r20	; 0x07
    1bc2:	58 87       	std	Y+8, r21	; 0x08
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	be 01       	movw	r22, r28
    1bca:	67 5f       	subi	r22, 0xF7	; 247
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	05 96       	adiw	r24, 0x05	; 5
    1bd6:	be 01       	movw	r22, r28
    1bd8:	6f 5e       	subi	r22, 0xEF	; 239
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
    1bdc:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1be0:	99 85       	ldd	r25, Y+9	; 0x09
    1be2:	92 30       	cpi	r25, 0x02	; 2
    1be4:	88 f0       	brcs	.+34     	; 0x1c08 <__mulsf3+0x60>
    1be6:	89 89       	ldd	r24, Y+17	; 0x11
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	c8 f0       	brcs	.+50     	; 0x1c1e <__mulsf3+0x76>
    1bec:	94 30       	cpi	r25, 0x04	; 4
    1bee:	19 f4       	brne	.+6      	; 0x1bf6 <__mulsf3+0x4e>
    1bf0:	82 30       	cpi	r24, 0x02	; 2
    1bf2:	51 f4       	brne	.+20     	; 0x1c08 <__mulsf3+0x60>
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <__mulsf3+0x56>
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	29 f4       	brne	.+10     	; 0x1c04 <__mulsf3+0x5c>
    1bfa:	92 30       	cpi	r25, 0x02	; 2
    1bfc:	81 f4       	brne	.+32     	; 0x1c1e <__mulsf3+0x76>
    1bfe:	8e e5       	ldi	r24, 0x5E	; 94
    1c00:	92 e0       	ldi	r25, 0x02	; 2
    1c02:	c6 c0       	rjmp	.+396    	; 0x1d90 <__mulsf3+0x1e8>
    1c04:	92 30       	cpi	r25, 0x02	; 2
    1c06:	49 f4       	brne	.+18     	; 0x1c1a <__mulsf3+0x72>
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c0e:	98 13       	cpse	r25, r24
    1c10:	21 e0       	ldi	r18, 0x01	; 1
    1c12:	2a 87       	std	Y+10, r18	; 0x0a
    1c14:	ce 01       	movw	r24, r28
    1c16:	09 96       	adiw	r24, 0x09	; 9
    1c18:	bb c0       	rjmp	.+374    	; 0x1d90 <__mulsf3+0x1e8>
    1c1a:	82 30       	cpi	r24, 0x02	; 2
    1c1c:	49 f4       	brne	.+18     	; 0x1c30 <__mulsf3+0x88>
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c22:	8a 89       	ldd	r24, Y+18	; 0x12
    1c24:	98 13       	cpse	r25, r24
    1c26:	21 e0       	ldi	r18, 0x01	; 1
    1c28:	2a 8b       	std	Y+18, r18	; 0x12
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	41 96       	adiw	r24, 0x11	; 17
    1c2e:	b0 c0       	rjmp	.+352    	; 0x1d90 <__mulsf3+0x1e8>
    1c30:	2d 84       	ldd	r2, Y+13	; 0x0d
    1c32:	3e 84       	ldd	r3, Y+14	; 0x0e
    1c34:	4f 84       	ldd	r4, Y+15	; 0x0f
    1c36:	58 88       	ldd	r5, Y+16	; 0x10
    1c38:	6d 88       	ldd	r6, Y+21	; 0x15
    1c3a:	7e 88       	ldd	r7, Y+22	; 0x16
    1c3c:	8f 88       	ldd	r8, Y+23	; 0x17
    1c3e:	98 8c       	ldd	r9, Y+24	; 0x18
    1c40:	ee 24       	eor	r14, r14
    1c42:	ff 24       	eor	r15, r15
    1c44:	87 01       	movw	r16, r14
    1c46:	aa 24       	eor	r10, r10
    1c48:	bb 24       	eor	r11, r11
    1c4a:	65 01       	movw	r12, r10
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	e0 e0       	ldi	r30, 0x00	; 0
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	c1 01       	movw	r24, r2
    1c5a:	81 70       	andi	r24, 0x01	; 1
    1c5c:	90 70       	andi	r25, 0x00	; 0
    1c5e:	89 2b       	or	r24, r25
    1c60:	e9 f0       	breq	.+58     	; 0x1c9c <__mulsf3+0xf4>
    1c62:	e6 0c       	add	r14, r6
    1c64:	f7 1c       	adc	r15, r7
    1c66:	08 1d       	adc	r16, r8
    1c68:	19 1d       	adc	r17, r9
    1c6a:	9a 01       	movw	r18, r20
    1c6c:	ab 01       	movw	r20, r22
    1c6e:	2a 0d       	add	r18, r10
    1c70:	3b 1d       	adc	r19, r11
    1c72:	4c 1d       	adc	r20, r12
    1c74:	5d 1d       	adc	r21, r13
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e0       	ldi	r26, 0x00	; 0
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e6 14       	cp	r14, r6
    1c80:	f7 04       	cpc	r15, r7
    1c82:	08 05       	cpc	r16, r8
    1c84:	19 05       	cpc	r17, r9
    1c86:	20 f4       	brcc	.+8      	; 0x1c90 <__mulsf3+0xe8>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a0 e0       	ldi	r26, 0x00	; 0
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	ba 01       	movw	r22, r20
    1c92:	a9 01       	movw	r20, r18
    1c94:	48 0f       	add	r20, r24
    1c96:	59 1f       	adc	r21, r25
    1c98:	6a 1f       	adc	r22, r26
    1c9a:	7b 1f       	adc	r23, r27
    1c9c:	aa 0c       	add	r10, r10
    1c9e:	bb 1c       	adc	r11, r11
    1ca0:	cc 1c       	adc	r12, r12
    1ca2:	dd 1c       	adc	r13, r13
    1ca4:	97 fe       	sbrs	r9, 7
    1ca6:	08 c0       	rjmp	.+16     	; 0x1cb8 <__mulsf3+0x110>
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	a8 2a       	or	r10, r24
    1cb2:	b9 2a       	or	r11, r25
    1cb4:	ca 2a       	or	r12, r26
    1cb6:	db 2a       	or	r13, r27
    1cb8:	31 96       	adiw	r30, 0x01	; 1
    1cba:	e0 32       	cpi	r30, 0x20	; 32
    1cbc:	f1 05       	cpc	r31, r1
    1cbe:	49 f0       	breq	.+18     	; 0x1cd2 <__mulsf3+0x12a>
    1cc0:	66 0c       	add	r6, r6
    1cc2:	77 1c       	adc	r7, r7
    1cc4:	88 1c       	adc	r8, r8
    1cc6:	99 1c       	adc	r9, r9
    1cc8:	56 94       	lsr	r5
    1cca:	47 94       	ror	r4
    1ccc:	37 94       	ror	r3
    1cce:	27 94       	ror	r2
    1cd0:	c3 cf       	rjmp	.-122    	; 0x1c58 <__mulsf3+0xb0>
    1cd2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1cd4:	ea 89       	ldd	r30, Y+18	; 0x12
    1cd6:	2b 89       	ldd	r18, Y+19	; 0x13
    1cd8:	3c 89       	ldd	r19, Y+20	; 0x14
    1cda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cde:	28 0f       	add	r18, r24
    1ce0:	39 1f       	adc	r19, r25
    1ce2:	2e 5f       	subi	r18, 0xFE	; 254
    1ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce6:	17 c0       	rjmp	.+46     	; 0x1d16 <__mulsf3+0x16e>
    1ce8:	ca 01       	movw	r24, r20
    1cea:	81 70       	andi	r24, 0x01	; 1
    1cec:	90 70       	andi	r25, 0x00	; 0
    1cee:	89 2b       	or	r24, r25
    1cf0:	61 f0       	breq	.+24     	; 0x1d0a <__mulsf3+0x162>
    1cf2:	16 95       	lsr	r17
    1cf4:	07 95       	ror	r16
    1cf6:	f7 94       	ror	r15
    1cf8:	e7 94       	ror	r14
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a0 e0       	ldi	r26, 0x00	; 0
    1d00:	b0 e8       	ldi	r27, 0x80	; 128
    1d02:	e8 2a       	or	r14, r24
    1d04:	f9 2a       	or	r15, r25
    1d06:	0a 2b       	or	r16, r26
    1d08:	1b 2b       	or	r17, r27
    1d0a:	76 95       	lsr	r23
    1d0c:	67 95       	ror	r22
    1d0e:	57 95       	ror	r21
    1d10:	47 95       	ror	r20
    1d12:	2f 5f       	subi	r18, 0xFF	; 255
    1d14:	3f 4f       	sbci	r19, 0xFF	; 255
    1d16:	77 fd       	sbrc	r23, 7
    1d18:	e7 cf       	rjmp	.-50     	; 0x1ce8 <__mulsf3+0x140>
    1d1a:	0c c0       	rjmp	.+24     	; 0x1d34 <__mulsf3+0x18c>
    1d1c:	44 0f       	add	r20, r20
    1d1e:	55 1f       	adc	r21, r21
    1d20:	66 1f       	adc	r22, r22
    1d22:	77 1f       	adc	r23, r23
    1d24:	17 fd       	sbrc	r17, 7
    1d26:	41 60       	ori	r20, 0x01	; 1
    1d28:	ee 0c       	add	r14, r14
    1d2a:	ff 1c       	adc	r15, r15
    1d2c:	00 1f       	adc	r16, r16
    1d2e:	11 1f       	adc	r17, r17
    1d30:	21 50       	subi	r18, 0x01	; 1
    1d32:	30 40       	sbci	r19, 0x00	; 0
    1d34:	40 30       	cpi	r20, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	59 07       	cpc	r21, r25
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	69 07       	cpc	r22, r25
    1d3e:	90 e4       	ldi	r25, 0x40	; 64
    1d40:	79 07       	cpc	r23, r25
    1d42:	60 f3       	brcs	.-40     	; 0x1d1c <__mulsf3+0x174>
    1d44:	2b 8f       	std	Y+27, r18	; 0x1b
    1d46:	3c 8f       	std	Y+28, r19	; 0x1c
    1d48:	db 01       	movw	r26, r22
    1d4a:	ca 01       	movw	r24, r20
    1d4c:	8f 77       	andi	r24, 0x7F	; 127
    1d4e:	90 70       	andi	r25, 0x00	; 0
    1d50:	a0 70       	andi	r26, 0x00	; 0
    1d52:	b0 70       	andi	r27, 0x00	; 0
    1d54:	80 34       	cpi	r24, 0x40	; 64
    1d56:	91 05       	cpc	r25, r1
    1d58:	a1 05       	cpc	r26, r1
    1d5a:	b1 05       	cpc	r27, r1
    1d5c:	61 f4       	brne	.+24     	; 0x1d76 <__mulsf3+0x1ce>
    1d5e:	47 fd       	sbrc	r20, 7
    1d60:	0a c0       	rjmp	.+20     	; 0x1d76 <__mulsf3+0x1ce>
    1d62:	e1 14       	cp	r14, r1
    1d64:	f1 04       	cpc	r15, r1
    1d66:	01 05       	cpc	r16, r1
    1d68:	11 05       	cpc	r17, r1
    1d6a:	29 f0       	breq	.+10     	; 0x1d76 <__mulsf3+0x1ce>
    1d6c:	40 5c       	subi	r20, 0xC0	; 192
    1d6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d70:	6f 4f       	sbci	r22, 0xFF	; 255
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	40 78       	andi	r20, 0x80	; 128
    1d76:	1a 8e       	std	Y+26, r1	; 0x1a
    1d78:	fe 17       	cp	r31, r30
    1d7a:	11 f0       	breq	.+4      	; 0x1d80 <__mulsf3+0x1d8>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	8a 8f       	std	Y+26, r24	; 0x1a
    1d80:	4d 8f       	std	Y+29, r20	; 0x1d
    1d82:	5e 8f       	std	Y+30, r21	; 0x1e
    1d84:	6f 8f       	std	Y+31, r22	; 0x1f
    1d86:	78 a3       	std	Y+32, r23	; 0x20
    1d88:	83 e0       	ldi	r24, 0x03	; 3
    1d8a:	89 8f       	std	Y+25, r24	; 0x19
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	49 96       	adiw	r24, 0x19	; 25
    1d90:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__pack_f>
    1d94:	a0 96       	adiw	r28, 0x20	; 32
    1d96:	e2 e1       	ldi	r30, 0x12	; 18
    1d98:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__epilogue_restores__>

00001d9c <__gtsf2>:
    1d9c:	a8 e1       	ldi	r26, 0x18	; 24
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e4 ed       	ldi	r30, 0xD4	; 212
    1da2:	fe e0       	ldi	r31, 0x0E	; 14
    1da4:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x18>
    1da8:	69 83       	std	Y+1, r22	; 0x01
    1daa:	7a 83       	std	Y+2, r23	; 0x02
    1dac:	8b 83       	std	Y+3, r24	; 0x03
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	2d 83       	std	Y+5, r18	; 0x05
    1db2:	3e 83       	std	Y+6, r19	; 0x06
    1db4:	4f 83       	std	Y+7, r20	; 0x07
    1db6:	58 87       	std	Y+8, r21	; 0x08
    1db8:	89 e0       	ldi	r24, 0x09	; 9
    1dba:	e8 2e       	mov	r14, r24
    1dbc:	f1 2c       	mov	r15, r1
    1dbe:	ec 0e       	add	r14, r28
    1dc0:	fd 1e       	adc	r15, r29
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	01 96       	adiw	r24, 0x01	; 1
    1dc6:	b7 01       	movw	r22, r14
    1dc8:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1dcc:	8e 01       	movw	r16, r28
    1dce:	0f 5e       	subi	r16, 0xEF	; 239
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	05 96       	adiw	r24, 0x05	; 5
    1dd6:	b8 01       	movw	r22, r16
    1dd8:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	40 f0       	brcs	.+16     	; 0x1df2 <__gtsf2+0x56>
    1de2:	89 89       	ldd	r24, Y+17	; 0x11
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	28 f0       	brcs	.+10     	; 0x1df2 <__gtsf2+0x56>
    1de8:	c7 01       	movw	r24, r14
    1dea:	b8 01       	movw	r22, r16
    1dec:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__fpcmp_parts_f>
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <__gtsf2+0x58>
    1df2:	8f ef       	ldi	r24, 0xFF	; 255
    1df4:	68 96       	adiw	r28, 0x18	; 24
    1df6:	e6 e0       	ldi	r30, 0x06	; 6
    1df8:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x18>

00001dfc <__gesf2>:
    1dfc:	a8 e1       	ldi	r26, 0x18	; 24
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e4 e0       	ldi	r30, 0x04	; 4
    1e02:	ff e0       	ldi	r31, 0x0F	; 15
    1e04:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x18>
    1e08:	69 83       	std	Y+1, r22	; 0x01
    1e0a:	7a 83       	std	Y+2, r23	; 0x02
    1e0c:	8b 83       	std	Y+3, r24	; 0x03
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	2d 83       	std	Y+5, r18	; 0x05
    1e12:	3e 83       	std	Y+6, r19	; 0x06
    1e14:	4f 83       	std	Y+7, r20	; 0x07
    1e16:	58 87       	std	Y+8, r21	; 0x08
    1e18:	89 e0       	ldi	r24, 0x09	; 9
    1e1a:	e8 2e       	mov	r14, r24
    1e1c:	f1 2c       	mov	r15, r1
    1e1e:	ec 0e       	add	r14, r28
    1e20:	fd 1e       	adc	r15, r29
    1e22:	ce 01       	movw	r24, r28
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	b7 01       	movw	r22, r14
    1e28:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1e2c:	8e 01       	movw	r16, r28
    1e2e:	0f 5e       	subi	r16, 0xEF	; 239
    1e30:	1f 4f       	sbci	r17, 0xFF	; 255
    1e32:	ce 01       	movw	r24, r28
    1e34:	05 96       	adiw	r24, 0x05	; 5
    1e36:	b8 01       	movw	r22, r16
    1e38:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	40 f0       	brcs	.+16     	; 0x1e52 <__gesf2+0x56>
    1e42:	89 89       	ldd	r24, Y+17	; 0x11
    1e44:	82 30       	cpi	r24, 0x02	; 2
    1e46:	28 f0       	brcs	.+10     	; 0x1e52 <__gesf2+0x56>
    1e48:	c7 01       	movw	r24, r14
    1e4a:	b8 01       	movw	r22, r16
    1e4c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__fpcmp_parts_f>
    1e50:	01 c0       	rjmp	.+2      	; 0x1e54 <__gesf2+0x58>
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	68 96       	adiw	r28, 0x18	; 24
    1e56:	e6 e0       	ldi	r30, 0x06	; 6
    1e58:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x18>

00001e5c <__ltsf2>:
    1e5c:	a8 e1       	ldi	r26, 0x18	; 24
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e4 e3       	ldi	r30, 0x34	; 52
    1e62:	ff e0       	ldi	r31, 0x0F	; 15
    1e64:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x18>
    1e68:	69 83       	std	Y+1, r22	; 0x01
    1e6a:	7a 83       	std	Y+2, r23	; 0x02
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
    1e6e:	9c 83       	std	Y+4, r25	; 0x04
    1e70:	2d 83       	std	Y+5, r18	; 0x05
    1e72:	3e 83       	std	Y+6, r19	; 0x06
    1e74:	4f 83       	std	Y+7, r20	; 0x07
    1e76:	58 87       	std	Y+8, r21	; 0x08
    1e78:	89 e0       	ldi	r24, 0x09	; 9
    1e7a:	e8 2e       	mov	r14, r24
    1e7c:	f1 2c       	mov	r15, r1
    1e7e:	ec 0e       	add	r14, r28
    1e80:	fd 1e       	adc	r15, r29
    1e82:	ce 01       	movw	r24, r28
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	b7 01       	movw	r22, r14
    1e88:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1e8c:	8e 01       	movw	r16, r28
    1e8e:	0f 5e       	subi	r16, 0xEF	; 239
    1e90:	1f 4f       	sbci	r17, 0xFF	; 255
    1e92:	ce 01       	movw	r24, r28
    1e94:	05 96       	adiw	r24, 0x05	; 5
    1e96:	b8 01       	movw	r22, r16
    1e98:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	82 30       	cpi	r24, 0x02	; 2
    1ea0:	40 f0       	brcs	.+16     	; 0x1eb2 <__ltsf2+0x56>
    1ea2:	89 89       	ldd	r24, Y+17	; 0x11
    1ea4:	82 30       	cpi	r24, 0x02	; 2
    1ea6:	28 f0       	brcs	.+10     	; 0x1eb2 <__ltsf2+0x56>
    1ea8:	c7 01       	movw	r24, r14
    1eaa:	b8 01       	movw	r22, r16
    1eac:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__fpcmp_parts_f>
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <__ltsf2+0x58>
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	68 96       	adiw	r28, 0x18	; 24
    1eb6:	e6 e0       	ldi	r30, 0x06	; 6
    1eb8:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x18>

00001ebc <__fixsfsi>:
    1ebc:	ac e0       	ldi	r26, 0x0C	; 12
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e4 e6       	ldi	r30, 0x64	; 100
    1ec2:	ff e0       	ldi	r31, 0x0F	; 15
    1ec4:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__+0x20>
    1ec8:	69 83       	std	Y+1, r22	; 0x01
    1eca:	7a 83       	std	Y+2, r23	; 0x02
    1ecc:	8b 83       	std	Y+3, r24	; 0x03
    1ece:	9c 83       	std	Y+4, r25	; 0x04
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	be 01       	movw	r22, r28
    1ed6:	6b 5f       	subi	r22, 0xFB	; 251
    1ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eda:	0e 94 87 10 	call	0x210e	; 0x210e <__unpack_f>
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	61 f1       	breq	.+88     	; 0x1f3c <__fixsfsi+0x80>
    1ee4:	82 30       	cpi	r24, 0x02	; 2
    1ee6:	50 f1       	brcs	.+84     	; 0x1f3c <__fixsfsi+0x80>
    1ee8:	84 30       	cpi	r24, 0x04	; 4
    1eea:	21 f4       	brne	.+8      	; 0x1ef4 <__fixsfsi+0x38>
    1eec:	8e 81       	ldd	r24, Y+6	; 0x06
    1eee:	88 23       	and	r24, r24
    1ef0:	51 f1       	breq	.+84     	; 0x1f46 <__fixsfsi+0x8a>
    1ef2:	2e c0       	rjmp	.+92     	; 0x1f50 <__fixsfsi+0x94>
    1ef4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ef6:	38 85       	ldd	r19, Y+8	; 0x08
    1ef8:	37 fd       	sbrc	r19, 7
    1efa:	20 c0       	rjmp	.+64     	; 0x1f3c <__fixsfsi+0x80>
    1efc:	6e 81       	ldd	r22, Y+6	; 0x06
    1efe:	2f 31       	cpi	r18, 0x1F	; 31
    1f00:	31 05       	cpc	r19, r1
    1f02:	1c f0       	brlt	.+6      	; 0x1f0a <__fixsfsi+0x4e>
    1f04:	66 23       	and	r22, r22
    1f06:	f9 f0       	breq	.+62     	; 0x1f46 <__fixsfsi+0x8a>
    1f08:	23 c0       	rjmp	.+70     	; 0x1f50 <__fixsfsi+0x94>
    1f0a:	8e e1       	ldi	r24, 0x1E	; 30
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	82 1b       	sub	r24, r18
    1f10:	93 0b       	sbc	r25, r19
    1f12:	29 85       	ldd	r18, Y+9	; 0x09
    1f14:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f16:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f18:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f1a:	04 c0       	rjmp	.+8      	; 0x1f24 <__fixsfsi+0x68>
    1f1c:	56 95       	lsr	r21
    1f1e:	47 95       	ror	r20
    1f20:	37 95       	ror	r19
    1f22:	27 95       	ror	r18
    1f24:	8a 95       	dec	r24
    1f26:	d2 f7       	brpl	.-12     	; 0x1f1c <__fixsfsi+0x60>
    1f28:	66 23       	and	r22, r22
    1f2a:	b1 f0       	breq	.+44     	; 0x1f58 <__fixsfsi+0x9c>
    1f2c:	50 95       	com	r21
    1f2e:	40 95       	com	r20
    1f30:	30 95       	com	r19
    1f32:	21 95       	neg	r18
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	4f 4f       	sbci	r20, 0xFF	; 255
    1f38:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3a:	0e c0       	rjmp	.+28     	; 0x1f58 <__fixsfsi+0x9c>
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	09 c0       	rjmp	.+18     	; 0x1f58 <__fixsfsi+0x9c>
    1f46:	2f ef       	ldi	r18, 0xFF	; 255
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f ef       	ldi	r20, 0xFF	; 255
    1f4c:	5f e7       	ldi	r21, 0x7F	; 127
    1f4e:	04 c0       	rjmp	.+8      	; 0x1f58 <__fixsfsi+0x9c>
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	50 e8       	ldi	r21, 0x80	; 128
    1f58:	b9 01       	movw	r22, r18
    1f5a:	ca 01       	movw	r24, r20
    1f5c:	2c 96       	adiw	r28, 0x0c	; 12
    1f5e:	e2 e0       	ldi	r30, 0x02	; 2
    1f60:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__+0x20>

00001f64 <__pack_f>:
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	fc 01       	movw	r30, r24
    1f70:	e4 80       	ldd	r14, Z+4	; 0x04
    1f72:	f5 80       	ldd	r15, Z+5	; 0x05
    1f74:	06 81       	ldd	r16, Z+6	; 0x06
    1f76:	17 81       	ldd	r17, Z+7	; 0x07
    1f78:	d1 80       	ldd	r13, Z+1	; 0x01
    1f7a:	80 81       	ld	r24, Z
    1f7c:	82 30       	cpi	r24, 0x02	; 2
    1f7e:	48 f4       	brcc	.+18     	; 0x1f92 <__pack_f+0x2e>
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	a0 e1       	ldi	r26, 0x10	; 16
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e8 2a       	or	r14, r24
    1f8a:	f9 2a       	or	r15, r25
    1f8c:	0a 2b       	or	r16, r26
    1f8e:	1b 2b       	or	r17, r27
    1f90:	a5 c0       	rjmp	.+330    	; 0x20dc <__pack_f+0x178>
    1f92:	84 30       	cpi	r24, 0x04	; 4
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <__pack_f+0x34>
    1f96:	9f c0       	rjmp	.+318    	; 0x20d6 <__pack_f+0x172>
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	21 f4       	brne	.+8      	; 0x1fa4 <__pack_f+0x40>
    1f9c:	ee 24       	eor	r14, r14
    1f9e:	ff 24       	eor	r15, r15
    1fa0:	87 01       	movw	r16, r14
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <__pack_f+0x4a>
    1fa4:	e1 14       	cp	r14, r1
    1fa6:	f1 04       	cpc	r15, r1
    1fa8:	01 05       	cpc	r16, r1
    1faa:	11 05       	cpc	r17, r1
    1fac:	19 f4       	brne	.+6      	; 0x1fb4 <__pack_f+0x50>
    1fae:	e0 e0       	ldi	r30, 0x00	; 0
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	96 c0       	rjmp	.+300    	; 0x20e0 <__pack_f+0x17c>
    1fb4:	62 81       	ldd	r22, Z+2	; 0x02
    1fb6:	73 81       	ldd	r23, Z+3	; 0x03
    1fb8:	9f ef       	ldi	r25, 0xFF	; 255
    1fba:	62 38       	cpi	r22, 0x82	; 130
    1fbc:	79 07       	cpc	r23, r25
    1fbe:	0c f0       	brlt	.+2      	; 0x1fc2 <__pack_f+0x5e>
    1fc0:	5b c0       	rjmp	.+182    	; 0x2078 <__pack_f+0x114>
    1fc2:	22 e8       	ldi	r18, 0x82	; 130
    1fc4:	3f ef       	ldi	r19, 0xFF	; 255
    1fc6:	26 1b       	sub	r18, r22
    1fc8:	37 0b       	sbc	r19, r23
    1fca:	2a 31       	cpi	r18, 0x1A	; 26
    1fcc:	31 05       	cpc	r19, r1
    1fce:	2c f0       	brlt	.+10     	; 0x1fda <__pack_f+0x76>
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
    1fd8:	2a c0       	rjmp	.+84     	; 0x202e <__pack_f+0xca>
    1fda:	b8 01       	movw	r22, r16
    1fdc:	a7 01       	movw	r20, r14
    1fde:	02 2e       	mov	r0, r18
    1fe0:	04 c0       	rjmp	.+8      	; 0x1fea <__pack_f+0x86>
    1fe2:	76 95       	lsr	r23
    1fe4:	67 95       	ror	r22
    1fe6:	57 95       	ror	r21
    1fe8:	47 95       	ror	r20
    1fea:	0a 94       	dec	r0
    1fec:	d2 f7       	brpl	.-12     	; 0x1fe2 <__pack_f+0x7e>
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e0       	ldi	r26, 0x00	; 0
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	04 c0       	rjmp	.+8      	; 0x2000 <__pack_f+0x9c>
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	aa 1f       	adc	r26, r26
    1ffe:	bb 1f       	adc	r27, r27
    2000:	2a 95       	dec	r18
    2002:	d2 f7       	brpl	.-12     	; 0x1ff8 <__pack_f+0x94>
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	a1 09       	sbc	r26, r1
    2008:	b1 09       	sbc	r27, r1
    200a:	8e 21       	and	r24, r14
    200c:	9f 21       	and	r25, r15
    200e:	a0 23       	and	r26, r16
    2010:	b1 23       	and	r27, r17
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	a1 05       	cpc	r26, r1
    2016:	b1 05       	cpc	r27, r1
    2018:	21 f0       	breq	.+8      	; 0x2022 <__pack_f+0xbe>
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	9a 01       	movw	r18, r20
    2024:	ab 01       	movw	r20, r22
    2026:	28 2b       	or	r18, r24
    2028:	39 2b       	or	r19, r25
    202a:	4a 2b       	or	r20, r26
    202c:	5b 2b       	or	r21, r27
    202e:	da 01       	movw	r26, r20
    2030:	c9 01       	movw	r24, r18
    2032:	8f 77       	andi	r24, 0x7F	; 127
    2034:	90 70       	andi	r25, 0x00	; 0
    2036:	a0 70       	andi	r26, 0x00	; 0
    2038:	b0 70       	andi	r27, 0x00	; 0
    203a:	80 34       	cpi	r24, 0x40	; 64
    203c:	91 05       	cpc	r25, r1
    203e:	a1 05       	cpc	r26, r1
    2040:	b1 05       	cpc	r27, r1
    2042:	39 f4       	brne	.+14     	; 0x2052 <__pack_f+0xee>
    2044:	27 ff       	sbrs	r18, 7
    2046:	09 c0       	rjmp	.+18     	; 0x205a <__pack_f+0xf6>
    2048:	20 5c       	subi	r18, 0xC0	; 192
    204a:	3f 4f       	sbci	r19, 0xFF	; 255
    204c:	4f 4f       	sbci	r20, 0xFF	; 255
    204e:	5f 4f       	sbci	r21, 0xFF	; 255
    2050:	04 c0       	rjmp	.+8      	; 0x205a <__pack_f+0xf6>
    2052:	21 5c       	subi	r18, 0xC1	; 193
    2054:	3f 4f       	sbci	r19, 0xFF	; 255
    2056:	4f 4f       	sbci	r20, 0xFF	; 255
    2058:	5f 4f       	sbci	r21, 0xFF	; 255
    205a:	e0 e0       	ldi	r30, 0x00	; 0
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	20 30       	cpi	r18, 0x00	; 0
    2060:	a0 e0       	ldi	r26, 0x00	; 0
    2062:	3a 07       	cpc	r19, r26
    2064:	a0 e0       	ldi	r26, 0x00	; 0
    2066:	4a 07       	cpc	r20, r26
    2068:	a0 e4       	ldi	r26, 0x40	; 64
    206a:	5a 07       	cpc	r21, r26
    206c:	10 f0       	brcs	.+4      	; 0x2072 <__pack_f+0x10e>
    206e:	e1 e0       	ldi	r30, 0x01	; 1
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	79 01       	movw	r14, r18
    2074:	8a 01       	movw	r16, r20
    2076:	27 c0       	rjmp	.+78     	; 0x20c6 <__pack_f+0x162>
    2078:	60 38       	cpi	r22, 0x80	; 128
    207a:	71 05       	cpc	r23, r1
    207c:	64 f5       	brge	.+88     	; 0x20d6 <__pack_f+0x172>
    207e:	fb 01       	movw	r30, r22
    2080:	e1 58       	subi	r30, 0x81	; 129
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	d8 01       	movw	r26, r16
    2086:	c7 01       	movw	r24, r14
    2088:	8f 77       	andi	r24, 0x7F	; 127
    208a:	90 70       	andi	r25, 0x00	; 0
    208c:	a0 70       	andi	r26, 0x00	; 0
    208e:	b0 70       	andi	r27, 0x00	; 0
    2090:	80 34       	cpi	r24, 0x40	; 64
    2092:	91 05       	cpc	r25, r1
    2094:	a1 05       	cpc	r26, r1
    2096:	b1 05       	cpc	r27, r1
    2098:	39 f4       	brne	.+14     	; 0x20a8 <__pack_f+0x144>
    209a:	e7 fe       	sbrs	r14, 7
    209c:	0d c0       	rjmp	.+26     	; 0x20b8 <__pack_f+0x154>
    209e:	80 e4       	ldi	r24, 0x40	; 64
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a0 e0       	ldi	r26, 0x00	; 0
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <__pack_f+0x14c>
    20a8:	8f e3       	ldi	r24, 0x3F	; 63
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	a0 e0       	ldi	r26, 0x00	; 0
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e8 0e       	add	r14, r24
    20b2:	f9 1e       	adc	r15, r25
    20b4:	0a 1f       	adc	r16, r26
    20b6:	1b 1f       	adc	r17, r27
    20b8:	17 ff       	sbrs	r17, 7
    20ba:	05 c0       	rjmp	.+10     	; 0x20c6 <__pack_f+0x162>
    20bc:	16 95       	lsr	r17
    20be:	07 95       	ror	r16
    20c0:	f7 94       	ror	r15
    20c2:	e7 94       	ror	r14
    20c4:	31 96       	adiw	r30, 0x01	; 1
    20c6:	87 e0       	ldi	r24, 0x07	; 7
    20c8:	16 95       	lsr	r17
    20ca:	07 95       	ror	r16
    20cc:	f7 94       	ror	r15
    20ce:	e7 94       	ror	r14
    20d0:	8a 95       	dec	r24
    20d2:	d1 f7       	brne	.-12     	; 0x20c8 <__pack_f+0x164>
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <__pack_f+0x17c>
    20d6:	ee 24       	eor	r14, r14
    20d8:	ff 24       	eor	r15, r15
    20da:	87 01       	movw	r16, r14
    20dc:	ef ef       	ldi	r30, 0xFF	; 255
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	6e 2f       	mov	r22, r30
    20e2:	67 95       	ror	r22
    20e4:	66 27       	eor	r22, r22
    20e6:	67 95       	ror	r22
    20e8:	90 2f       	mov	r25, r16
    20ea:	9f 77       	andi	r25, 0x7F	; 127
    20ec:	d7 94       	ror	r13
    20ee:	dd 24       	eor	r13, r13
    20f0:	d7 94       	ror	r13
    20f2:	8e 2f       	mov	r24, r30
    20f4:	86 95       	lsr	r24
    20f6:	49 2f       	mov	r20, r25
    20f8:	46 2b       	or	r20, r22
    20fa:	58 2f       	mov	r21, r24
    20fc:	5d 29       	or	r21, r13
    20fe:	b7 01       	movw	r22, r14
    2100:	ca 01       	movw	r24, r20
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	df 90       	pop	r13
    210c:	08 95       	ret

0000210e <__unpack_f>:
    210e:	fc 01       	movw	r30, r24
    2110:	db 01       	movw	r26, r22
    2112:	40 81       	ld	r20, Z
    2114:	51 81       	ldd	r21, Z+1	; 0x01
    2116:	22 81       	ldd	r18, Z+2	; 0x02
    2118:	62 2f       	mov	r22, r18
    211a:	6f 77       	andi	r22, 0x7F	; 127
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	22 1f       	adc	r18, r18
    2120:	22 27       	eor	r18, r18
    2122:	22 1f       	adc	r18, r18
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	89 2f       	mov	r24, r25
    2128:	88 0f       	add	r24, r24
    212a:	82 2b       	or	r24, r18
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	99 1f       	adc	r25, r25
    2132:	99 27       	eor	r25, r25
    2134:	99 1f       	adc	r25, r25
    2136:	11 96       	adiw	r26, 0x01	; 1
    2138:	9c 93       	st	X, r25
    213a:	11 97       	sbiw	r26, 0x01	; 1
    213c:	21 15       	cp	r18, r1
    213e:	31 05       	cpc	r19, r1
    2140:	a9 f5       	brne	.+106    	; 0x21ac <__unpack_f+0x9e>
    2142:	41 15       	cp	r20, r1
    2144:	51 05       	cpc	r21, r1
    2146:	61 05       	cpc	r22, r1
    2148:	71 05       	cpc	r23, r1
    214a:	11 f4       	brne	.+4      	; 0x2150 <__unpack_f+0x42>
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	37 c0       	rjmp	.+110    	; 0x21be <__unpack_f+0xb0>
    2150:	82 e8       	ldi	r24, 0x82	; 130
    2152:	9f ef       	ldi	r25, 0xFF	; 255
    2154:	13 96       	adiw	r26, 0x03	; 3
    2156:	9c 93       	st	X, r25
    2158:	8e 93       	st	-X, r24
    215a:	12 97       	sbiw	r26, 0x02	; 2
    215c:	9a 01       	movw	r18, r20
    215e:	ab 01       	movw	r20, r22
    2160:	67 e0       	ldi	r22, 0x07	; 7
    2162:	22 0f       	add	r18, r18
    2164:	33 1f       	adc	r19, r19
    2166:	44 1f       	adc	r20, r20
    2168:	55 1f       	adc	r21, r21
    216a:	6a 95       	dec	r22
    216c:	d1 f7       	brne	.-12     	; 0x2162 <__unpack_f+0x54>
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	8c 93       	st	X, r24
    2172:	0d c0       	rjmp	.+26     	; 0x218e <__unpack_f+0x80>
    2174:	22 0f       	add	r18, r18
    2176:	33 1f       	adc	r19, r19
    2178:	44 1f       	adc	r20, r20
    217a:	55 1f       	adc	r21, r21
    217c:	12 96       	adiw	r26, 0x02	; 2
    217e:	8d 91       	ld	r24, X+
    2180:	9c 91       	ld	r25, X
    2182:	13 97       	sbiw	r26, 0x03	; 3
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	13 96       	adiw	r26, 0x03	; 3
    2188:	9c 93       	st	X, r25
    218a:	8e 93       	st	-X, r24
    218c:	12 97       	sbiw	r26, 0x02	; 2
    218e:	20 30       	cpi	r18, 0x00	; 0
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	38 07       	cpc	r19, r24
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	48 07       	cpc	r20, r24
    2198:	80 e4       	ldi	r24, 0x40	; 64
    219a:	58 07       	cpc	r21, r24
    219c:	58 f3       	brcs	.-42     	; 0x2174 <__unpack_f+0x66>
    219e:	14 96       	adiw	r26, 0x04	; 4
    21a0:	2d 93       	st	X+, r18
    21a2:	3d 93       	st	X+, r19
    21a4:	4d 93       	st	X+, r20
    21a6:	5c 93       	st	X, r21
    21a8:	17 97       	sbiw	r26, 0x07	; 7
    21aa:	08 95       	ret
    21ac:	2f 3f       	cpi	r18, 0xFF	; 255
    21ae:	31 05       	cpc	r19, r1
    21b0:	79 f4       	brne	.+30     	; 0x21d0 <__unpack_f+0xc2>
    21b2:	41 15       	cp	r20, r1
    21b4:	51 05       	cpc	r21, r1
    21b6:	61 05       	cpc	r22, r1
    21b8:	71 05       	cpc	r23, r1
    21ba:	19 f4       	brne	.+6      	; 0x21c2 <__unpack_f+0xb4>
    21bc:	84 e0       	ldi	r24, 0x04	; 4
    21be:	8c 93       	st	X, r24
    21c0:	08 95       	ret
    21c2:	64 ff       	sbrs	r22, 4
    21c4:	03 c0       	rjmp	.+6      	; 0x21cc <__unpack_f+0xbe>
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	8c 93       	st	X, r24
    21ca:	12 c0       	rjmp	.+36     	; 0x21f0 <__unpack_f+0xe2>
    21cc:	1c 92       	st	X, r1
    21ce:	10 c0       	rjmp	.+32     	; 0x21f0 <__unpack_f+0xe2>
    21d0:	2f 57       	subi	r18, 0x7F	; 127
    21d2:	30 40       	sbci	r19, 0x00	; 0
    21d4:	13 96       	adiw	r26, 0x03	; 3
    21d6:	3c 93       	st	X, r19
    21d8:	2e 93       	st	-X, r18
    21da:	12 97       	sbiw	r26, 0x02	; 2
    21dc:	83 e0       	ldi	r24, 0x03	; 3
    21de:	8c 93       	st	X, r24
    21e0:	87 e0       	ldi	r24, 0x07	; 7
    21e2:	44 0f       	add	r20, r20
    21e4:	55 1f       	adc	r21, r21
    21e6:	66 1f       	adc	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	8a 95       	dec	r24
    21ec:	d1 f7       	brne	.-12     	; 0x21e2 <__unpack_f+0xd4>
    21ee:	70 64       	ori	r23, 0x40	; 64
    21f0:	14 96       	adiw	r26, 0x04	; 4
    21f2:	4d 93       	st	X+, r20
    21f4:	5d 93       	st	X+, r21
    21f6:	6d 93       	st	X+, r22
    21f8:	7c 93       	st	X, r23
    21fa:	17 97       	sbiw	r26, 0x07	; 7
    21fc:	08 95       	ret

000021fe <__fpcmp_parts_f>:
    21fe:	1f 93       	push	r17
    2200:	dc 01       	movw	r26, r24
    2202:	fb 01       	movw	r30, r22
    2204:	9c 91       	ld	r25, X
    2206:	92 30       	cpi	r25, 0x02	; 2
    2208:	08 f4       	brcc	.+2      	; 0x220c <__fpcmp_parts_f+0xe>
    220a:	47 c0       	rjmp	.+142    	; 0x229a <__fpcmp_parts_f+0x9c>
    220c:	80 81       	ld	r24, Z
    220e:	82 30       	cpi	r24, 0x02	; 2
    2210:	08 f4       	brcc	.+2      	; 0x2214 <__fpcmp_parts_f+0x16>
    2212:	43 c0       	rjmp	.+134    	; 0x229a <__fpcmp_parts_f+0x9c>
    2214:	94 30       	cpi	r25, 0x04	; 4
    2216:	51 f4       	brne	.+20     	; 0x222c <__fpcmp_parts_f+0x2e>
    2218:	11 96       	adiw	r26, 0x01	; 1
    221a:	1c 91       	ld	r17, X
    221c:	84 30       	cpi	r24, 0x04	; 4
    221e:	99 f5       	brne	.+102    	; 0x2286 <__fpcmp_parts_f+0x88>
    2220:	81 81       	ldd	r24, Z+1	; 0x01
    2222:	68 2f       	mov	r22, r24
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	61 1b       	sub	r22, r17
    2228:	71 09       	sbc	r23, r1
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <__fpcmp_parts_f+0xac>
    222c:	84 30       	cpi	r24, 0x04	; 4
    222e:	21 f0       	breq	.+8      	; 0x2238 <__fpcmp_parts_f+0x3a>
    2230:	92 30       	cpi	r25, 0x02	; 2
    2232:	31 f4       	brne	.+12     	; 0x2240 <__fpcmp_parts_f+0x42>
    2234:	82 30       	cpi	r24, 0x02	; 2
    2236:	b9 f1       	breq	.+110    	; 0x22a6 <__fpcmp_parts_f+0xa8>
    2238:	81 81       	ldd	r24, Z+1	; 0x01
    223a:	88 23       	and	r24, r24
    223c:	89 f1       	breq	.+98     	; 0x22a0 <__fpcmp_parts_f+0xa2>
    223e:	2d c0       	rjmp	.+90     	; 0x229a <__fpcmp_parts_f+0x9c>
    2240:	11 96       	adiw	r26, 0x01	; 1
    2242:	1c 91       	ld	r17, X
    2244:	11 97       	sbiw	r26, 0x01	; 1
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	f1 f0       	breq	.+60     	; 0x2286 <__fpcmp_parts_f+0x88>
    224a:	81 81       	ldd	r24, Z+1	; 0x01
    224c:	18 17       	cp	r17, r24
    224e:	d9 f4       	brne	.+54     	; 0x2286 <__fpcmp_parts_f+0x88>
    2250:	12 96       	adiw	r26, 0x02	; 2
    2252:	2d 91       	ld	r18, X+
    2254:	3c 91       	ld	r19, X
    2256:	13 97       	sbiw	r26, 0x03	; 3
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	82 17       	cp	r24, r18
    225e:	93 07       	cpc	r25, r19
    2260:	94 f0       	brlt	.+36     	; 0x2286 <__fpcmp_parts_f+0x88>
    2262:	28 17       	cp	r18, r24
    2264:	39 07       	cpc	r19, r25
    2266:	bc f0       	brlt	.+46     	; 0x2296 <__fpcmp_parts_f+0x98>
    2268:	14 96       	adiw	r26, 0x04	; 4
    226a:	8d 91       	ld	r24, X+
    226c:	9d 91       	ld	r25, X+
    226e:	0d 90       	ld	r0, X+
    2270:	bc 91       	ld	r27, X
    2272:	a0 2d       	mov	r26, r0
    2274:	24 81       	ldd	r18, Z+4	; 0x04
    2276:	35 81       	ldd	r19, Z+5	; 0x05
    2278:	46 81       	ldd	r20, Z+6	; 0x06
    227a:	57 81       	ldd	r21, Z+7	; 0x07
    227c:	28 17       	cp	r18, r24
    227e:	39 07       	cpc	r19, r25
    2280:	4a 07       	cpc	r20, r26
    2282:	5b 07       	cpc	r21, r27
    2284:	18 f4       	brcc	.+6      	; 0x228c <__fpcmp_parts_f+0x8e>
    2286:	11 23       	and	r17, r17
    2288:	41 f0       	breq	.+16     	; 0x229a <__fpcmp_parts_f+0x9c>
    228a:	0a c0       	rjmp	.+20     	; 0x22a0 <__fpcmp_parts_f+0xa2>
    228c:	82 17       	cp	r24, r18
    228e:	93 07       	cpc	r25, r19
    2290:	a4 07       	cpc	r26, r20
    2292:	b5 07       	cpc	r27, r21
    2294:	40 f4       	brcc	.+16     	; 0x22a6 <__fpcmp_parts_f+0xa8>
    2296:	11 23       	and	r17, r17
    2298:	19 f0       	breq	.+6      	; 0x22a0 <__fpcmp_parts_f+0xa2>
    229a:	61 e0       	ldi	r22, 0x01	; 1
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	05 c0       	rjmp	.+10     	; 0x22aa <__fpcmp_parts_f+0xac>
    22a0:	6f ef       	ldi	r22, 0xFF	; 255
    22a2:	7f ef       	ldi	r23, 0xFF	; 255
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <__fpcmp_parts_f+0xac>
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	cb 01       	movw	r24, r22
    22ac:	1f 91       	pop	r17
    22ae:	08 95       	ret

000022b0 <__prologue_saves__>:
    22b0:	2f 92       	push	r2
    22b2:	3f 92       	push	r3
    22b4:	4f 92       	push	r4
    22b6:	5f 92       	push	r5
    22b8:	6f 92       	push	r6
    22ba:	7f 92       	push	r7
    22bc:	8f 92       	push	r8
    22be:	9f 92       	push	r9
    22c0:	af 92       	push	r10
    22c2:	bf 92       	push	r11
    22c4:	cf 92       	push	r12
    22c6:	df 92       	push	r13
    22c8:	ef 92       	push	r14
    22ca:	ff 92       	push	r15
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	ca 1b       	sub	r28, r26
    22da:	db 0b       	sbc	r29, r27
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	09 94       	ijmp

000022e8 <__epilogue_restores__>:
    22e8:	2a 88       	ldd	r2, Y+18	; 0x12
    22ea:	39 88       	ldd	r3, Y+17	; 0x11
    22ec:	48 88       	ldd	r4, Y+16	; 0x10
    22ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    22f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    22f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    22f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    22f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    22f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    22fa:	b9 84       	ldd	r11, Y+9	; 0x09
    22fc:	c8 84       	ldd	r12, Y+8	; 0x08
    22fe:	df 80       	ldd	r13, Y+7	; 0x07
    2300:	ee 80       	ldd	r14, Y+6	; 0x06
    2302:	fd 80       	ldd	r15, Y+5	; 0x05
    2304:	0c 81       	ldd	r16, Y+4	; 0x04
    2306:	1b 81       	ldd	r17, Y+3	; 0x03
    2308:	aa 81       	ldd	r26, Y+2	; 0x02
    230a:	b9 81       	ldd	r27, Y+1	; 0x01
    230c:	ce 0f       	add	r28, r30
    230e:	d1 1d       	adc	r29, r1
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	ed 01       	movw	r28, r26
    231c:	08 95       	ret

0000231e <memcpy>:
    231e:	fb 01       	movw	r30, r22
    2320:	dc 01       	movw	r26, r24
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <memcpy+0xa>
    2324:	01 90       	ld	r0, Z+
    2326:	0d 92       	st	X+, r0
    2328:	41 50       	subi	r20, 0x01	; 1
    232a:	50 40       	sbci	r21, 0x00	; 0
    232c:	d8 f7       	brcc	.-10     	; 0x2324 <memcpy+0x6>
    232e:	08 95       	ret

00002330 <memset>:
    2330:	dc 01       	movw	r26, r24
    2332:	01 c0       	rjmp	.+2      	; 0x2336 <memset+0x6>
    2334:	6d 93       	st	X+, r22
    2336:	41 50       	subi	r20, 0x01	; 1
    2338:	50 40       	sbci	r21, 0x00	; 0
    233a:	e0 f7       	brcc	.-8      	; 0x2334 <memset+0x4>
    233c:	08 95       	ret

0000233e <_exit>:
    233e:	f8 94       	cli

00002340 <__stop_program>:
    2340:	ff cf       	rjmp	.-2      	; 0x2340 <__stop_program>
